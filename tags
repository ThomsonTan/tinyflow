!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/bf8aa43e/
"a	lua\\testes\\errors.lua	/^checkmessage("a = #print", "length of a function value")$/;"	f
"x	lua\\testes\\api.lua	/^]], "x=150", function (a) assert(a==nil); return 3 end)$/;"	f
$(ALIB)	dmlc-core\\Makefile	/^$(ALIB):$/;"	t
$(ALL_EXAMPLE)	dmlc-core\\example\\dmlc_example.mk	/^$(ALL_EXAMPLE) :$/;"	t
$(ALL_O)	lua\\makefile	/^$(ALL_O): makefile ltests.h$/;"	t
$(BIN)	dmlc-core\\Makefile	/^$(BIN) :$/;"	t
$(CORE_T)	lua\\makefile	/^$(CORE_T): $(CORE_O) $(AUX_O) $(LIB_O)$/;"	t
$(LUAC_T)	lua\\makefile	/^$(LUAC_T): $(LUAC_O) $(CORE_T)$/;"	t
$(LUA_T)	lua\\makefile	/^$(LUA_T): $(LUA_O) $(CORE_T)$/;"	t
$(NNVM_PATH)/lib/libnnvm.a	Makefile	/^$(NNVM_PATH)\/lib\/libnnvm.a:$/;"	t
$(OBJ)	dmlc-core\\Makefile	/^$(OBJ) :$/;"	t
$(TEST)	dmlc-core\\test\\dmlc_test.mk	/^$(TEST) :$/;"	t
$(UNITTEST)	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^$(UNITTEST) : $(UNITTEST_OBJ)$/;"	t
$(UTEST_ROOT)/%.o	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^$(UTEST_ROOT)\/%.o : $(UTEST_ROOT)\/%.cc libdmlc.a$/;"	t
${CACHE_PREFIX}/include/gtest	dmlc-core\\scripts\\packages.mk	/^${CACHE_PREFIX}\/include\/gtest:$/;"	t
${CACHE_PREFIX}/include/lz4.h	dmlc-core\\scripts\\packages.mk	/^${CACHE_PREFIX}\/include\/lz4.h:$/;"	t
.__gc	lua\\testes\\gc.lua	/^    getmetatable(u).__gc = function (o)$/;"	f
.__gc	lua\\testes\\gc.lua	/^getmetatable(u).__gc = function (o) os.exit(1) end  -- cannot happen$/;"	f
.__index	lua\\testes\\api.lua	/^getmetatable(b).__index = function (t, i) return a[i] end$/;"	f
.__index	lua\\testes\\api.lua	/^getmetatable(b).__index = function (t, i) return t.p[i] end$/;"	f
.__index	lua\\testes\\big.lua	/^getmetatable(env).__index = function () end$/;"	f
.__newindex	lua\\testes\\api.lua	/^getmetatable(b).__newindex = function (t, i,v ) a[i] = v end$/;"	f
.__newindex	lua\\testes\\big.lua	/^getmetatable(env).__newindex = function () end$/;"	f
.__newindex	lua\\testes\\big.lua	/^getmetatable(env).__newindex = function () error("hi") end$/;"	f
.__tostring	lua\\testes\\strings.lua	/^getmetatable(m).__tostring = function () return {} end$/;"	f
1]	lua\\testes\\calls.lua	/^  prog[#prog + 1] = "; return function () return a1"$/;"	f
1]	lua\\testes\\goto.lua	/^      t[#t + 1] = function () return a, b, c, d end   -- t[3], t[5]$/;"	f
1]	lua\\testes\\goto.lua	/^    t[#t + 1] = function () return a, b, c, d end    -- t[2], t[4], t[6]$/;"	f
A	lua\\testes\\coroutine.lua	/^  A = coroutine.wrap(function()$/;"	f
A	lua\\testes\\db.lua	/^  local A = function ()$/;"	f
A note on function calls	torch7\\doc\\tensor.md	/^## A note on function calls ##$/;"	s
ABSLINEINFO	lua\\ldebug.h	/^#define ABSLINEINFO	/;"	d
ABSTKEYCONSTANT	lua\\lobject.h	/^#define ABSTKEYCONSTANT	/;"	d
ADD_CFLAGS	nnvm\\make\\config.mk	/^ADD_CFLAGS=$/;"	m
ADD_LDFLAGS	nnvm\\make\\config.mk	/^ADD_LDFLAGS=$/;"	m
AGEBITS	lua\\lgc.h	/^#define AGEBITS	/;"	d
ALIB	dmlc-core\\Makefile	/^ALIB=libdmlc.a$/;"	m
ALLSPHINXOPTS	dmlc-core\\doc\\Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ALL_A	lua\\makefile	/^ALL_A= $(CORE_T)$/;"	m
ALL_DEP	Makefile	/^ALL_DEP = $(OBJ) $(LIB_DEP)$/;"	m
ALL_DEP	nnvm\\Makefile	/^ALL_DEP = $(ALL_OBJ) $(PLUGIN_OBJ)$/;"	m
ALL_EXAMPLE	dmlc-core\\example\\dmlc_example.mk	/^ALL_EXAMPLE=example\/parameter$/;"	m
ALL_O	lua\\makefile	/^ALL_O= $(CORE_O) $(LUA_O) $(LUAC_O) $(AUX_O) $(LIB_O)$/;"	m
ALL_OBJ	nnvm\\Makefile	/^ALL_OBJ = $(patsubst %.cc, build\/%.o, $(SRC))$/;"	m
ALL_T	lua\\makefile	/^ALL_T= $(CORE_T) $(LUA_T) $(LUAC_T)$/;"	m
ALL_TEST	dmlc-core\\test\\dmlc_test.mk	/^ALL_TEST=$(TEST) $(UNITTEST)$/;"	m
ALL_TEST_OBJ	dmlc-core\\test\\dmlc_test.mk	/^ALL_TEST_OBJ=$(UNITTEST_OBJ)$/;"	m
ALPHABIT	lua\\lctype.h	/^#define ALPHABIT	/;"	d
API_BEGIN	nnvm\\src\\c_api\\c_api_common.h	/^#define API_BEGIN(/;"	d
API_BEGIN	src\\c_api.cc	/^#define API_BEGIN(/;"	d	file:
API_END	nnvm\\src\\c_api\\c_api_common.h	/^#define API_END(/;"	d
API_END	src\\c_api.cc	/^#define API_END(/;"	d	file:
API_END_HANDLE_ERROR	nnvm\\src\\c_api\\c_api_common.h	/^#define API_END_HANDLE_ERROR(/;"	d
API_END_HANDLE_ERROR	src\\c_api.cc	/^#define API_END_HANDLE_ERROR(/;"	d	file:
AR	lua\\makefile	/^AR= ar rc$/;"	m
ARCHITECTURE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARR	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define ARR(/;"	d	file:
ARR_SWAP	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define ARR_SWAP(/;"	d	file:
AST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class AST {$/;"	c	namespace:nnvm::fusion
ASTPtr	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^using ASTPtr        = std::shared_ptr<AST>;$/;"	t	namespace:nnvm::fusion	typeref:typename:std::shared_ptr<AST>
ASTPtrIter	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^using ASTPtrIter = std::vector<ASTPtr>::const_iterator;$/;"	t	namespace:nnvm::fusion::__anon0d7734b40110	typeref:typename:std::vector<ASTPtr>::const_iterator	file:
AUXMARK	lua\\loadlib.c	/^#define AUXMARK /;"	d	file:
AUX_O	lua\\makefile	/^AUX_O=	lauxlib.o$/;"	m
AVLTree	dmlc-core\\test\\registry_test.cc	/^struct AVLTree : public Tree {$/;"	s	namespace:tree	file:
AbsLineInfo	lua\\lobject.h	/^typedef struct AbsLineInfo {$/;"	s
AbsLineInfo	lua\\lobject.h	/^} AbsLineInfo;$/;"	t	typeref:struct:AbsLineInfo
AdamOptimizer	python\\tinyflow\\train.py	/^class AdamOptimizer(object):$/;"	c
AddAlias	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void AddAlias(const std::string& field, const std::string& alias) {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
AddAlias	dmlc-core\\include\\dmlc\\registry.h	/^  inline void AddAlias(const std::string& key_name,$/;"	f	class:dmlc::Registry	typeref:typename:void
AddAlias	nnvm\\include\\dmlc\\parameter.h	/^  inline void AddAlias(const std::string& field, const std::string& alias) {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
AddAlias	nnvm\\include\\dmlc\\registry.h	/^  inline void AddAlias(const std::string& key_name,$/;"	f	class:dmlc::Registry	typeref:typename:void
AddControlDeps	nnvm\\src\\core\\symbolic.cc	/^void Symbol::AddControlDeps(const Symbol& src) {$/;"	f	class:nnvm::Symbol	typeref:typename:void
AddEntry	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void AddEntry(const std::string &key, FieldAccessEntry *e) {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
AddEntry	nnvm\\include\\dmlc\\parameter.h	/^  inline void AddEntry(const std::string &key, FieldAccessEntry *e) {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
AddGroupTrigger	nnvm\\src\\core\\op.cc	/^void Op::AddGroupTrigger(const std::string& group_name,$/;"	f	class:nnvm::Op	typeref:typename:void
Addition and subtraction	torch7\\doc\\maths.md	/^### Addition and subtraction ###$/;"	S
AggFun	nnvm\\src\\pass\\gradient.cc	/^  using AggFun = std::function<NodeEntry (std::vector<NodeEntry>&& inputs)>;$/;"	t	function:nnvm::pass::__anona60d04f90110::Gradient	file:
Alloc	nnvm\\src\\pass\\plan_memory.cc	/^  StorageID Alloc(int dev_id, size_t size) {$/;"	f	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:StorageID	file:
AnyJSONManager	dmlc-core\\include\\dmlc\\json.h	/^  AnyJSONManager() {}$/;"	f	class:dmlc::json::AnyJSONManager
AnyJSONManager	dmlc-core\\include\\dmlc\\json.h	/^class AnyJSONManager {$/;"	c	namespace:dmlc::json
AnyJSONManager	nnvm\\include\\dmlc\\json.h	/^  AnyJSONManager() {}$/;"	f	class:dmlc::json::AnyJSONManager
AnyJSONManager	nnvm\\include\\dmlc\\json.h	/^class AnyJSONManager {$/;"	c	namespace:dmlc::json
ApplicationMaster	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private ApplicationMaster() throws IOException {$/;"	m	class:ApplicationMaster	file:
ApplicationMaster	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^public class ApplicationMaster {$/;"	c
ApplyPass	nnvm\\include\\nnvm\\pass.h	/^inline Graph ApplyPass(Graph src, const std::string& pass) {$/;"	f	namespace:nnvm	typeref:typename:Graph
ApplyPasses	nnvm\\src\\core\\pass.cc	/^Graph ApplyPasses(Graph g,$/;"	f	namespace:nnvm	typeref:typename:Graph
Applying a function to a tensor	torch7\\doc\\tensor.md	/^## Applying a function to a tensor ##$/;"	s
Argument Types	cwrap\\doc\\argumenttypes.md	/^## Argument Types ##$/;"	s
Argument fields	cwrap\\doc\\highlevelinterface.md	/^#### Argument fields ####$/;"	t
ArrayHandler	dmlc-core\\include\\dmlc\\json.h	/^struct ArrayHandler {$/;"	s	namespace:dmlc::json
ArrayHandler	nnvm\\include\\dmlc\\json.h	/^struct ArrayHandler {$/;"	s	namespace:dmlc::json
ArrayPacker	python\\tinyflow\\datasets.py	/^class ArrayPacker(object):$/;"	c
ArraySubscriptAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ArraySubscriptAST(ASTPtr lhs, ASTPtr rhs)$/;"	f	class:nnvm::fusion::ArraySubscriptAST
ArraySubscriptAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class ArraySubscriptAST : public AST {$/;"	c	namespace:nnvm::fusion
ArrayViewTest	dmlc-core\\test\\unittest\\unittest_array_view.cc	/^void ArrayViewTest(dmlc::array_view<int> view, int base) {$/;"	f	typeref:typename:void
AssignAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  AssignAST(ASTPtr var, ASTPtr val)$/;"	f	class:nnvm::fusion::AssignAST
AssignAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class AssignAST : public AST {$/;"	c	namespace:nnvm::fusion
AtEnd	dmlc-core\\src\\io\\local_filesys.cc	/^  virtual bool AtEnd(void) const {$/;"	f	class:dmlc::io::FileStream	typeref:typename:bool	file:
AtEnd	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual bool AtEnd(void) const {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:bool	file:
AttrHintFun	nnvm\\src\\pass\\gradient.cc	/^  using AttrHintFun = std::function<NodeEntry (const NodeEntry& src, const NodeEntry &like)>;$/;"	t	function:nnvm::pass::__anona60d04f90110::Gradient	file:
AttrScope	nnvm\\python\\nnvm\\attribute.py	/^class AttrScope(object):$/;"	c
AttrVector	nnvm\\src\\pass\\infer_shape_type.cc	/^  using AttrVector = std::vector<AttrType>;$/;"	t	function:nnvm::pass::__anon305116100110::InferAttr	typeref:typename:std::vector<AttrType>	file:
AutoStructify	dmlc-core\\doc\\sphinx_util.py	/^AutoStructify = transform.AutoStructify$/;"	v
Aux	lua\\ltests.c	/^struct Aux { jmp_buf jb; const char *paniccode; lua_State *L; };$/;"	s	file:
AzureFileSystem	dmlc-core\\src\\io\\azure_filesys.cc	/^AzureFileSystem::AzureFileSystem() {$/;"	f	class:dmlc::io::AzureFileSystem
AzureFileSystem	dmlc-core\\src\\io\\azure_filesys.h	/^class AzureFileSystem : public FileSystem {$/;"	c	namespace:dmlc::io
B	lua\\testes\\api.lua	/^function B(x) return x and 1 or 0 end$/;"	f
B	lua\\testes\\coroutine.lua	/^  local B = coroutine.create(function() return coroutine.resume(A) end)$/;"	f
BASIC_STACK_SIZE	lua\\lstate.h	/^#define BASIC_STACK_SIZE /;"	d
BIN_OPERATOR_ERROR	torch7\\lib\\luaT\\luaT.c	/^#define BIN_OPERATOR_ERROR(/;"	d	file:
BITRAS	lua\\lobject.h	/^#define BITRAS	/;"	d
BIT_ISCOLLECTABLE	lua\\lobject.h	/^#define BIT_ISCOLLECTABLE	/;"	d
BLACKBIT	lua\\lgc.h	/^#define BLACKBIT	/;"	d
BOTH_SWAP	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define BOTH_SWAP(/;"	d	file:
BUFVFS	lua\\lobject.c	/^#define BUFVFS	/;"	d	file:
BUILDDIR	dmlc-core\\doc\\Makefile	/^BUILDDIR      = _build$/;"	m
BUILD_TEST	dmlc-core\\make\\config.mk	/^BUILD_TEST=0$/;"	m
BackFindEndLine	dmlc-core\\src\\data\\text_parser.h	/^  inline char* BackFindEndLine(char *bptr,$/;"	f	class:dmlc::data::TextParserBase	typeref:typename:char *
Base64	dmlc-core\\src\\io\\s3_filesys.cc	/^static std::string Base64(unsigned char md[], unsigned len) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:std::string	file:
Basic operations	torch7\\doc\\maths.md	/^## Basic operations ##$/;"	s
BasicRowIter	dmlc-core\\src\\data\\basic_row_iter.h	/^  explicit BasicRowIter(Parser<IndexType> *parser)$/;"	f	class:dmlc::data::BasicRowIter
BasicRowIter	dmlc-core\\src\\data\\basic_row_iter.h	/^class BasicRowIter: public RowBlockIter<IndexType> {$/;"	c	namespace:dmlc::data
BatchNormalizationParam	src\\op_nn.cc	/^struct BatchNormalizationParam : public dmlc::Parameter<BatchNormalizationParam> {$/;"	s	namespace:tinyflow	file:
BatchNormalizationShape	src\\op_nn.cc	/^inline bool BatchNormalizationShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
BeforeFirst	dmlc-core\\include\\dmlc\\threadediter.h	/^    virtual void BeforeFirst(void) {$/;"	f	class:dmlc::ThreadedIter::Producer	typeref:typename:void
BeforeFirst	dmlc-core\\include\\dmlc\\threadediter.h	/^  virtual void BeforeFirst(void) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:void
BeforeFirst	dmlc-core\\src\\data\\basic_row_iter.h	/^  virtual void BeforeFirst(void) {$/;"	f	class:dmlc::data::BasicRowIter	typeref:typename:void
BeforeFirst	dmlc-core\\src\\data\\disk_row_iter.h	/^  virtual void BeforeFirst(void) {$/;"	f	class:dmlc::data::DiskRowIter	typeref:typename:void
BeforeFirst	dmlc-core\\src\\data\\parser.h	/^  virtual void BeforeFirst() {$/;"	f	class:dmlc::data::ThreadedParser	typeref:typename:void
BeforeFirst	dmlc-core\\src\\data\\text_parser.h	/^  virtual void BeforeFirst(void) {$/;"	f	class:dmlc::data::TextParserBase	typeref:typename:void
BeforeFirst	dmlc-core\\src\\io\\cached_input_split.h	/^  virtual void BeforeFirst(void) {$/;"	f	class:dmlc::io::CachedInputSplit	typeref:typename:void
BeforeFirst	dmlc-core\\src\\io\\input_split_base.cc	/^void InputSplitBase::BeforeFirst(void) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:void
BeforeFirst	dmlc-core\\src\\io\\single_file_split.h	/^  virtual void BeforeFirst(void) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:void
BeforeFirst	dmlc-core\\src\\io\\threaded_input_split.h	/^  virtual void BeforeFirst() {$/;"	f	class:dmlc::io::ThreadedInputSplit	typeref:typename:void
BeforeFirst	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^  virtual void BeforeFirst(void) {$/;"	f	struct:producer_test::IntProducer	typeref:typename:void	file:
BeginArray	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONReader::BeginArray() {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
BeginArray	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::BeginArray(bool multi_line) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
BeginArray	nnvm\\include\\dmlc\\json.h	/^inline void JSONReader::BeginArray() {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
BeginArray	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::BeginArray(bool multi_line) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
BeginObject	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONReader::BeginObject() {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
BeginObject	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::BeginObject(bool multi_line) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
BeginObject	nnvm\\include\\dmlc\\json.h	/^inline void JSONReader::BeginObject() {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
BeginObject	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::BeginObject(bool multi_line) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
BeginPtr	dmlc-core\\include\\dmlc\\base.h	/^inline T *BeginPtr(std::vector<T> &vec) {  \/\/ NOLINT(*)$/;"	f	namespace:dmlc	typeref:typename:T *
BeginPtr	dmlc-core\\include\\dmlc\\base.h	/^inline char* BeginPtr(std::string &str) {  \/\/ NOLINT(*)$/;"	f	namespace:dmlc	typeref:typename:char *
BeginPtr	dmlc-core\\include\\dmlc\\base.h	/^inline const T *BeginPtr(const std::vector<T> &vec) {$/;"	f	namespace:dmlc	typeref:typename:const T *
BeginPtr	dmlc-core\\include\\dmlc\\base.h	/^inline const char* BeginPtr(const std::string &str) {$/;"	f	namespace:dmlc	typeref:typename:const char *
BeginPtr	nnvm\\include\\dmlc\\base.h	/^inline T *BeginPtr(std::vector<T> &vec) {  \/\/ NOLINT(*)$/;"	f	namespace:dmlc	typeref:typename:T *
BeginPtr	nnvm\\include\\dmlc\\base.h	/^inline char* BeginPtr(std::string &str) {  \/\/ NOLINT(*)$/;"	f	namespace:dmlc	typeref:typename:char *
BeginPtr	nnvm\\include\\dmlc\\base.h	/^inline const T *BeginPtr(const std::vector<T> &vec) {$/;"	f	namespace:dmlc	typeref:typename:const T *
BeginPtr	nnvm\\include\\dmlc\\base.h	/^inline const char* BeginPtr(const std::string &str) {$/;"	f	namespace:dmlc	typeref:typename:const char *
BinOpr	lua\\lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	lua\\lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BinaryAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  BinaryAST(char op, ASTPtr lhs, ASTPtr rhs)$/;"	f	class:nnvm::fusion::BinaryAST
BinaryAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class BinaryAST : public AST {$/;"	c	namespace:nnvm::fusion
BinaryTree	dmlc-core\\test\\registry_test.cc	/^struct BinaryTree : public Tree {$/;"	s	namespace:tree	file:
Blob	dmlc-core\\include\\dmlc\\io.h	/^  struct Blob {$/;"	s	class:dmlc::InputSplit
BlockCnt	lua\\lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	lua\\lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
BuffFS	lua\\lobject.c	/^typedef struct BuffFS {$/;"	s	file:
BuffFS	lua\\lobject.c	/^} BuffFS;$/;"	t	typeref:struct:BuffFS	file:
Bug reports	torch7\\CONTRIBUTING.md	/^## Bug reports$/;"	s
Build	README.md	/^## Build$/;"	s
Build Infrastructure Requirements	torch7\\ROADMAP.md	/^## Build Infrastructure Requirements$/;"	s
BuildCache	dmlc-core\\src\\data\\disk_row_iter.h	/^BuildCache(Parser<IndexType> *parser) {$/;"	f	class:dmlc::data::DiskRowIter	typeref:typename:void
BytesRead	dmlc-core\\src\\data\\parser.h	/^  virtual size_t BytesRead(void) const {$/;"	f	class:dmlc::data::ThreadedParser	typeref:typename:size_t
BytesRead	dmlc-core\\src\\data\\text_parser.h	/^  virtual size_t BytesRead(void) const {$/;"	f	class:dmlc::data::TextParserBase	typeref:typename:size_t
C	lua\\testes\\coroutine.lua	/^  C = coroutine.create(function ()$/;"	f
CAP_POSITION	lua\\lstrlib.c	/^#define CAP_POSITION	/;"	d	file:
CAP_UNFINISHED	lua\\lstrlib.c	/^#define CAP_UNFINISHED	/;"	d	file:
CC	dmlc-core\\make\\config.mk	/^export CC = gcc$/;"	m
CC	lua\\makefile	/^CC= gcc$/;"	m
CC	lua\\testes\\libs\\makefile	/^CC = gcc$/;"	m
CClosure	lua\\lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	lua\\lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CDATA_MT_KEY	torch7\\lib\\luaT\\luaT.c	/^static void* CDATA_MT_KEY = &CDATA_MT_KEY;$/;"	v	typeref:typename:void *	file:
CFLAGS	Makefile	/^export CFLAGS =  -std=c++11 -Wall -O2 -msse2  -Wno-unknown-pragmas -funroll-loops\\$/;"	m
CFLAGS	dmlc-core\\Makefile	/^export CFLAGS = -O3 -Wall -Wno-unknown-pragmas -Iinclude  -std=c++0x$/;"	m
CFLAGS	lua\\makefile	/^CFLAGS= -Wall -O2 $(MYCFLAGS) -fno-stack-protector -fno-common -march=native$/;"	m
CFLAGS	lua\\testes\\libs\\makefile	/^CFLAGS = -Wall -std=gnu99 -O2 -I$(LUA_DIR) -fPIC -shared$/;"	m
CFLAGS	nnvm\\Makefile	/^export CFLAGS = -std=c++11 -Wall -O2 -msse2  -Wno-unknown-pragmas -funroll-loops\\$/;"	m
CHECK	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK(/;"	d
CHECK	nnvm\\include\\dmlc\\logging.h	/^#define CHECK(/;"	d
CHECK_EQ	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK_EQ(/;"	d
CHECK_EQ	nnvm\\include\\dmlc\\logging.h	/^#define CHECK_EQ(/;"	d
CHECK_GE	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK_GE(/;"	d
CHECK_GE	nnvm\\include\\dmlc\\logging.h	/^#define CHECK_GE(/;"	d
CHECK_GT	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK_GT(/;"	d
CHECK_GT	nnvm\\include\\dmlc\\logging.h	/^#define CHECK_GT(/;"	d
CHECK_LE	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK_LE(/;"	d
CHECK_LE	nnvm\\include\\dmlc\\logging.h	/^#define CHECK_LE(/;"	d
CHECK_LT	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK_LT(/;"	d
CHECK_LT	nnvm\\include\\dmlc\\logging.h	/^#define CHECK_LT(/;"	d
CHECK_NE	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK_NE(/;"	d
CHECK_NE	nnvm\\include\\dmlc\\logging.h	/^#define CHECK_NE(/;"	d
CHECK_NOTNULL	dmlc-core\\include\\dmlc\\logging.h	/^#define CHECK_NOTNULL(/;"	d
CHECK_NOTNULL	nnvm\\include\\dmlc\\logging.h	/^#define CHECK_NOTNULL(/;"	d
CIFAR10Data	python\\tinyflow\\datasets.py	/^CIFAR10Data = namedtuple("CIFAR10Data", ["train", "test"])$/;"	v
CIST_C	lua\\lstate.h	/^#define CIST_C	/;"	d
CIST_FIN	lua\\lstate.h	/^#define CIST_FIN	/;"	d
CIST_HOOKED	lua\\lstate.h	/^#define CIST_HOOKED	/;"	d
CIST_HOOKYIELD	lua\\lstate.h	/^#define CIST_HOOKYIELD	/;"	d
CIST_LEQ	lua\\lstate.h	/^#define CIST_LEQ	/;"	d
CIST_OAH	lua\\lstate.h	/^#define CIST_OAH	/;"	d
CIST_TAIL	lua\\lstate.h	/^#define CIST_TAIL	/;"	d
CIST_TRAN	lua\\lstate.h	/^#define CIST_TRAN	/;"	d
CIST_YPCALL	lua\\lstate.h	/^#define CIST_YPCALL	/;"	d
CInterface.new	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface.new()$/;"	f
CInterface.new	cwrap\\cinterface.lua	/^function CInterface.new()$/;"	f
CInterface:__addchelpers	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:__addchelpers()$/;"	f
CInterface:__addchelpers	cwrap\\cinterface.lua	/^function CInterface:__addchelpers()$/;"	f
CInterface:__writecall	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:__writecall(txt, args, cfuncname, cargs, argcreturned)$/;"	f
CInterface:__writecall	cwrap\\cinterface.lua	/^function CInterface:__writecall(txt, args, cfuncname, cargs, argcreturned)$/;"	f
CInterface:__writechecks	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:__writechecks(txt, args, argset)$/;"	f
CInterface:__writechecks	cwrap\\cinterface.lua	/^function CInterface:__writechecks(txt, args, argset)$/;"	f
CInterface:__writeheaders	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:__writeheaders(txt, args, argoffset)$/;"	f
CInterface:__writeheaders	cwrap\\cinterface.lua	/^function CInterface:__writeheaders(txt, args, argoffset)$/;"	f
CInterface:clearhistory	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:clearhistory()$/;"	f
CInterface:clearhistory	cwrap\\cinterface.lua	/^function CInterface:clearhistory()$/;"	f
CInterface:luaname2wrapname	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:luaname2wrapname(name)$/;"	f
CInterface:luaname2wrapname	cwrap\\cinterface.lua	/^function CInterface:luaname2wrapname(name)$/;"	f
CInterface:print	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:print(str)$/;"	f
CInterface:print	cwrap\\cinterface.lua	/^function CInterface:print(str)$/;"	f
CInterface:register	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:register(name)$/;"	f
CInterface:register	cwrap\\cinterface.lua	/^function CInterface:register(name)$/;"	f
CInterface:registerDefaultArgument	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:registerDefaultArgument(code)$/;"	f
CInterface:registerDefaultArgument	cwrap\\cinterface.lua	/^function CInterface:registerDefaultArgument(code)$/;"	f
CInterface:tofile	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:tofile(filename)$/;"	f
CInterface:tofile	cwrap\\cinterface.lua	/^function CInterface:tofile(filename)$/;"	f
CInterface:tostring	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:tostring()$/;"	f
CInterface:tostring	cwrap\\cinterface.lua	/^function CInterface:tostring()$/;"	f
CInterface:wrap	bin\\lua\\cwrap\\cinterface.lua	/^function CInterface:wrap(luaname, ...)$/;"	f
CInterface:wrap	cwrap\\cinterface.lua	/^function CInterface:wrap(luaname, ...)$/;"	f
CLEAR_AVX	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^#define CLEAR_AVX(/;"	d	file:
CLIBS	lua\\loadlib.c	/^static const int CLIBS = 0;$/;"	v	typeref:typename:const int	file:
CLOSEPROTECT	lua\\lfunc.h	/^#define CLOSEPROTECT	/;"	d
COMMON_SIMD_H	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define COMMON_SIMD_H$/;"	d
COMPILER_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CONVOLUTION_LOOP	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLUTION_LOOP(/;"	d
CONVOLVEX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVEX(/;"	d
CONVOLVE_1ROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_1ROWS(/;"	d
CONVOLVE_2ROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_2ROWS(/;"	d
CONVOLVE_4COLS_XROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_4COLS_XROWS(/;"	d
CONVOLVE_4ROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_4ROWS(/;"	d
CONVOLVE_5ROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_5ROWS(/;"	d
CONVOLVE_6ROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_6ROWS(/;"	d
CONVOLVE_7ROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_7ROWS(/;"	d
CONVOLVE_8COLS_XROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_8COLS_XROWS(/;"	d
CONVOLVE_8ROWS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define CONVOLVE_8ROWS(/;"	d
CORE_O	lua\\makefile	/^CORE_O=	lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o \\$/;"	m
CORE_T	lua\\makefile	/^CORE_T=	liblua.a$/;"	m
COS_DEAD	lua\\lcorolib.c	/^#define COS_DEAD	/;"	d	file:
COS_NORM	lua\\lcorolib.c	/^#define COS_NORM	/;"	d	file:
COS_RUN	lua\\lcorolib.c	/^#define COS_RUN	/;"	d	file:
COS_YIELD	lua\\lcorolib.c	/^#define COS_YIELD	/;"	d	file:
CPATH	dmlc-core\\tracker\\yarn\\build.bat	/^for \/f %%i in ('%HADOOP_HOME%\\bin\\hadoop classpath') do set CPATH=%%i$/;"	v
CPUID_AVX2_BIT	torch7\\lib\\TH\\generic\\simd\\simd.h	/^#define CPUID_AVX2_BIT /;"	d
CPUID_AVX_BIT	torch7\\lib\\TH\\generic\\simd\\simd.h	/^#define CPUID_AVX_BIT /;"	d
CPUID_SSE_BIT	torch7\\lib\\TH\\generic\\simd\\simd.h	/^#define CPUID_SSE_BIT /;"	d
CREATE_ABCk	lua\\lopcodes.h	/^#define CREATE_ABCk(/;"	d
CREATE_ABx	lua\\lopcodes.h	/^#define CREATE_ABx(/;"	d
CREATE_Ax	lua\\lopcodes.h	/^#define CREATE_Ax(/;"	d
CREATE_sJ	lua\\lopcodes.h	/^#define CREATE_sJ(/;"	d
CSTACKCF	lua\\lstate.h	/^#define CSTACKCF	/;"	d
CSVParser	dmlc-core\\src\\data\\csv_parser.h	/^  explicit CSVParser(InputSplit *source,$/;"	f	class:dmlc::data::CSVParser
CSVParser	dmlc-core\\src\\data\\csv_parser.h	/^class CSVParser : public TextParserBase<IndexType> {$/;"	c	namespace:dmlc::data
CSVParserParam	dmlc-core\\src\\data\\csv_parser.h	/^struct CSVParserParam : public Parameter<CSVParserParam> {$/;"	s	namespace:dmlc::data
CUDA_PATH	Makefile	/^	CUDA_PATH = \/usr\/local\/cuda$/;"	m
CUDA_RUNTIME_SAFE_CALL	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^#define CUDA_RUNTIME_SAFE_CALL(/;"	d
CUDA_SAFE_CALL	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^#define CUDA_SAFE_CALL(/;"	d
CUOBJ	Makefile	/^CUOBJ = $(patsubst %.cu, build\/%_gpu.o, $(CUSRC))$/;"	m
CURLGlobal	dmlc-core\\src\\io\\s3_filesys.cc	/^  CURLGlobal() {$/;"	f	struct:dmlc::io::s3::CURLGlobal	file:
CURLGlobal	dmlc-core\\src\\io\\s3_filesys.cc	/^struct CURLGlobal {$/;"	s	namespace:dmlc::io::s3	file:
CURLReadStreamBase	dmlc-core\\src\\io\\s3_filesys.cc	/^  CURLReadStreamBase()$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	file:
CURLReadStreamBase	dmlc-core\\src\\io\\s3_filesys.cc	/^class CURLReadStreamBase : public SeekStream {$/;"	c	namespace:dmlc::io::s3	file:
CUSRC	Makefile	/^CUSRC = $(wildcard src\/*.cu src\/*\/*.cu src\/*\/*\/*.cu)$/;"	m
CWARNSC	lua\\makefile	/^CWARNSC= -Wdeclaration-after-statement \\$/;"	m
CWARNSCPP	lua\\makefile	/^CWARNSCPP= \\$/;"	m
CWrap package	cwrap\\README.md	/^# CWrap package #$/;"	c
CWrap package	cwrap\\doc\\index.md	/^# CWrap package #$/;"	c
CXX	dmlc-core\\make\\config.mk	/^export CXX = g++$/;"	m
CXX_SUFFIX	dmlc-core\\scripts\\lint.py	/^CXX_SUFFIX = set(['cc', 'c', 'cpp', 'h', 'cu', 'hpp'])$/;"	v
CXX_SUFFIX	dmlc-core\\scripts\\lint3.py	/^CXX_SUFFIX = set(['cc', 'c', 'cpp', 'h', 'cu', 'hpp'])$/;"	v
C_DIALECT	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
CachedInputSplit	dmlc-core\\src\\io\\cached_input_split.h	/^  CachedInputSplit(InputSplitBase *base,$/;"	f	class:dmlc::io::CachedInputSplit
CachedInputSplit	dmlc-core\\src\\io\\cached_input_split.h	/^class CachedInputSplit : public InputSplit {$/;"	c	namespace:dmlc::io
CallAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  CallAST(const std::string& callee, std::vector<ASTPtr> args)$/;"	f	class:nnvm::fusion::CallAST
CallAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class CallAST : public AST {$/;"	c	namespace:nnvm::fusion
CallInfo	lua\\lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	lua\\lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	lua\\lapi.c	/^struct CallS {  \/* data to 'f_call' *\/$/;"	s	file:
Callback	dmlc-core\\src\\io\\s3_filesys.cc	/^  static size_t Callback(char *buf, size_t size, size_t count, void *fp) {$/;"	f	struct:dmlc::io::s3::ReadStringStream	typeref:typename:size_t	file:
Cfunc	lua\\ltests.c	/^static int Cfunc (lua_State *L) {$/;"	f	typeref:typename:int	file:
Cfunck	lua\\ltests.c	/^static int Cfunck (lua_State *L, int status, lua_KContext ctx) {$/;"	f	typeref:typename:int	file:
Check	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void Check(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:void
Check	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void Check(void *head) const {}$/;"	f	class:dmlc::parameter::FieldAccessEntry	typeref:typename:void
Check	nnvm\\include\\dmlc\\parameter.h	/^  virtual void Check(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:void
Check	nnvm\\include\\dmlc\\parameter.h	/^  virtual void Check(void *head) const {}$/;"	f	class:dmlc::parameter::FieldAccessEntry	typeref:typename:void
CheckList before submit code	dmlc-core\\README.md	/^### CheckList before submit code$/;"	S
Checking fields of a table	torch7\\lib\\luaT\\README.md	/^### Checking fields of a table ###$/;"	S
Chook	lua\\ltests.c	/^static void Chook (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
Chunk	dmlc-core\\src\\io\\input_split_base.h	/^    explicit Chunk(size_t buffer_size)$/;"	f	struct:dmlc::io::InputSplitBase::Chunk
Chunk	dmlc-core\\src\\io\\input_split_base.h	/^  struct Chunk {$/;"	s	class:dmlc::io::InputSplitBase
Class creation and basic handling	torch7\\lib\\luaT\\README.md	/^## Class creation and basic handling ##$/;"	s
Cleanup	dmlc-core\\src\\io\\s3_filesys.cc	/^void CURLReadStreamBase::Cleanup() {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:void
Clear	dmlc-core\\src\\config.cc	/^void Config::Clear() {$/;"	f	class:dmlc::Config	typeref:typename:void
Clear	dmlc-core\\src\\data\\row_block.h	/^  inline void Clear(void) {$/;"	f	struct:dmlc::data::RowBlockContainer	typeref:typename:void
ClearAuxiliaryMembers	src\\session.cc	/^void TorchExecutor::ClearAuxiliaryMembers() {$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:void
Client	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private Client() throws IOException {$/;"	m	class:Client	file:
Client	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^public class Client {$/;"	c
Cloning	torch7\\doc\\tensor.md	/^## Cloning ##$/;"	s
Close	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  inline void Close(void) {$/;"	f	class:dmlc::io::HDFSStream	typeref:typename:void	file:
Close	dmlc-core\\src\\io\\local_filesys.cc	/^  inline void Close(void) {$/;"	f	class:dmlc::io::FileStream	typeref:typename:void	file:
Close	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual void Close() {$/;"	f	class:dmlc::io::s3::WriteStream	typeref:typename:void	file:
Closure	lua\\lobject.h	/^typedef union Closure {$/;"	u
Closure	lua\\lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	lua\\lobject.h	/^#define ClosureHeader /;"	d
CmdLine	torch7\\doc\\cmdline.md	/^# CmdLine #$/;"	c
CmdLine:__init	torch7\\CmdLine.lua	/^function CmdLine:__init(argseparator_,keyseparator_)$/;"	f
CmdLine:__readArgument__	torch7\\CmdLine.lua	/^function CmdLine:__readArgument__(params, arg, i, nArgument)$/;"	f
CmdLine:__readOption__	torch7\\CmdLine.lua	/^function CmdLine:__readOption__(params, arg, i)$/;"	f
CmdLine:addTime	torch7\\CmdLine.lua	/^function CmdLine:addTime(name, format)$/;"	f
CmdLine:argument	torch7\\CmdLine.lua	/^function CmdLine:argument(key, help, _type_)$/;"	f
CmdLine:default	torch7\\CmdLine.lua	/^function CmdLine:default()$/;"	f
CmdLine:error	torch7\\CmdLine.lua	/^function CmdLine:error(msg)$/;"	f
CmdLine:help	torch7\\CmdLine.lua	/^function CmdLine:help(arg)$/;"	f
CmdLine:log	torch7\\CmdLine.lua	/^function CmdLine:log(file, params)$/;"	f
CmdLine:option	torch7\\CmdLine.lua	/^function CmdLine:option(key, default, help, _type_)$/;"	f
CmdLine:parse	torch7\\CmdLine.lua	/^function CmdLine:parse(arg)$/;"	f
CmdLine:silent	torch7\\CmdLine.lua	/^function CmdLine:silent()$/;"	f
CmdLine:string	torch7\\CmdLine.lua	/^function CmdLine:string(prefix, params, ignore)$/;"	f
CmdLine:text	torch7\\CmdLine.lua	/^function CmdLine:text(txt)$/;"	f
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::ArraySubscriptAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::AssignAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::BinaryAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::CallAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::DeclFloatAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::FloatAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::IntAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  inline std::string CodeGen() override {$/;"	f	class:nnvm::fusion::VariableAST	typeref:typename:std::string
CodeGen	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^Graph CodeGen(Graph ret) {$/;"	f	namespace:nnvm::fusion::__anon0d7734b40110	typeref:typename:Graph
CollectionHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct CollectionHandler {$/;"	s	namespace:dmlc::serializer
ColorNodeGroup	nnvm\\src\\pass\\graph_algorithm.h	/^inline uint32_t ColorNodeGroup($/;"	f	namespace:nnvm::pass	typeref:typename:uint32_t
Column or row-wise operations  (dimension-wise operations)	torch7\\doc\\maths.md	/^## Column or row-wise operations  (dimension-wise operations) ##$/;"	s
CommonHeader	lua\\lobject.h	/^#define CommonHeader	/;"	d
CommonJSONSerializer	dmlc-core\\include\\dmlc\\json.h	/^struct CommonJSONSerializer {$/;"	s	namespace:dmlc::json
CommonJSONSerializer	nnvm\\include\\dmlc\\json.h	/^struct CommonJSONSerializer {$/;"	s	namespace:dmlc::json
Completed 3 asserts in 3 tests with 2 failures and 0 errors	torch7\\doc\\tester.md	/^Completed 3 asserts in 3 tests with 2 failures and 0 errors$/;"	s
Compose	nnvm\\src\\core\\symbolic.cc	/^void Symbol::Compose(const array_view<const Symbol*>& args,$/;"	f	class:nnvm::Symbol	typeref:typename:void
ComposeVectorHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct ComposeVectorHandler {$/;"	s	namespace:dmlc::serializer
ComputeMD5	dmlc-core\\src\\io\\s3_filesys.cc	/^static std::string ComputeMD5(const std::string &buf) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:std::string	file:
ConcurrentBlockingQueue	dmlc-core\\include\\dmlc\\concurrency.h	/^ConcurrentBlockingQueue<T, type>::ConcurrentBlockingQueue()$/;"	f	class:dmlc::ConcurrentBlockingQueue
ConcurrentBlockingQueue	dmlc-core\\include\\dmlc\\concurrency.h	/^class ConcurrentBlockingQueue {$/;"	c	namespace:dmlc
ConcurrentQueueType	dmlc-core\\include\\dmlc\\concurrency.h	/^enum class ConcurrentQueueType {$/;"	g	namespace:dmlc
Config	dmlc-core\\include\\dmlc\\config.h	/^class Config {$/;"	c	namespace:dmlc
Config	dmlc-core\\src\\config.cc	/^Config::Config(bool m): multi_value_(m) {$/;"	f	class:dmlc::Config
Config	dmlc-core\\src\\config.cc	/^Config::Config(istream& is, bool m): multi_value_(m) {$/;"	f	class:dmlc::Config
ConfigEntry	dmlc-core\\include\\dmlc\\config.h	/^  typedef std::pair<std::string, std::string> ConfigEntry;$/;"	t	class:dmlc::Config	typeref:typename:std::pair<std::string,std::string>
ConfigIterator	dmlc-core\\include\\dmlc\\config.h	/^  class ConfigIterator : public std::iterator< std::input_iterator_tag, ConfigEntry > {$/;"	c	class:dmlc::Config
ConfigIterator	dmlc-core\\src\\config.cc	/^Config::ConfigIterator::ConfigIterator(const Config::ConfigIterator& other)$/;"	f	class:dmlc::Config::ConfigIterator
ConfigIterator	dmlc-core\\src\\config.cc	/^Config::ConfigIterator::ConfigIterator(size_t i, const Config* c)$/;"	f	class:dmlc::Config::ConfigIterator
ConfigValue	dmlc-core\\include\\dmlc\\config.h	/^  struct ConfigValue {$/;"	s	class:dmlc::Config
ConsControl	lua\\lparser.c	/^struct ConsControl {$/;"	s	file:
Construction or extraction functions	torch7\\doc\\maths.md	/^## Construction or extraction functions ##$/;"	s
Constructors and Access Methods	torch7\\doc\\storage.md	/^## Constructors and Access Methods ##$/;"	s
Contents	dmlc-core\\README.md	/^Contents$/;"	s
Contents	dmlc-core\\doc\\index.md	/^Contents$/;"	s
Contributing	dmlc-core\\README.md	/^Contributing$/;"	s
Contributing to Torch7 Core (torch7, nn, cutorch, cunn)	torch7\\CONTRIBUTING.md	/^# Contributing to Torch7 Core (torch7, nn, cutorch, cunn)$/;"	c
ConvPoolParam	src\\op_nn.cc	/^struct ConvPoolParam : public dmlc::Parameter<ConvPoolParam> {$/;"	s	namespace:tinyflow	file:
ConvPoolShape	src\\op_nn.cc	/^inline bool ConvPoolShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
Convert	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef LuaState::Convert(const T& value) {$/;"	f	class:dmlc::LuaState	typeref:typename:LuaRef
ConvertPathInfo	dmlc-core\\src\\io\\hdfs_filesys.cc	/^inline FileInfo ConvertPathInfo(const URI &path, const hdfsFileInfo &info) {$/;"	f	namespace:dmlc::io	typeref:typename:FileInfo
Convolution Operations	torch7\\doc\\maths.md	/^## Convolution Operations ##$/;"	s
Copy	nnvm\\src\\core\\symbolic.cc	/^Symbol Symbol::Copy() const {$/;"	f	class:nnvm::Symbol	typeref:typename:Symbol
CopyFromTo	src\\torch\\torch_util.h	/^  void CopyFromTo(LuaRef from, LuaRef to) {$/;"	f	class:tinyflow::TorchState	typeref:typename:void
Copying and initializing	torch7\\doc\\tensor.md	/^## Copying and initializing ##$/;"	s
Create	dmlc-core\\include\\dmlc\\memory.h	/^  inline static ThreadlocalSharedPtr<T> Create(Args&&... args) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:ThreadlocalSharedPtr<T>
Create	dmlc-core\\src\\data.cc	/^Parser<uint32_t>::Create(const char *uri_,$/;"	f	class:dmlc::Parser	typeref:typename:Parser<uint32_t> *
Create	dmlc-core\\src\\data.cc	/^Parser<uint64_t>::Create(const char *uri_,$/;"	f	class:dmlc::Parser	typeref:typename:Parser<uint64_t> *
Create	dmlc-core\\src\\data.cc	/^RowBlockIter<uint32_t>::Create(const char *uri,$/;"	f	class:dmlc::RowBlockIter	typeref:typename:RowBlockIter<uint32_t> *
Create	dmlc-core\\src\\data.cc	/^RowBlockIter<uint64_t>::Create(const char *uri,$/;"	f	class:dmlc::RowBlockIter	typeref:typename:RowBlockIter<uint64_t> *
Create	dmlc-core\\src\\io.cc	/^InputSplit* InputSplit::Create(const char *uri_,$/;"	f	class:dmlc::InputSplit	typeref:typename:InputSplit *
Create	dmlc-core\\src\\io.cc	/^Stream *Stream::Create(const char *uri,$/;"	f	class:dmlc::Stream	typeref:typename:Stream *
Create	nnvm\\include\\dmlc\\memory.h	/^  inline static ThreadlocalSharedPtr<T> Create(Args&&... args) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:ThreadlocalSharedPtr<T>
Create	nnvm\\src\\core\\node.cc	/^NodePtr Node::Create() {$/;"	f	class:nnvm::Node	typeref:typename:NodePtr
Create	src\\session.cc	/^Session* Session::Create(const std::string& option) {$/;"	f	class:tinyflow::Session	typeref:typename:Session *
CreateCSVParser	dmlc-core\\src\\data.cc	/^CreateCSVParser(const std::string& path,$/;"	f	namespace:dmlc::data	typeref:typename:Parser<IndexType> *
CreateForRead	dmlc-core\\src\\io.cc	/^SeekStream *SeekStream::CreateForRead(const char *uri, bool try_create) {$/;"	f	class:dmlc::SeekStream	typeref:typename:SeekStream *
CreateFunctor	nnvm\\src\\core\\symbolic.cc	/^Symbol Symbol::CreateFunctor(const Op* op,$/;"	f	class:nnvm::Symbol	typeref:typename:Symbol
CreateGroup	nnvm\\src\\core\\symbolic.cc	/^Symbol Symbol::CreateGroup(const std::vector<Symbol> &symbols) {$/;"	f	class:nnvm::Symbol	typeref:typename:Symbol
CreateIter_	dmlc-core\\src\\data.cc	/^CreateIter_(const char *uri_,$/;"	f	namespace:dmlc::data	typeref:typename:RowBlockIter<IndexType> *
CreateLibSVMParser	dmlc-core\\src\\data.cc	/^CreateLibSVMParser(const std::string& path,$/;"	f	namespace:dmlc::data	typeref:typename:Parser<IndexType> *
CreateNode	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^InternalNodePtr CreateNode(NodePtr n) {$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:InternalNodePtr
CreateParser_	dmlc-core\\src\\data.cc	/^CreateParser_(const char *uri_,$/;"	f	namespace:dmlc::data	typeref:typename:Parser<IndexType> *
CreateVariable	nnvm\\src\\core\\symbolic.cc	/^Symbol Symbol::CreateVariable(const std::string& name) {$/;"	f	class:nnvm::Symbol	typeref:typename:Symbol
CreateVariableNode	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^InternalNodePtr CreateVariableNode(Graph& g, NodePtr n) {$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:InternalNodePtr
CreateVariableNode	nnvm\\src\\core\\symbolic.cc	/^NodePtr CreateVariableNode(const std::string& name) {$/;"	f	namespace:nnvm	typeref:typename:NodePtr
Create_	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaState* LuaState::Create_(Option opt) {$/;"	f	class:dmlc::LuaState	typeref:typename:LuaState *
CtrlCHandler	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^        public CtrlCHandler(ApplicationId appId, YarnClient yarnClient){$/;"	m	class:Client.CtrlCHandler
CtrlCHandler	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    class CtrlCHandler implements SignalHandler{$/;"	c	class:Client
CustomLogMessage	dmlc-core\\include\\dmlc\\logging.h	/^  CustomLogMessage(const char* file, int line) {$/;"	f	class:dmlc::CustomLogMessage
CustomLogMessage	dmlc-core\\include\\dmlc\\logging.h	/^class CustomLogMessage {$/;"	c	namespace:dmlc
CustomLogMessage	nnvm\\include\\dmlc\\logging.h	/^  CustomLogMessage(const char* file, int line) {$/;"	f	class:dmlc::CustomLogMessage
CustomLogMessage	nnvm\\include\\dmlc\\logging.h	/^class CustomLogMessage {$/;"	c	namespace:dmlc
D	lua\\testes\\attrib.lua	/^local function D (x)$/;"	f
DC	lua\\testes\\attrib.lua	/^local function DC (x)$/;"	f
DCHECK	dmlc-core\\include\\dmlc\\logging.h	/^#define DCHECK(/;"	d
DCHECK	nnvm\\include\\dmlc\\logging.h	/^#define DCHECK(/;"	d
DCHECK_EQ	dmlc-core\\include\\dmlc\\logging.h	/^#define DCHECK_EQ(/;"	d
DCHECK_EQ	nnvm\\include\\dmlc\\logging.h	/^#define DCHECK_EQ(/;"	d
DCHECK_GE	dmlc-core\\include\\dmlc\\logging.h	/^#define DCHECK_GE(/;"	d
DCHECK_GE	nnvm\\include\\dmlc\\logging.h	/^#define DCHECK_GE(/;"	d
DCHECK_GT	dmlc-core\\include\\dmlc\\logging.h	/^#define DCHECK_GT(/;"	d
DCHECK_GT	nnvm\\include\\dmlc\\logging.h	/^#define DCHECK_GT(/;"	d
DCHECK_LE	dmlc-core\\include\\dmlc\\logging.h	/^#define DCHECK_LE(/;"	d
DCHECK_LE	nnvm\\include\\dmlc\\logging.h	/^#define DCHECK_LE(/;"	d
DCHECK_LT	dmlc-core\\include\\dmlc\\logging.h	/^#define DCHECK_LT(/;"	d
DCHECK_LT	nnvm\\include\\dmlc\\logging.h	/^#define DCHECK_LT(/;"	d
DCHECK_NE	dmlc-core\\include\\dmlc\\logging.h	/^#define DCHECK_NE(/;"	d
DCHECK_NE	nnvm\\include\\dmlc\\logging.h	/^#define DCHECK_NE(/;"	d
DEC	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEC	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DECLARE	dmlc-core\\include\\dmlc\\parameter.h	/^  inline parameter::FieldEntry<DType>& DECLARE($/;"	f	struct:dmlc::Parameter	typeref:typename:parameter::FieldEntry<DType> &
DECLARE	nnvm\\include\\dmlc\\parameter.h	/^  inline parameter::FieldEntry<DType>& DECLARE($/;"	f	struct:dmlc::Parameter	typeref:typename:parameter::FieldEntry<DType> &
DECLARE_IMAGEX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGEX(/;"	d
DECLARE_IMAGE_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGE_1(/;"	d
DECLARE_IMAGE_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGE_2(/;"	d
DECLARE_IMAGE_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGE_4(/;"	d
DECLARE_IMAGE_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGE_5(/;"	d
DECLARE_IMAGE_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGE_6(/;"	d
DECLARE_IMAGE_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGE_7(/;"	d
DECLARE_IMAGE_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_IMAGE_8(/;"	d
DECLARE_INPUTX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUTX(/;"	d
DECLARE_INPUT_0	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_0(/;"	d
DECLARE_INPUT_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_1(/;"	d
DECLARE_INPUT_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_2(/;"	d
DECLARE_INPUT_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_4(/;"	d
DECLARE_INPUT_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_5(/;"	d
DECLARE_INPUT_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_6(/;"	d
DECLARE_INPUT_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_7(/;"	d
DECLARE_INPUT_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_INPUT_8(/;"	d
DECLARE_OUTPUT_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_OUTPUT_1(/;"	d
DECLARE_OUTPUT_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_OUTPUT_2(/;"	d
DECLARE_OUTPUT_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_OUTPUT_4(/;"	d
DECLARE_OUTPUT_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_OUTPUT_5(/;"	d
DECLARE_OUTPUT_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_OUTPUT_6(/;"	d
DECLARE_OUTPUT_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_OUTPUT_7(/;"	d
DECLARE_OUTPUT_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_OUTPUT_8(/;"	d
DECLARE_SUMX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUMX(/;"	d
DECLARE_SUM_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUM_1(/;"	d
DECLARE_SUM_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUM_2(/;"	d
DECLARE_SUM_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUM_4(/;"	d
DECLARE_SUM_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUM_5(/;"	d
DECLARE_SUM_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUM_6(/;"	d
DECLARE_SUM_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUM_7(/;"	d
DECLARE_SUM_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_SUM_8(/;"	d
DECLARE_WEIGHTS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define DECLARE_WEIGHTS(/;"	d
DEPS_PATH	dmlc-core\\make\\config.mk	/^DEPS_PATH=$/;"	m
DFATAL	dmlc-core\\include\\dmlc\\logging.h	/^#define DFATAL /;"	d
DFATAL	nnvm\\include\\dmlc\\logging.h	/^#define DFATAL /;"	d
DFSVisit	nnvm\\include\\nnvm\\graph.h	/^inline void DFSVisit(const std::vector<NodeEntry>& heads,$/;"	f	namespace:nnvm	typeref:typename:void
DIBS	lua\\ldump.c	/^#define DIBS /;"	d	file:
DIGITBIT	lua\\lctype.h	/^#define DIGITBIT	/;"	d
DISALLOW_COPY_AND_ASSIGN	dmlc-core\\include\\dmlc\\base.h	/^#    define DISALLOW_COPY_AND_ASSIGN(/;"	d
DISALLOW_COPY_AND_ASSIGN	nnvm\\include\\dmlc\\base.h	/^#    define DISALLOW_COPY_AND_ASSIGN(/;"	d
DLL_EXPORT	torch7\\lib\\luaT\\luaT.h	/^# define DLL_EXPORT /;"	d
DLL_EXPORT	torch7\\lib\\luaT\\luaT.h	/^# define DLL_EXPORT$/;"	d
DLL_IMPORT	torch7\\lib\\luaT\\luaT.h	/^# define DLL_IMPORT /;"	d
DLL_IMPORT	torch7\\lib\\luaT\\luaT.h	/^# define DLL_IMPORT$/;"	d
DLMSG	lua\\loadlib.c	/^#define DLMSG	/;"	d	file:
DLOG	dmlc-core\\include\\dmlc\\logging.h	/^#define DLOG(/;"	d
DLOG	nnvm\\include\\dmlc\\logging.h	/^#define DLOG(/;"	d
DLOG_IF	dmlc-core\\include\\dmlc\\logging.h	/^#define DLOG_IF(/;"	d
DLOG_IF	nnvm\\include\\dmlc\\logging.h	/^#define DLOG_IF(/;"	d
DMLC Tracker	dmlc-core\\tracker\\README.md	/^DMLC Tracker$/;"	c
DMLC YARN AppMaster	dmlc-core\\tracker\\yarn\\README.md	/^DMLC YARN AppMaster$/;"	c
DMLC-Core Documentation	dmlc-core\\doc\\index.md	/^DMLC-Core Documentation$/;"	c
DMLC_ANY_H_	dmlc-core\\include\\dmlc\\any.h	/^#define DMLC_ANY_H_$/;"	d
DMLC_ANY_H_	nnvm\\include\\dmlc\\any.h	/^#define DMLC_ANY_H_$/;"	d
DMLC_ARRAY_VIEW_H_	dmlc-core\\include\\dmlc\\array_view.h	/^#define DMLC_ARRAY_VIEW_H_$/;"	d
DMLC_ARRAY_VIEW_H_	nnvm\\include\\dmlc\\array_view.h	/^#define DMLC_ARRAY_VIEW_H_$/;"	d
DMLC_ATTRIBUTE_UNUSED	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_ATTRIBUTE_UNUSED /;"	d
DMLC_ATTRIBUTE_UNUSED	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_ATTRIBUTE_UNUSED$/;"	d
DMLC_ATTRIBUTE_UNUSED	nnvm\\include\\dmlc\\base.h	/^#define DMLC_ATTRIBUTE_UNUSED /;"	d
DMLC_ATTRIBUTE_UNUSED	nnvm\\include\\dmlc\\base.h	/^#define DMLC_ATTRIBUTE_UNUSED$/;"	d
DMLC_BASE_H_	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_BASE_H_$/;"	d
DMLC_BASE_H_	nnvm\\include\\dmlc\\base.h	/^#define DMLC_BASE_H_$/;"	d
DMLC_COMMON_H_	dmlc-core\\include\\dmlc\\common.h	/^#define DMLC_COMMON_H_$/;"	d
DMLC_CONCURRENCY_H_	dmlc-core\\include\\dmlc\\concurrency.h	/^#define DMLC_CONCURRENCY_H_$/;"	d
DMLC_CONFIG_H_	dmlc-core\\include\\dmlc\\config.h	/^#define DMLC_CONFIG_H_$/;"	d
DMLC_DATA_BASIC_ROW_ITER_H_	dmlc-core\\src\\data\\basic_row_iter.h	/^#define DMLC_DATA_BASIC_ROW_ITER_H_$/;"	d
DMLC_DATA_CSV_PARSER_H_	dmlc-core\\src\\data\\csv_parser.h	/^#define DMLC_DATA_CSV_PARSER_H_$/;"	d
DMLC_DATA_DISK_ROW_ITER_H_	dmlc-core\\src\\data\\disk_row_iter.h	/^#define DMLC_DATA_DISK_ROW_ITER_H_$/;"	d
DMLC_DATA_H_	dmlc-core\\include\\dmlc\\data.h	/^#define DMLC_DATA_H_$/;"	d
DMLC_DATA_LIBSVM_PARSER_H_	dmlc-core\\src\\data\\libsvm_parser.h	/^#define DMLC_DATA_LIBSVM_PARSER_H_$/;"	d
DMLC_DATA_PARSER_H_	dmlc-core\\src\\data\\parser.h	/^#define DMLC_DATA_PARSER_H_$/;"	d
DMLC_DATA_ROW_BLOCK_H_	dmlc-core\\src\\data\\row_block.h	/^#define DMLC_DATA_ROW_BLOCK_H_$/;"	d
DMLC_DATA_STRTONUM_H_	dmlc-core\\src\\data\\strtonum.h	/^#define DMLC_DATA_STRTONUM_H_$/;"	d
DMLC_DATA_TEXT_PARSER_H_	dmlc-core\\src\\data\\text_parser.h	/^#define DMLC_DATA_TEXT_PARSER_H_$/;"	d
DMLC_DECLARE_ALIAS	dmlc-core\\include\\dmlc\\parameter.h	/^#define DMLC_DECLARE_ALIAS(/;"	d
DMLC_DECLARE_ALIAS	nnvm\\include\\dmlc\\parameter.h	/^#define DMLC_DECLARE_ALIAS(/;"	d
DMLC_DECLARE_FIELD	dmlc-core\\include\\dmlc\\parameter.h	/^#define DMLC_DECLARE_FIELD(/;"	d
DMLC_DECLARE_FIELD	nnvm\\include\\dmlc\\parameter.h	/^#define DMLC_DECLARE_FIELD(/;"	d
DMLC_DECLARE_PARAMETER	dmlc-core\\example\\parameter.cc	/^  DMLC_DECLARE_PARAMETER(MyParam) {$/;"	f	struct:MyParam	file:
DMLC_DECLARE_PARAMETER	dmlc-core\\include\\dmlc\\parameter.h	/^#define DMLC_DECLARE_PARAMETER(/;"	d
DMLC_DECLARE_PARAMETER	dmlc-core\\src\\data\\csv_parser.h	/^  DMLC_DECLARE_PARAMETER(CSVParserParam) {$/;"	f	struct:dmlc::data::CSVParserParam
DMLC_DECLARE_PARAMETER	dmlc-core\\test\\parameter_test.cc	/^  DMLC_DECLARE_PARAMETER(Param) {$/;"	f	struct:Param	file:
DMLC_DECLARE_PARAMETER	dmlc-core\\test\\parameter_test.cc	/^  DMLC_DECLARE_PARAMETER(SecondParam) {$/;"	f	struct:SecondParam	file:
DMLC_DECLARE_PARAMETER	nnvm\\include\\dmlc\\parameter.h	/^#define DMLC_DECLARE_PARAMETER(/;"	d
DMLC_DECLARE_PARAMETER	src\\op_nn.cc	/^  DMLC_DECLARE_PARAMETER(BatchNormalizationParam) {$/;"	f	struct:tinyflow::BatchNormalizationParam	file:
DMLC_DECLARE_PARAMETER	src\\op_nn.cc	/^  DMLC_DECLARE_PARAMETER(ConvPoolParam) {$/;"	f	struct:tinyflow::ConvPoolParam	file:
DMLC_DECLARE_PARAMETER	src\\op_nn.cc	/^  DMLC_DECLARE_PARAMETER(LinearParam) {$/;"	f	struct:tinyflow::LinearParam	file:
DMLC_DECLARE_PARAMETER	src\\op_nn.cc	/^  DMLC_DECLARE_PARAMETER(PadParam) {$/;"	f	struct:tinyflow::PadParam	file:
DMLC_DECLARE_PARAMETER	src\\op_tensor.cc	/^  DMLC_DECLARE_PARAMETER(ReduceParam) {$/;"	f	struct:tinyflow::ReduceParam	file:
DMLC_DECLARE_PARAMETER	src\\op_tensor.cc	/^  DMLC_DECLARE_PARAMETER(ZeroParam) {$/;"	f	struct:tinyflow::ZeroParam	file:
DMLC_DECLARE_TRAITS	dmlc-core\\include\\dmlc\\type_traits.h	/^#define DMLC_DECLARE_TRAITS(/;"	d
DMLC_DECLARE_TRAITS	nnvm\\include\\dmlc\\type_traits.h	/^#define DMLC_DECLARE_TRAITS(/;"	d
DMLC_DECLARE_TYPE_NAME	dmlc-core\\include\\dmlc\\type_traits.h	/^#define DMLC_DECLARE_TYPE_NAME(/;"	d
DMLC_DECLARE_TYPE_NAME	nnvm\\include\\dmlc\\type_traits.h	/^#define DMLC_DECLARE_TYPE_NAME(/;"	d
DMLC_ENABLE_STD_THREAD	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_ENABLE_STD_THREAD /;"	d
DMLC_ENABLE_STD_THREAD	nnvm\\include\\dmlc\\base.h	/^#define DMLC_ENABLE_STD_THREAD /;"	d
DMLC_IO_AZURE_FILESYS_H_	dmlc-core\\src\\io\\azure_filesys.h	/^#define DMLC_IO_AZURE_FILESYS_H_$/;"	d
DMLC_IO_CACHED_INPUT_SPLIT_H_	dmlc-core\\src\\io\\cached_input_split.h	/^#define DMLC_IO_CACHED_INPUT_SPLIT_H_$/;"	d
DMLC_IO_FILESYS_H_	dmlc-core\\src\\io\\filesys.h	/^#define DMLC_IO_FILESYS_H_$/;"	d
DMLC_IO_HDFS_FILESYS_H_	dmlc-core\\src\\io\\hdfs_filesys.h	/^#define DMLC_IO_HDFS_FILESYS_H_$/;"	d
DMLC_IO_H_	dmlc-core\\include\\dmlc\\io.h	/^#define DMLC_IO_H_$/;"	d
DMLC_IO_INPUT_SPLIT_BASE_H_	dmlc-core\\src\\io\\input_split_base.h	/^#define DMLC_IO_INPUT_SPLIT_BASE_H_$/;"	d
DMLC_IO_LINE_SPLIT_H_	dmlc-core\\src\\io\\line_split.h	/^#define DMLC_IO_LINE_SPLIT_H_$/;"	d
DMLC_IO_LOCAL_FILESYS_H_	dmlc-core\\src\\io\\local_filesys.h	/^#define DMLC_IO_LOCAL_FILESYS_H_$/;"	d
DMLC_IO_RECORDIO_SPLIT_H_	dmlc-core\\src\\io\\recordio_split.h	/^#define DMLC_IO_RECORDIO_SPLIT_H_$/;"	d
DMLC_IO_S3_FILESYS_H_	dmlc-core\\src\\io\\s3_filesys.h	/^#define DMLC_IO_S3_FILESYS_H_$/;"	d
DMLC_IO_SINGLE_FILE_SPLIT_H_	dmlc-core\\src\\io\\single_file_split.h	/^#define DMLC_IO_SINGLE_FILE_SPLIT_H_$/;"	d
DMLC_IO_THREADED_INPUT_SPLIT_H_	dmlc-core\\src\\io\\threaded_input_split.h	/^#define DMLC_IO_THREADED_INPUT_SPLIT_H_$/;"	d
DMLC_IO_URI_SPEC_H_	dmlc-core\\src\\io\\uri_spec.h	/^#define DMLC_IO_URI_SPEC_H_$/;"	d
DMLC_JSON_ENABLE_ANY	dmlc-core\\include\\dmlc\\json.h	/^#define DMLC_JSON_ENABLE_ANY(/;"	d
DMLC_JSON_ENABLE_ANY	nnvm\\include\\dmlc\\json.h	/^#define DMLC_JSON_ENABLE_ANY(/;"	d
DMLC_JSON_ENABLE_ANY_VAR_DEF	dmlc-core\\include\\dmlc\\json.h	/^#define DMLC_JSON_ENABLE_ANY_VAR_DEF(/;"	d
DMLC_JSON_ENABLE_ANY_VAR_DEF	nnvm\\include\\dmlc\\json.h	/^#define DMLC_JSON_ENABLE_ANY_VAR_DEF(/;"	d
DMLC_JSON_H_	dmlc-core\\include\\dmlc\\json.h	/^#define DMLC_JSON_H_$/;"	d
DMLC_JSON_H_	nnvm\\include\\dmlc\\json.h	/^#define DMLC_JSON_H_$/;"	d
DMLC_LOGGING_H_	dmlc-core\\include\\dmlc\\logging.h	/^#define DMLC_LOGGING_H_$/;"	d
DMLC_LOGGING_H_	nnvm\\include\\dmlc\\logging.h	/^#define DMLC_LOGGING_H_$/;"	d
DMLC_LOG_BEFORE_THROW	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_LOG_BEFORE_THROW /;"	d
DMLC_LOG_BEFORE_THROW	nnvm\\include\\dmlc\\base.h	/^#define DMLC_LOG_BEFORE_THROW /;"	d
DMLC_LOG_CUSTOMIZE	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_LOG_CUSTOMIZE /;"	d
DMLC_LOG_CUSTOMIZE	nnvm\\include\\dmlc\\base.h	/^#define DMLC_LOG_CUSTOMIZE /;"	d
DMLC_LOG_FATAL_THROW	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_LOG_FATAL_THROW /;"	d
DMLC_LOG_FATAL_THROW	dmlc-core\\test\\unittest\\unittest_logging.cc	/^#define DMLC_LOG_FATAL_THROW /;"	d	file:
DMLC_LOG_FATAL_THROW	nnvm\\include\\dmlc\\base.h	/^#define DMLC_LOG_FATAL_THROW /;"	d
DMLC_LUA_H_	dmlc-core\\include\\dmlc\\lua.h	/^#define DMLC_LUA_H_$/;"	d
DMLC_MEMORY_H_	dmlc-core\\include\\dmlc\\memory.h	/^#define DMLC_MEMORY_H_$/;"	d
DMLC_MEMORY_H_	nnvm\\include\\dmlc\\memory.h	/^#define DMLC_MEMORY_H_$/;"	d
DMLC_MEMORY_IO_H_	dmlc-core\\include\\dmlc\\memory_io.h	/^#define DMLC_MEMORY_IO_H_$/;"	d
DMLC_NO_EXCEPTION	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_NO_EXCEPTION /;"	d
DMLC_NO_EXCEPTION	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_NO_EXCEPTION$/;"	d
DMLC_NO_EXCEPTION	nnvm\\include\\dmlc\\base.h	/^#define DMLC_NO_EXCEPTION /;"	d
DMLC_NO_EXCEPTION	nnvm\\include\\dmlc\\base.h	/^#define DMLC_NO_EXCEPTION$/;"	d
DMLC_OMP_H_	dmlc-core\\include\\dmlc\\omp.h	/^#define DMLC_OMP_H_$/;"	d
DMLC_PARAMETER_H_	dmlc-core\\include\\dmlc\\parameter.h	/^#define DMLC_PARAMETER_H_$/;"	d
DMLC_PARAMETER_H_	nnvm\\include\\dmlc\\parameter.h	/^#define DMLC_PARAMETER_H_$/;"	d
DMLC_RECORDIO_H_	dmlc-core\\include\\dmlc\\recordio.h	/^#define DMLC_RECORDIO_H_$/;"	d
DMLC_REGISTER_DATA_PARSER	dmlc-core\\include\\dmlc\\data.h	/^#define DMLC_REGISTER_DATA_PARSER(/;"	d
DMLC_REGISTER_PARAMETER	dmlc-core\\include\\dmlc\\parameter.h	/^#define DMLC_REGISTER_PARAMETER(/;"	d
DMLC_REGISTER_PARAMETER	nnvm\\include\\dmlc\\parameter.h	/^#define DMLC_REGISTER_PARAMETER(/;"	d
DMLC_REGISTRY_ENABLE	dmlc-core\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_ENABLE(/;"	d
DMLC_REGISTRY_ENABLE	nnvm\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_ENABLE(/;"	d
DMLC_REGISTRY_FILE_TAG	dmlc-core\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_FILE_TAG(/;"	d
DMLC_REGISTRY_FILE_TAG	nnvm\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_FILE_TAG(/;"	d
DMLC_REGISTRY_H_	dmlc-core\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_H_$/;"	d
DMLC_REGISTRY_H_	nnvm\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_H_$/;"	d
DMLC_REGISTRY_LINK_TAG	dmlc-core\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_LINK_TAG(/;"	d
DMLC_REGISTRY_LINK_TAG	nnvm\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_LINK_TAG(/;"	d
DMLC_REGISTRY_REGISTER	dmlc-core\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_REGISTER(/;"	d
DMLC_REGISTRY_REGISTER	nnvm\\include\\dmlc\\registry.h	/^#define DMLC_REGISTRY_REGISTER(/;"	d
DMLC_SERIALIZER_H_	dmlc-core\\include\\dmlc\\serializer.h	/^#define DMLC_SERIALIZER_H_$/;"	d
DMLC_STRICT_CXX11	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_STRICT_CXX11 /;"	d
DMLC_STRICT_CXX11	nnvm\\include\\dmlc\\base.h	/^#define DMLC_STRICT_CXX11 /;"	d
DMLC_STR_CONCAT	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_STR_CONCAT(/;"	d
DMLC_STR_CONCAT	nnvm\\include\\dmlc\\base.h	/^#define DMLC_STR_CONCAT(/;"	d
DMLC_STR_CONCAT_	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_STR_CONCAT_(/;"	d
DMLC_STR_CONCAT_	nnvm\\include\\dmlc\\base.h	/^#define DMLC_STR_CONCAT_(/;"	d
DMLC_THREADEDITER_H_	dmlc-core\\include\\dmlc\\threadediter.h	/^#define DMLC_THREADEDITER_H_$/;"	d
DMLC_THREAD_LOCAL_H_	dmlc-core\\include\\dmlc\\thread_local.h	/^#define DMLC_THREAD_LOCAL_H_$/;"	d
DMLC_THREAD_LOCAL_H_	nnvm\\include\\dmlc\\thread_local.h	/^#define DMLC_THREAD_LOCAL_H_$/;"	d
DMLC_THROW_EXCEPTION	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_THROW_EXCEPTION /;"	d
DMLC_THROW_EXCEPTION	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_THROW_EXCEPTION$/;"	d
DMLC_THROW_EXCEPTION	nnvm\\include\\dmlc\\base.h	/^#define DMLC_THROW_EXCEPTION /;"	d
DMLC_THROW_EXCEPTION	nnvm\\include\\dmlc\\base.h	/^#define DMLC_THROW_EXCEPTION$/;"	d
DMLC_TIMER_H_	dmlc-core\\include\\dmlc\\timer.h	/^#define DMLC_TIMER_H_$/;"	d
DMLC_TIMER_H_	nnvm\\include\\dmlc\\timer.h	/^#define DMLC_TIMER_H_$/;"	d
DMLC_TYPE_TRAITS_H_	dmlc-core\\include\\dmlc\\type_traits.h	/^#define DMLC_TYPE_TRAITS_H_$/;"	d
DMLC_TYPE_TRAITS_H_	nnvm\\include\\dmlc\\type_traits.h	/^#define DMLC_TYPE_TRAITS_H_$/;"	d
DMLC_USE_CXX11	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_USE_CXX11 /;"	d
DMLC_USE_CXX11	nnvm\\include\\dmlc\\base.h	/^#define DMLC_USE_CXX11 /;"	d
DMLC_USE_GLOG	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_USE_GLOG /;"	d
DMLC_USE_GLOG	nnvm\\include\\dmlc\\base.h	/^#define DMLC_USE_GLOG /;"	d
DMLC_USE_HDFS	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_USE_HDFS /;"	d
DMLC_USE_HDFS	nnvm\\include\\dmlc\\base.h	/^#define DMLC_USE_HDFS /;"	d
DMLC_USE_PS	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_USE_PS /;"	d
DMLC_USE_PS	nnvm\\include\\dmlc\\base.h	/^#define DMLC_USE_PS /;"	d
DMLC_USE_REGEX	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_USE_REGEX /;"	d
DMLC_USE_REGEX	nnvm\\include\\dmlc\\base.h	/^#define DMLC_USE_REGEX /;"	d
DMLC_USE_S3	dmlc-core\\include\\dmlc\\base.h	/^#define DMLC_USE_S3 /;"	d
DMLC_USE_S3	nnvm\\include\\dmlc\\base.h	/^#define DMLC_USE_S3 /;"	d
DT	dmlc-core\\include\\dmlc\\any.h	/^  typedef typename std::decay<T>::type DT;$/;"	t	function:dmlc::any::any	typeref:typename:std::decay<T>::type
DT	nnvm\\include\\dmlc\\any.h	/^  typedef typename std::decay<T>::type DT;$/;"	t	function:dmlc::any::any	typeref:typename:std::decay<T>::type
DTYPE_ASSIGN	src\\op_util.h	/^#define DTYPE_ASSIGN(/;"	d
DTypeVector	nnvm\\include\\nnvm\\graph_attr_types.h	/^using DTypeVector = std::vector<int>;$/;"	t	namespace:nnvm	typeref:typename:std::vector<int>
Data	dmlc-core\\include\\dmlc\\any.h	/^  union Data {$/;"	u	class:dmlc::any
Data	nnvm\\include\\dmlc\\any.h	/^  union Data {$/;"	u	class:dmlc::any
DataIter	dmlc-core\\include\\dmlc\\data.h	/^class DataIter {$/;"	c	namespace:dmlc
DataType	include\\tinyflow\\base.h	/^enum DataType {$/;"	g	namespace:tinyflow
DateLogger	dmlc-core\\include\\dmlc\\logging.h	/^  DateLogger() {$/;"	f	class:dmlc::DateLogger
DateLogger	dmlc-core\\include\\dmlc\\logging.h	/^class DateLogger {$/;"	c	namespace:dmlc
DateLogger	nnvm\\include\\dmlc\\logging.h	/^  DateLogger() {$/;"	f	class:dmlc::DateLogger
DateLogger	nnvm\\include\\dmlc\\logging.h	/^class DateLogger {$/;"	c	namespace:dmlc
DecRef	dmlc-core\\include\\dmlc\\memory.h	/^  inline static void DecRef(RefBlock* block) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:void
DecRef	nnvm\\include\\dmlc\\memory.h	/^  inline static void DecRef(RefBlock* block) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:void
DeclFloatAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  DeclFloatAST(ASTPtr var)$/;"	f	class:nnvm::fusion::DeclFloatAST
DeclFloatAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class DeclFloatAST : public AST {$/;"	c	namespace:nnvm::fusion
Declare the Parameter	dmlc-core\\doc\\parameter.md	/^### Declare the Parameter$/;"	S
DeclareField	dmlc-core\\include\\dmlc\\json.h	/^  inline void DeclareField(const std::string &key, T *addr) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
DeclareField	nnvm\\include\\dmlc\\json.h	/^  inline void DeclareField(const std::string &key, T *addr) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
DeclareFieldInternal	dmlc-core\\include\\dmlc\\json.h	/^DeclareFieldInternal(const std::string &key, T *addr, bool optional) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
DeclareFieldInternal	nnvm\\include\\dmlc\\json.h	/^DeclareFieldInternal(const std::string &key, T *addr, bool optional) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
DeclareOptionalField	dmlc-core\\include\\dmlc\\json.h	/^  inline void DeclareOptionalField(const std::string &key, T *addr) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
DeclareOptionalField	nnvm\\include\\dmlc\\json.h	/^  inline void DeclareOptionalField(const std::string &key, T *addr) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
DecodeFlag	dmlc-core\\include\\dmlc\\recordio.h	/^  inline static uint32_t DecodeFlag(uint32_t rec) {$/;"	f	class:dmlc::RecordIOWriter	typeref:typename:uint32_t
DecodeLength	dmlc-core\\include\\dmlc\\recordio.h	/^  inline static uint32_t DecodeLength(uint32_t rec) {$/;"	f	class:dmlc::RecordIOWriter	typeref:typename:uint32_t
Deep Learning System Course	README.md	/^## Deep Learning System Course$/;"	s
DefaultAggregateGradient	nnvm\\src\\pass\\gradient.cc	/^NodeEntry DefaultAggregateGradient(std::vector<NodeEntry>&& v) {$/;"	f	namespace:nnvm::pass::__anona60d04f90110	typeref:typename:NodeEntry
DefaultVarName	nnvm\\src\\core\\symbolic.cc	/^inline std::string DefaultVarName(const std::string &op_name,$/;"	f	namespace:nnvm	typeref:typename:std::string
Dependencies	README.md	/^## Dependencies$/;"	s
Destroy	dmlc-core\\include\\dmlc\\threadediter.h	/^inline void ThreadedIter<DType>::Destroy(void) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:void
Development Status	torch7\\README.md	/^## Development Status$/;"	s
DeviceAssignMap	nnvm\\include\\nnvm\\graph_attr_types.h	/^using DeviceAssignMap = std::unordered_map<std::string, int>;$/;"	t	namespace:nnvm	typeref:typename:std::unordered_map<std::string,int>
DeviceMask	include\\tinyflow\\base.h	/^enum DeviceMask {$/;"	g	namespace:tinyflow
DeviceVector	nnvm\\include\\nnvm\\graph_attr_types.h	/^using DeviceVector = std::vector<int>;$/;"	t	namespace:nnvm	typeref:typename:std::vector<int>
DiskFile	torch7\\doc\\diskfile.md	/^# DiskFile #$/;"	c
DiskRowIter	dmlc-core\\src\\data\\disk_row_iter.h	/^  explicit DiskRowIter(Parser<IndexType> *parser,$/;"	f	class:dmlc::data::DiskRowIter
DiskRowIter	dmlc-core\\src\\data\\disk_row_iter.h	/^class DiskRowIter: public RowBlockIter<IndexType> {$/;"	c	namespace:dmlc::data
Distributed Machine Learning Common Codebase	dmlc-core\\README.md	/^Distributed Machine Learning Common Codebase$/;"	c
Dividing a tensor into a table of tensors	torch7\\doc\\tensor.md	/^## Dividing a tensor into a table of tensors ##$/;"	s
Division and Modulo (remainder)	torch7\\doc\\maths.md	/^### Division and Modulo (remainder) ###$/;"	S
DllMain	src\\c_api.cc	/^int DllMain() {$/;"	f	typeref:typename:int
Documentation + Accessibility	torch7\\ROADMAP.md	/^## Documentation + Accessibility$/;"	s
DumpBlock	lua\\ldump.c	/^static void DumpBlock (const void *b, size_t size, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpByte	lua\\ldump.c	/^static void DumpByte (int y, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpCode	lua\\ldump.c	/^static void DumpCode (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpConstants	lua\\ldump.c	/^static void DumpConstants (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpDebug	lua\\ldump.c	/^static void DumpDebug (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpFunction	lua\\ldump.c	/^static void DumpFunction (const Proto *f, TString *psource, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpHeader	lua\\ldump.c	/^static void DumpHeader (DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpInt	lua\\ldump.c	/^static void DumpInt (int x, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpInteger	lua\\ldump.c	/^static void DumpInteger (lua_Integer x, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpLiteral	lua\\ldump.c	/^#define DumpLiteral(/;"	d	file:
DumpNumber	lua\\ldump.c	/^static void DumpNumber (lua_Number x, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpProtos	lua\\ldump.c	/^static void DumpProtos (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpSize	lua\\ldump.c	/^static void DumpSize (size_t x, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpState	lua\\ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon7d8240f60108	file:
DumpString	lua\\ldump.c	/^static void DumpString (const TString *s, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpUpvalues	lua\\ldump.c	/^static void DumpUpvalues (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpVar	lua\\ldump.c	/^#define DumpVar(/;"	d	file:
DumpVector	lua\\ldump.c	/^#define DumpVector(/;"	d	file:
Dyndata	lua\\lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	lua\\lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
ECPUFeature	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^enum ECPUFeature$/;"	g	file:
EOFMARK	lua\\lua.c	/^#define EOFMARK	/;"	d	file:
EOZ	lua\\lzio.h	/^#define EOZ	/;"	d
EQ	lua\\ltests.c	/^#define EQ(/;"	d	file:
ERRFUNC	lua\\loadlib.c	/^#define ERRFUNC	/;"	d	file:
ERRLIB	lua\\loadlib.c	/^#define ERRLIB	/;"	d	file:
ERRORSTACKSIZE	lua\\ldo.c	/^#define ERRORSTACKSIZE	/;"	d	file:
EXACT_EXPONENTIAL	torch7\\lib\\TH\\THLogAdd.c	/^#define EXACT_EXPONENTIAL /;"	d	file:
EXTRA_STACK	lua\\lstate.h	/^#define EXTRA_STACK /;"	d
EatChar	dmlc-core\\src\\config.cc	/^  void EatChar() {$/;"	f	class:dmlc::Tokenizer	typeref:typename:void	file:
Eigenvalues, SVD, Linear System Solution	torch7\\doc\\maths.md	/^## Eigenvalues, SVD, Linear System Solution ##$/;"	s
ElemType	dmlc-core\\include\\dmlc\\json.h	/^    typedef typename ContainerType::mapped_type ElemType;$/;"	t	function:dmlc::json::MapHandler::Read	typeref:typename:ContainerType::mapped_type
ElemType	dmlc-core\\include\\dmlc\\json.h	/^    typedef typename ContainerType::value_type ElemType;$/;"	t	function:dmlc::json::ArrayHandler::Read	typeref:typename:ContainerType::value_type
ElemType	dmlc-core\\include\\dmlc\\json.h	/^    typedef typename ContainerType::value_type ElemType;$/;"	t	function:dmlc::json::ArrayHandler::Write	typeref:typename:ContainerType::value_type
ElemType	dmlc-core\\include\\dmlc\\serializer.h	/^    typedef typename ContainerType::value_type ElemType;$/;"	t	function:dmlc::serializer::CollectionHandler::Read	typeref:typename:ContainerType::value_type
ElemType	dmlc-core\\include\\dmlc\\serializer.h	/^    typedef typename ContainerType::value_type ElemType;$/;"	t	function:dmlc::serializer::CollectionHandler::Write	typeref:typename:ContainerType::value_type
ElemType	dmlc-core\\include\\dmlc\\serializer.h	/^    typedef typename ListType::value_type ElemType;$/;"	t	function:dmlc::serializer::ListHandler::Read	typeref:typename:ListType::value_type
ElemType	dmlc-core\\include\\dmlc\\serializer.h	/^    typedef typename ListType::value_type ElemType;$/;"	t	function:dmlc::serializer::ListHandler::Write	typeref:typename:ListType::value_type
ElemType	nnvm\\include\\dmlc\\json.h	/^    typedef typename ContainerType::mapped_type ElemType;$/;"	t	function:dmlc::json::MapHandler::Read	typeref:typename:ContainerType::mapped_type
ElemType	nnvm\\include\\dmlc\\json.h	/^    typedef typename ContainerType::value_type ElemType;$/;"	t	function:dmlc::json::ArrayHandler::Read	typeref:typename:ContainerType::value_type
ElemType	nnvm\\include\\dmlc\\json.h	/^    typedef typename ContainerType::value_type ElemType;$/;"	t	function:dmlc::json::ArrayHandler::Write	typeref:typename:ContainerType::value_type
Element-wise Mathematical Operations	torch7\\doc\\maths.md	/^## Element-wise Mathematical Operations ##$/;"	s
EmptyAttr	src\\op_special.cc	/^inline bool EmptyAttr(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
Enable Fusion in TinyFlow	README.md	/^## Enable Fusion in TinyFlow$/;"	s
EnableType	dmlc-core\\include\\dmlc\\json.h	/^  inline AnyJSONManager& EnableType(const std::string& type_name) {  \/\/ NOLINT(*)$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:AnyJSONManager &
EnableType	nnvm\\include\\dmlc\\json.h	/^  inline AnyJSONManager& EnableType(const std::string& type_name) {  \/\/ NOLINT(*)$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:AnyJSONManager &
EncodeLRec	dmlc-core\\include\\dmlc\\recordio.h	/^  inline static uint32_t EncodeLRec(uint32_t cflag, uint32_t length) {$/;"	f	class:dmlc::RecordIOWriter	typeref:typename:uint32_t
EndArray	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::EndArray() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
EndArray	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::EndArray() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
EndObject	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::EndObject() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
EndObject	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::EndObject() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
Entry	dmlc-core\\include\\dmlc\\concurrency.h	/^  struct Entry {$/;"	s	class:dmlc::ConcurrentBlockingQueue
Entry	dmlc-core\\include\\dmlc\\json.h	/^  struct Entry {$/;"	s	class:dmlc::JSONObjectReadHelper
Entry	dmlc-core\\include\\dmlc\\json.h	/^  struct Entry {$/;"	s	class:dmlc::json::AnyJSONManager
Entry	nnvm\\include\\dmlc\\json.h	/^  struct Entry {$/;"	s	class:dmlc::JSONObjectReadHelper
Entry	nnvm\\include\\dmlc\\json.h	/^  struct Entry {$/;"	s	class:dmlc::json::AnyJSONManager
Entry	nnvm\\src\\pass\\saveload_json.cc	/^  struct Entry {$/;"	s	struct:nnvm::pass::__anonc309bbd30110::JSONNode	file:
EntryType	dmlc-core\\include\\dmlc\\parameter.h	/^  typedef TEntry EntryType;$/;"	t	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry
EntryType	nnvm\\include\\dmlc\\parameter.h	/^  typedef TEntry EntryType;$/;"	t	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry
Error	dmlc-core\\include\\dmlc\\logging.h	/^  explicit Error(const std::string &s) : std::runtime_error(s) {}$/;"	f	struct:dmlc::Error
Error	dmlc-core\\include\\dmlc\\logging.h	/^struct Error : public std::runtime_error {$/;"	s	namespace:dmlc
Error	nnvm\\include\\dmlc\\logging.h	/^  explicit Error(const std::string &s) : std::runtime_error(s) {}$/;"	f	struct:dmlc::Error
Error	nnvm\\include\\dmlc\\logging.h	/^struct Error : public std::runtime_error {$/;"	s	namespace:dmlc
ErrorEntry	nnvm\\src\\c_api\\c_api_error.cc	/^struct ErrorEntry {$/;"	s	file:
Eval	dmlc-core\\include\\dmlc\\lua.h	/^  inline LuaRef Eval(const std::string& lua_code) {$/;"	f	class:dmlc::LuaState	typeref:typename:LuaRef
Eval	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef LuaState::Eval(const char* lua_code) {$/;"	f	class:dmlc::LuaState	typeref:typename:LuaRef
ExSocket	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^class ExSocket(object):$/;"	c
Example	nnvm\\README.md	/^## Example$/;"	s
Example Use Case	cwrap\\doc\\example.md	/^## Example Use Case$/;"	s
ExecEntry	src\\session.cc	/^  struct ExecEntry {$/;"	s	class:tinyflow::TorchSession	file:
Executing the Graph	nnvm\\docs\\overview.md	/^## Executing the Graph$/;"	s
Expanding/Replicating/Squeezing Tensors	torch7\\doc\\tensor.md	/^## Expanding\/Replicating\/Squeezing Tensors ##$/;"	s
ExtractNextChunk	dmlc-core\\src\\io\\input_split_base.cc	/^bool InputSplitBase::ExtractNextChunk(Blob *out_chunk, Chunk *chunk) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:bool
ExtractNextRecord	dmlc-core\\src\\io\\line_split.cc	/^bool LineSplitter::ExtractNextRecord(Blob *out_rec, Chunk *chunk) {$/;"	f	class:dmlc::io::LineSplitter	typeref:typename:bool
ExtractNextRecord	dmlc-core\\src\\io\\recordio_split.cc	/^bool RecordIOSplitter::ExtractNextRecord(Blob *out_rec, Chunk *chunk) {$/;"	f	class:dmlc::io::RecordIOSplitter	typeref:typename:bool
Extracting sub-tensors	torch7\\doc\\tensor.md	/^## Extracting sub-tensors ##$/;"	s
F	lua\\testes\\all.lua	/^local function F (m)$/;"	f
F	lua\\testes\\api.lua	/^F = function (x)$/;"	f
F	lua\\testes\\calls.lua	/^F = function (f)$/;"	f
F	lua\\testes\\constructs.lua	/^function F(a)$/;"	f
FCodeGen	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^using FCodeGen = std::function<std::vector<ASTPtr>($/;"	t	namespace:nnvm::fusion
FGradient	nnvm\\include\\nnvm\\op_attr_types.h	/^using FGradient = std::function<std::vector<NodeEntry>($/;"	t	namespace:nnvm
FIGS	lua\\lmathlib.c	/^#define FIGS	/;"	d	file:
FINALIZEDBIT	lua\\lgc.h	/^#define FINALIZEDBIT	/;"	d
FIRST_RESERVED	lua\\llex.h	/^#define FIRST_RESERVED	/;"	d
FIgnoreInputs	nnvm\\include\\nnvm\\op_attr_types.h	/^using FIgnoreInputs = std::function<$/;"	t	namespace:nnvm
FInferNodeEntryAttr	nnvm\\include\\nnvm\\op_attr_types.h	/^using FInferNodeEntryAttr = std::function<bool (const NodeAttrs& attrs,$/;"	t	namespace:nnvm
FInferShape	nnvm\\include\\nnvm\\op_attr_types.h	/^using FInferShape = FInferNodeEntryAttr<TShape>;$/;"	t	namespace:nnvm	typeref:typename:FInferNodeEntryAttr<TShape>
FInferType	nnvm\\include\\nnvm\\op_attr_types.h	/^using FInferType = FInferNodeEntryAttr<int>;$/;"	t	namespace:nnvm	typeref:typename:FInferNodeEntryAttr<int>
FInplaceOption	nnvm\\include\\nnvm\\op_attr_types.h	/^using FInplaceOption = std::function<$/;"	t	namespace:nnvm
FLAGS	lua\\lstrlib.c	/^#define FLAGS	/;"	d	file:
FListInputNames	nnvm\\include\\nnvm\\op_attr_types.h	/^using FListInputNames = std::function<std::vector<std::string> (const NodeAttrs& attrs)>;$/;"	t	namespace:nnvm
FListOutputNames	nnvm\\include\\nnvm\\op_attr_types.h	/^using FListOutputNames = std::function<std::vector<std::string> (const NodeAttrs& attrs)>;$/;"	t	namespace:nnvm
FLuaCompute	include\\tinyflow\\base.h	/^using FLuaCompute = std::string;$/;"	t	namespace:tinyflow	typeref:typename:std::string
FLuaCreateNNModule	include\\tinyflow\\base.h	/^using FLuaCreateNNModule = std::string;$/;"	t	namespace:tinyflow	typeref:typename:std::string
FMutateInputs	nnvm\\include\\nnvm\\op_attr_types.h	/^using FMutateInputs = std::function<std::vector<uint32_t> (const NodeAttrs& attrs)>;$/;"	t	namespace:nnvm
FNumVisibleOutputs	nnvm\\include\\nnvm\\op_attr_types.h	/^using FNumVisibleOutputs = std::function<uint32_t (const NodeAttrs& attrs)>;$/;"	t	namespace:nnvm
FOpExec	src\\session.cc	/^using FOpExec = std::function<void()>;$/;"	t	namespace:tinyflow	file:
FUNCTION_IMPL	torch7\\lib\\TH\\generic\\simd\\simd.h	/^#define FUNCTION_IMPL(/;"	d
Factory	dmlc-core\\include\\dmlc\\data.h	/^  typedef Parser<IndexType>* (*Factory)$/;"	t	class:dmlc::Parser	typeref:typename:Parser<IndexType> * (*)(const std::string & path,const std::map<std::string,std::string> & args,unsigned part_index,unsigned num_parts)
Feature requests	torch7\\CONTRIBUTING.md	/^## Feature requests$/;"	s
FieldAccessEntry	dmlc-core\\include\\dmlc\\parameter.h	/^  FieldAccessEntry()$/;"	f	class:dmlc::parameter::FieldAccessEntry
FieldAccessEntry	dmlc-core\\include\\dmlc\\parameter.h	/^class FieldAccessEntry {$/;"	c	namespace:dmlc::parameter
FieldAccessEntry	nnvm\\include\\dmlc\\parameter.h	/^  FieldAccessEntry()$/;"	f	class:dmlc::parameter::FieldAccessEntry
FieldAccessEntry	nnvm\\include\\dmlc\\parameter.h	/^class FieldAccessEntry {$/;"	c	namespace:dmlc::parameter
FieldEntry	dmlc-core\\include\\dmlc\\parameter.h	/^  FieldEntry<int>() : is_enum_(false) {}$/;"	f	class:dmlc::parameter::FieldEntry
FieldEntry	dmlc-core\\include\\dmlc\\parameter.h	/^class FieldEntry :$/;"	c	namespace:dmlc::parameter
FieldEntry	dmlc-core\\include\\dmlc\\parameter.h	/^class FieldEntry<bool>$/;"	c	namespace:dmlc::parameter
FieldEntry	dmlc-core\\include\\dmlc\\parameter.h	/^class FieldEntry<int>$/;"	c	namespace:dmlc::parameter
FieldEntry	dmlc-core\\include\\dmlc\\parameter.h	/^class FieldEntry<std::string>$/;"	c	namespace:dmlc::parameter
FieldEntry	nnvm\\include\\dmlc\\parameter.h	/^  FieldEntry<int>() : is_enum_(false) {}$/;"	f	class:dmlc::parameter::FieldEntry
FieldEntry	nnvm\\include\\dmlc\\parameter.h	/^class FieldEntry :$/;"	c	namespace:dmlc::parameter
FieldEntry	nnvm\\include\\dmlc\\parameter.h	/^class FieldEntry<bool>$/;"	c	namespace:dmlc::parameter
FieldEntry	nnvm\\include\\dmlc\\parameter.h	/^class FieldEntry<int>$/;"	c	namespace:dmlc::parameter
FieldEntry	nnvm\\include\\dmlc\\parameter.h	/^class FieldEntry<std::string>$/;"	c	namespace:dmlc::parameter
FieldEntryBase	dmlc-core\\include\\dmlc\\parameter.h	/^class FieldEntryBase : public FieldAccessEntry {$/;"	c	namespace:dmlc::parameter
FieldEntryBase	nnvm\\include\\dmlc\\parameter.h	/^class FieldEntryBase : public FieldAccessEntry {$/;"	c	namespace:dmlc::parameter
FieldEntryNumeric	dmlc-core\\include\\dmlc\\parameter.h	/^  FieldEntryNumeric()$/;"	f	class:dmlc::parameter::FieldEntryNumeric
FieldEntryNumeric	dmlc-core\\include\\dmlc\\parameter.h	/^class FieldEntryNumeric$/;"	c	namespace:dmlc::parameter
FieldEntryNumeric	nnvm\\include\\dmlc\\parameter.h	/^  FieldEntryNumeric()$/;"	f	class:dmlc::parameter::FieldEntryNumeric
FieldEntryNumeric	nnvm\\include\\dmlc\\parameter.h	/^class FieldEntryNumeric$/;"	c	namespace:dmlc::parameter
File	torch7\\doc\\file.md	/^# File #$/;"	c
File state query	torch7\\doc\\file.md	/^## File state query ##$/;"	s
File:isReferenced	torch7\\File.lua	/^function File:isReferenced()$/;"	f
File:isWritableObject	torch7\\File.lua	/^function File:isWritableObject(object)$/;"	f
File:readBool	torch7\\File.lua	/^function File:readBool()$/;"	f
File:readObject	torch7\\File.lua	/^function File:readObject()$/;"	f
File:referenced	torch7\\File.lua	/^function File:referenced(ref)$/;"	f
File:writeBool	torch7\\File.lua	/^function File:writeBool(value)$/;"	f
File:writeObject	torch7\\File.lua	/^function File:writeObject(object, debugname, hook)$/;"	f
FileInfo	dmlc-core\\src\\io\\filesys.h	/^  FileInfo() : size(0), type(kFile) {}$/;"	f	struct:dmlc::io::FileInfo
FileInfo	dmlc-core\\src\\io\\filesys.h	/^struct FileInfo {$/;"	s	namespace:dmlc::io
FileStream	dmlc-core\\src\\io\\local_filesys.cc	/^  explicit FileStream(FILE *fp, bool use_stdio)$/;"	f	class:dmlc::io::FileStream	file:
FileStream	dmlc-core\\src\\io\\local_filesys.cc	/^class FileStream : public SeekStream {$/;"	c	namespace:dmlc::io	file:
FileSystem	dmlc-core\\src\\io\\filesys.h	/^class FileSystem {$/;"	c	namespace:dmlc::io
FileType	dmlc-core\\src\\io\\filesys.h	/^enum FileType {$/;"	g	namespace:dmlc::io
FillBuffer	dmlc-core\\src\\io\\s3_filesys.cc	/^int CURLReadStreamBase::FillBuffer(size_t nwant) {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:int
FillData	dmlc-core\\src\\data\\text_parser.h	/^FillData(std::vector<RowBlockContainer<IndexType> > *data) {$/;"	f	class:dmlc::data::TextParserBase	typeref:typename:bool
Find	dmlc-core\\include\\dmlc\\parameter.h	/^  inline FieldAccessEntry *Find(const std::string &key) const {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:FieldAccessEntry *
Find	dmlc-core\\include\\dmlc\\registry.h	/^  inline static const EntryType *Find(const std::string &name) {$/;"	f	class:dmlc::Registry	typeref:typename:const EntryType *
Find	nnvm\\include\\dmlc\\parameter.h	/^  inline FieldAccessEntry *Find(const std::string &key) const {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:FieldAccessEntry *
Find	nnvm\\include\\dmlc\\registry.h	/^  inline static const EntryType *Find(const std::string &name) {$/;"	f	class:dmlc::Registry	typeref:typename:const EntryType *
FindBestPath	nnvm\\src\\pass\\graph_algorithm.h	/^inline uint32_t FindBestPath($/;"	f	namespace:nnvm::pass	typeref:typename:uint32_t
FindHttpError	dmlc-core\\src\\io\\s3_filesys.cc	/^inline bool FindHttpError(const std::string &header) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:bool
FindLastRecordBegin	dmlc-core\\src\\io\\line_split.cc	/^const char* LineSplitter::FindLastRecordBegin(const char *begin,$/;"	f	class:dmlc::io::LineSplitter	typeref:typename:const char *
FindLastRecordBegin	dmlc-core\\src\\io\\recordio_split.cc	/^const char* RecordIOSplitter::FindLastRecordBegin(const char *begin,$/;"	f	class:dmlc::io::RecordIOSplitter	typeref:typename:const char *
FindLastRecordBegin	dmlc-core\\src\\io\\single_file_split.h	/^  inline const char* FindLastRecordBegin(const char *begin,$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:const char *
FindNextIndex	dmlc-core\\src\\config.cc	/^void Config::ConfigIterator::FindNextIndex() {$/;"	f	class:dmlc::Config::ConfigIterator	typeref:typename:void
FindNextRecord	dmlc-core\\src\\io\\single_file_split.h	/^  inline char* FindNextRecord(char *begin, char *end) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:char *
FindNextRecordIOHead	dmlc-core\\src\\recordio.cc	/^inline char *FindNextRecordIOHead(char *begin, char *end) {$/;"	f	namespace:dmlc	typeref:typename:char *
FindPassDep	nnvm\\src\\core\\pass.cc	/^const PassFunctionReg* FindPassDep(const std::string&attr_name) {$/;"	f	namespace:nnvm	typeref:typename:const PassFunctionReg *
Finish	dmlc-core\\src\\io\\s3_filesys.cc	/^void WriteStream::Finish(void) {$/;"	f	class:dmlc::io::s3::WriteStream	typeref:typename:void
FlatTo2D	nnvm\\include\\nnvm\\tuple.h	/^  inline mshadow::Shape<2> FlatTo2D(void) const {$/;"	f	class:nnvm::TShape	typeref:typename:mshadow::Shape<2>
FlatTo3D	nnvm\\include\\nnvm\\tuple.h	/^  inline mshadow::Shape<3> FlatTo3D(index_t axis) const {$/;"	f	class:nnvm::TShape	typeref:typename:mshadow::Shape<3>
FlatTo3D	nnvm\\include\\nnvm\\tuple.h	/^  inline mshadow::Shape<3> FlatTo3D(index_t axis_begin, index_t axis_end) const {$/;"	f	class:nnvm::TShape	typeref:typename:mshadow::Shape<3>
FloatAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  FloatAST(float val)$/;"	f	class:nnvm::fusion::FloatAST
FloatAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class FloatAST : public AST {$/;"	c	namespace:nnvm::fusion
Ftypes	lua\\lstrlib.c	/^typedef union Ftypes {$/;"	u	file:
Ftypes	lua\\lstrlib.c	/^} Ftypes;$/;"	t	typeref:union:Ftypes	file:
FuncState	lua\\lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	lua\\lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
FunctionDescription	torch7\\lib\\TH\\generic\\simd\\simd.h	/^typedef struct FunctionDescription$/;"	s
FunctionDescription	torch7\\lib\\TH\\generic\\simd\\simd.h	/^} FunctionDescription;$/;"	t	typeref:struct:FunctionDescription
FunctionRegEntryBase	dmlc-core\\include\\dmlc\\registry.h	/^class FunctionRegEntryBase {$/;"	c	namespace:dmlc
FunctionRegEntryBase	nnvm\\include\\dmlc\\registry.h	/^class FunctionRegEntryBase {$/;"	c	namespace:dmlc
Fusion	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^Graph Fusion(Graph&& src) {$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:Graph
FusionShape	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^inline bool FusionShape(const NodeAttrs& attrs,$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:bool
G	lua\\lstate.h	/^#define G(/;"	d
GC	lua\\testes\\gc.lua	/^local function GC()  GC1(); GC2() end$/;"	f
GC1	lua\\testes\\gc.lua	/^local function GC1 ()$/;"	f
GC2	lua\\testes\\gc.lua	/^local function GC2 ()$/;"	f
GCFINALIZECOST	lua\\lgc.c	/^#define GCFINALIZECOST	/;"	d	file:
GCFINMAX	lua\\lgc.c	/^#define GCFINMAX	/;"	d	file:
GCObject	lua\\lobject.h	/^typedef struct GCObject {$/;"	s
GCObject	lua\\lobject.h	/^} GCObject;$/;"	t	typeref:struct:GCObject
GCSWEEPMAX	lua\\lgc.c	/^#define GCSWEEPMAX	/;"	d	file:
GCSatomic	lua\\lgc.h	/^#define GCSatomic	/;"	d
GCScallfin	lua\\lgc.h	/^#define GCScallfin	/;"	d
GCSenteratomic	lua\\lgc.h	/^#define GCSenteratomic	/;"	d
GCSpause	lua\\lgc.h	/^#define GCSpause	/;"	d
GCSpropagate	lua\\lgc.h	/^#define GCSpropagate	/;"	d
GCSswpallgc	lua\\lgc.h	/^#define GCSswpallgc	/;"	d
GCSswpend	lua\\lgc.h	/^#define GCSswpend	/;"	d
GCSswpfinobj	lua\\lgc.h	/^#define GCSswpfinobj	/;"	d
GCSswptobefnz	lua\\lgc.h	/^#define GCSswptobefnz	/;"	d
GCTM	lua\\lgc.c	/^static void GCTM (lua_State *L) {$/;"	f	typeref:typename:void	file:
GCUnion	lua\\lstate.h	/^union GCUnion {$/;"	u
GCdebt	lua\\lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State	typeref:typename:l_mem
GCestimate	lua\\lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State	typeref:typename:lu_mem
GETARG_A	lua\\lopcodes.h	/^#define GETARG_A(/;"	d
GETARG_Ax	lua\\lopcodes.h	/^#define GETARG_Ax(/;"	d
GETARG_B	lua\\lopcodes.h	/^#define GETARG_B(/;"	d
GETARG_Bx	lua\\lopcodes.h	/^#define GETARG_Bx(/;"	d
GETARG_C	lua\\lopcodes.h	/^#define GETARG_C(/;"	d
GETARG_k	lua\\lopcodes.h	/^#define GETARG_k(/;"	d
GETARG_sB	lua\\lopcodes.h	/^#define GETARG_sB(/;"	d
GETARG_sBx	lua\\lopcodes.h	/^#define GETARG_sBx(/;"	d
GETARG_sC	lua\\lopcodes.h	/^#define GETARG_sC(/;"	d
GETARG_sJ	lua\\lopcodes.h	/^#define GETARG_sJ(/;"	d
GET_OPCODE	lua\\lopcodes.h	/^#define GET_OPCODE(/;"	d
GMatchState	lua\\lstrlib.c	/^typedef struct GMatchState {$/;"	s	file:
GMatchState	lua\\lstrlib.c	/^} GMatchState;$/;"	t	typeref:struct:GMatchState	file:
GNode	nnvm\\include\\nnvm\\graph.h	/^  typedef const NodePtr* GNode;$/;"	t	function:nnvm::DFSVisit	typeref:typename:const NodePtr *
GTEST_INC	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^GTEST_INC=$(GTEST_PATH)\/include\/$/;"	m
GTEST_INC	nnvm\\tests\\cpp\\unittest.mk	/^GTEST_INC=$(GTEST_PATH)\/include\/$/;"	m
GTEST_LIB	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^GTEST_LIB=$(GTEST_PATH)\/lib\/$/;"	m
GTEST_LIB	nnvm\\tests\\cpp\\unittest.mk	/^GTEST_LIB=$(GTEST_PATH)\/lib\/$/;"	m
GTEST_PATH	dmlc-core\\make\\config.mk	/^GTEST_PATH=$/;"	m
G_NEW	lua\\lgc.h	/^#define G_NEW	/;"	d
G_OLD	lua\\lgc.h	/^#define G_OLD	/;"	d
G_OLD0	lua\\lgc.h	/^#define G_OLD0	/;"	d
G_OLD1	lua\\lgc.h	/^#define G_OLD1	/;"	d
G_SURVIVAL	lua\\lgc.h	/^#define G_SURVIVAL	/;"	d
G_TOUCHED1	lua\\lgc.h	/^#define G_TOUCHED1	/;"	d
G_TOUCHED2	lua\\lgc.h	/^#define G_TOUCHED2	/;"	d
GenASTPtr	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^ASTPtr GenASTPtr(const InternalNodePtr internal, ASTPtrIter begin, ASTPtrIter end) {$/;"	f	namespace:nnvm::fusion::__anon0d7734b40110	typeref:typename:ASTPtr
General Access and Control Methods	torch7\\doc\\file.md	/^## General Access and Control Methods ##$/;"	s
Generate Human Readable Docstrings	dmlc-core\\doc\\parameter.md	/^### Generate Human Readable Docstrings$/;"	S
GenerateRTCClosure	src\\session.cc	/^FOpExec TorchExecutor::GenerateRTCClosure(RTC& rtc,$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:FOpExec
Generator handling	torch7\\doc\\random.md	/^## Generator handling ##$/;"	s
Get	dmlc-core\\include\\dmlc\\lua.h	/^  static inline ContainerType Get(lua_State* L, int index, LuaState* s) {$/;"	f	struct:dmlc::lua_stack::MapHandler	typeref:typename:ContainerType
Get	dmlc-core\\include\\dmlc\\lua.h	/^  static inline LuaRef Get(lua_State* L, int index, LuaState* s) {$/;"	f	struct:dmlc::lua_stack::Handler	typeref:typename:LuaRef
Get	dmlc-core\\include\\dmlc\\lua.h	/^  static inline T Get(lua_State* L, int index, LuaState* s) {$/;"	f	struct:dmlc::lua_stack::NumberHandler	typeref:typename:T
Get	dmlc-core\\include\\dmlc\\lua.h	/^  static inline std::string Get(lua_State* L, int index, LuaState* s) {$/;"	f	struct:dmlc::lua_stack::Handler	typeref:typename:std::string
Get	dmlc-core\\include\\dmlc\\lua.h	/^inline T LuaRef::Get() const {$/;"	f	class:dmlc::LuaRef	typeref:typename:T
Get	dmlc-core\\include\\dmlc\\parameter.h	/^  inline DType &Get(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:DType &
Get	dmlc-core\\include\\dmlc\\thread_local.h	/^  static T* Get() {$/;"	f	class:dmlc::ThreadLocalStore	typeref:typename:T *
Get	nnvm\\include\\dmlc\\parameter.h	/^  inline DType &Get(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:DType &
Get	nnvm\\include\\dmlc\\thread_local.h	/^  static T* Get() {$/;"	f	class:dmlc::ThreadLocalStore	typeref:typename:T *
Get	nnvm\\src\\core\\op.cc	/^const Op* Op::Get(const std::string& name) {$/;"	f	class:nnvm::Op	typeref:typename:const Op *
Get	src\\torch\\torch_util.h	/^  static inline nnvm::TShape Get(lua_State* L, int index, LuaState* s) {$/;"	f	struct:dmlc::lua_stack::Handler	typeref:typename:nnvm::TShape
GetAttr	nnvm\\include\\nnvm\\graph.h	/^inline const T& Graph::GetAttr(const std::string& attr_name) const {$/;"	f	class:nnvm::Graph	typeref:typename:const T &
GetAttr	nnvm\\include\\nnvm\\op.h	/^inline const OpMap<ValueType>& Op::GetAttr(const std::string& key) {$/;"	f	class:nnvm::Op	typeref:typename:const OpMap<ValueType> &
GetAttr	nnvm\\src\\core\\symbolic.cc	/^bool Symbol::GetAttr(const std::string& key, std::string* out) const {$/;"	f	class:nnvm::Symbol	typeref:typename:bool
GetAttrMap	nnvm\\src\\core\\op.cc	/^const any* Op::GetAttrMap(const std::string& key) {$/;"	f	class:nnvm::Op	typeref:typename:const any *
GetBlock	dmlc-core\\src\\data\\row_block.h	/^RowBlockContainer<IndexType>::GetBlock(void) const {$/;"	f	class:dmlc::data::RowBlockContainer	typeref:typename:RowBlock<IndexType>
GetDateString	dmlc-core\\src\\io\\s3_filesys.cc	/^inline std::string GetDateString(void) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:std::string
GetDict	dmlc-core\\include\\dmlc\\parameter.h	/^  inline std::vector<std::pair<std::string, std::string> > GetDict(void * head) const {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:std::vector<std::pair<std::string,std::string>>
GetDict	nnvm\\include\\dmlc\\parameter.h	/^  inline std::vector<std::pair<std::string, std::string> > GetDict(void * head) const {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:std::vector<std::pair<std::string,std::string>>
GetEnv	dmlc-core\\include\\dmlc\\parameter.h	/^inline ValueType GetEnv(const char *key,$/;"	f	namespace:dmlc	typeref:typename:ValueType
GetEnv	nnvm\\include\\dmlc\\parameter.h	/^inline ValueType GetEnv(const char *key,$/;"	f	namespace:dmlc	typeref:typename:ValueType
GetFieldInfo	dmlc-core\\include\\dmlc\\parameter.h	/^  inline std::vector<ParamFieldInfo> GetFieldInfo() const {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:std::vector<ParamFieldInfo>
GetFieldInfo	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual ParamFieldInfo GetFieldInfo() const {$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:ParamFieldInfo
GetFieldInfo	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual ParamFieldInfo GetFieldInfo() const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:ParamFieldInfo
GetFieldInfo	nnvm\\include\\dmlc\\parameter.h	/^  inline std::vector<ParamFieldInfo> GetFieldInfo() const {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:std::vector<ParamFieldInfo>
GetFieldInfo	nnvm\\include\\dmlc\\parameter.h	/^  virtual ParamFieldInfo GetFieldInfo() const {$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:ParamFieldInfo
GetFieldInfo	nnvm\\include\\dmlc\\parameter.h	/^  virtual ParamFieldInfo GetFieldInfo() const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:ParamFieldInfo
GetFusionNode	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^NodePtr GetFusionNode(Graph& g, NodePtr node,$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:NodePtr
GetInstance	dmlc-core\\src\\io.cc	/^FileSystem *FileSystem::GetInstance(const URI &path) {$/;"	f	class:dmlc::io::FileSystem	typeref:typename:FileSystem *
GetInstance	dmlc-core\\src\\io\\azure_filesys.h	/^  inline static AzureFileSystem *GetInstance(void) {$/;"	f	class:dmlc::io::AzureFileSystem	typeref:typename:AzureFileSystem *
GetInstance	dmlc-core\\src\\io\\hdfs_filesys.h	/^  inline static HDFSFileSystem *GetInstance(const std::string &namenode = "default") {$/;"	f	class:dmlc::io::HDFSFileSystem	typeref:typename:HDFSFileSystem *
GetInstance	dmlc-core\\src\\io\\local_filesys.h	/^  inline static LocalFileSystem *GetInstance(void) {$/;"	f	class:dmlc::io::LocalFileSystem	typeref:typename:LocalFileSystem *
GetInstance	dmlc-core\\src\\io\\s3_filesys.h	/^  inline static S3FileSystem *GetInstance(void) {$/;"	f	class:dmlc::io::S3FileSystem	typeref:typename:S3FileSystem *
GetInternals	nnvm\\src\\core\\symbolic.cc	/^Symbol Symbol::GetInternals() const {$/;"	f	class:nnvm::Symbol	typeref:typename:Symbol
GetKeys	nnvm\\src\\core\\symbolic.cc	/^inline std::vector<std::string> GetKeys($/;"	f	namespace:nnvm	typeref:typename:std::vector<std::string>
GetNext	dmlc-core\\src\\io\\s3_filesys.cc	/^  inline bool GetNext(const char *key,$/;"	f	struct:dmlc::io::s3::XMLIter	typeref:typename:bool	file:
GetNextToken	dmlc-core\\src\\config.cc	/^  bool GetNextToken(Token* tok) {$/;"	f	class:dmlc::Tokenizer	typeref:typename:bool	file:
GetParam	dmlc-core\\src\\config.cc	/^const string& Config::GetParam(const string& key) const {$/;"	f	class:dmlc::Config	typeref:typename:const string &
GetPathInfo	dmlc-core\\src\\io\\azure_filesys.h	/^  virtual FileInfo GetPathInfo(const URI &path) { return FileInfo(); }$/;"	f	class:dmlc::io::AzureFileSystem	typeref:typename:FileInfo
GetPathInfo	dmlc-core\\src\\io\\hdfs_filesys.cc	/^FileInfo HDFSFileSystem::GetPathInfo(const URI &path) {$/;"	f	class:dmlc::io::HDFSFileSystem	typeref:typename:FileInfo
GetPathInfo	dmlc-core\\src\\io\\local_filesys.cc	/^FileInfo LocalFileSystem::GetPathInfo(const URI &path) {$/;"	f	class:dmlc::io::LocalFileSystem	typeref:typename:FileInfo
GetPathInfo	dmlc-core\\src\\io\\s3_filesys.cc	/^FileInfo S3FileSystem::GetPathInfo(const URI &path) {$/;"	f	class:dmlc::io::S3FileSystem	typeref:typename:FileInfo
GetStringValue	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual std::string GetStringValue(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:std::string
GetStringValue	nnvm\\include\\dmlc\\parameter.h	/^  virtual std::string GetStringValue(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:std::string
GetTBlob	src\\torch\\torch_util.h	/^  TBlob GetTBlob(LuaRef tensor) {$/;"	f	class:tinyflow::TorchState	typeref:typename:TBlob
GetTime	dmlc-core\\include\\dmlc\\timer.h	/^inline double GetTime(void) {$/;"	f	namespace:dmlc	typeref:typename:double
GetTime	nnvm\\include\\dmlc\\timer.h	/^inline double GetTime(void) {$/;"	f	namespace:dmlc	typeref:typename:double
GetUDataPtr	dmlc-core\\include\\dmlc\\lua.h	/^inline T* LuaRef::GetUDataPtr() const {$/;"	f	class:dmlc::LuaRef	typeref:typename:T *
GetVariableNum	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^uint32_t GetVariableNum(const InternalNodePtr internal) {$/;"	f	namespace:nnvm::fusion::__anon0d7734b40110	typeref:typename:uint32_t
Global	dmlc-core\\include\\dmlc\\json.h	/^  inline static AnyJSONManager* Global() {$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:AnyJSONManager *
Global	nnvm\\include\\dmlc\\json.h	/^  inline static AnyJSONManager* Global() {$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:AnyJSONManager *
Global	nnvm\\src\\core\\op.cc	/^  static OpManager* Global() {$/;"	f	struct:nnvm::OpManager	typeref:typename:OpManager *	file:
GradEntry	nnvm\\src\\pass\\gradient.cc	/^struct GradEntry {$/;"	s	namespace:nnvm::pass::__anona60d04f90110	file:
Gradient	nnvm\\include\\nnvm\\pass_functions.h	/^inline Graph Gradient($/;"	f	namespace:nnvm::pass	typeref:typename:Graph
Gradient	nnvm\\src\\pass\\gradient.cc	/^Graph Gradient(Graph src) {$/;"	f	namespace:nnvm::pass::__anona60d04f90110	typeref:typename:Graph
GradientDescentOptimizer	python\\tinyflow\\train.py	/^class GradientDescentOptimizer(object):$/;"	c
Graph	nnvm\\include\\nnvm\\graph.h	/^class Graph {$/;"	c	namespace:nnvm
Graph	nnvm\\python\\nnvm\\graph.py	/^class Graph(object):$/;"	c
Graph and Pass	nnvm\\docs\\overview.md	/^## Graph and Pass$/;"	s
GraphAllocator	nnvm\\src\\pass\\plan_memory.cc	/^  explicit GraphAllocator(const IndexedGraph* idx) : idx_(idx) {$/;"	f	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	file:
GraphAllocator	nnvm\\src\\pass\\plan_memory.cc	/^class GraphAllocator {$/;"	c	namespace:nnvm::pass::__anon235b49ae0110	file:
GraphHandle	nnvm\\include\\nnvm\\c_api.h	/^typedef void *GraphHandle;$/;"	t	typeref:typename:void *
GraphHandle	nnvm\\python\\nnvm\\_base.py	/^GraphHandle = ctypes.c_void_p$/;"	v
Group	nnvm\\python\\nnvm\\symbol.py	/^def Group(symbols):$/;"	f
HADOOP_HDFS_HOME	dmlc-core\\make\\dmlc.mk	/^	HADOOP_HDFS_HOME=$(HADOOP_HOME)$/;"	m
HDFSFileSystem	dmlc-core\\src\\io\\hdfs_filesys.cc	/^HDFSFileSystem::HDFSFileSystem(const std::string &namenode): namenode_(namenode) {$/;"	f	class:dmlc::io::HDFSFileSystem
HDFSFileSystem	dmlc-core\\src\\io\\hdfs_filesys.h	/^class HDFSFileSystem : public FileSystem {$/;"	c	namespace:dmlc::io
HDFSStream	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  HDFSStream(hdfsFS fs,$/;"	f	class:dmlc::io::HDFSStream	file:
HDFSStream	dmlc-core\\src\\io\\hdfs_filesys.cc	/^class HDFSStream : public SeekStream {$/;"	c	namespace:dmlc::io	file:
HDFS_INC_PATH	dmlc-core\\make\\dmlc.mk	/^		HDFS_INC_PATH=$(HADOOP_HDFS_HOME)\/include$/;"	m
HDFS_LIB_PATH	dmlc-core\\make\\dmlc.mk	/^		HDFS_LIB_PATH=$(HADOOP_HDFS_HOME)\/lib\/native$/;"	m
HEX	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
HEX	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HOOKKEY	lua\\ldblib.c	/^static const int HOOKKEY = 0;$/;"	v	typeref:typename:const int	file:
Handler	dmlc-core\\include\\dmlc\\json.h	/^struct Handler {$/;"	s	namespace:dmlc::json
Handler	dmlc-core\\include\\dmlc\\json.h	/^struct Handler<any> {$/;"	s	namespace:dmlc::json
Handler	dmlc-core\\include\\dmlc\\json.h	/^struct Handler<std::string> {$/;"	s	namespace:dmlc::json
Handler	dmlc-core\\include\\dmlc\\lua.h	/^struct Handler$/;"	s	namespace:dmlc::lua_stack
Handler	dmlc-core\\include\\dmlc\\lua.h	/^struct Handler<LuaRef> {$/;"	s	namespace:dmlc::lua_stack
Handler	dmlc-core\\include\\dmlc\\lua.h	/^struct Handler<std::nullptr_t> {$/;"	s	namespace:dmlc::lua_stack
Handler	dmlc-core\\include\\dmlc\\lua.h	/^struct Handler<std::string> {$/;"	s	namespace:dmlc::lua_stack
Handler	dmlc-core\\include\\dmlc\\serializer.h	/^struct Handler {$/;"	s	namespace:dmlc::serializer
Handler	nnvm\\include\\dmlc\\json.h	/^struct Handler {$/;"	s	namespace:dmlc::json
Handler	nnvm\\include\\dmlc\\json.h	/^struct Handler<any> {$/;"	s	namespace:dmlc::json
Handler	nnvm\\include\\dmlc\\json.h	/^struct Handler<std::string> {$/;"	s	namespace:dmlc::json
Handler	src\\torch\\torch_util.h	/^struct Handler<nnvm::TShape> {$/;"	s	namespace:dmlc::lua_stack
Handling multiple variants of arguments	cwrap\\doc\\highlevelinterface.md	/^#### Handling multiple variants of arguments ####$/;"	t
Header	lua\\lstrlib.c	/^typedef struct Header {$/;"	s	file:
Header	lua\\lstrlib.c	/^} Header;$/;"	t	typeref:struct:Header	file:
Header	lua\\ltests.c	/^typedef union Header {$/;"	u	file:
Header	lua\\ltests.c	/^} Header;$/;"	t	typeref:union:Header	file:
High Level Interface	cwrap\\doc\\highlevelinterface.md	/^## High Level Interface ##$/;"	s
HintChunkSize	dmlc-core\\include\\dmlc\\io.h	/^  virtual void HintChunkSize(size_t chunk_size) {}$/;"	f	class:dmlc::InputSplit	typeref:typename:void
HintChunkSize	dmlc-core\\src\\io\\cached_input_split.h	/^  virtual void HintChunkSize(size_t chunk_size) {$/;"	f	class:dmlc::io::CachedInputSplit	typeref:typename:void
HintChunkSize	dmlc-core\\src\\io\\input_split_base.h	/^  virtual void HintChunkSize(size_t chunk_size) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:void
HintChunkSize	dmlc-core\\src\\io\\single_file_split.h	/^  virtual void HintChunkSize(size_t chunk_size) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:void
HintChunkSize	dmlc-core\\src\\io\\threaded_input_split.h	/^  virtual void HintChunkSize(size_t chunk_size) {$/;"	f	class:dmlc::io::ThreadedInputSplit	typeref:typename:void
How does it work	dmlc-core\\doc\\parameter.md	/^How does it work$/;"	s
How it works	nnvm\\plugin\\nnvm-fusion\\README.md	/^## How it works$/;"	s
HttpReadStream	dmlc-core\\src\\io\\s3_filesys.cc	/^  explicit HttpReadStream(const URI &path)$/;"	f	class:dmlc::io::s3::HttpReadStream	file:
HttpReadStream	dmlc-core\\src\\io\\s3_filesys.cc	/^class HttpReadStream : public CURLReadStreamBase {$/;"	c	namespace:dmlc::io::s3	file:
HumanDate	dmlc-core\\include\\dmlc\\logging.h	/^  const char* HumanDate() {$/;"	f	class:dmlc::DateLogger	typeref:typename:const char *
HumanDate	nnvm\\include\\dmlc\\logging.h	/^  const char* HumanDate() {$/;"	f	class:dmlc::DateLogger	typeref:typename:const char *
I18NSPHINXOPTS	dmlc-core\\doc\\Makefile	/^I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
I2UInt	lua\\lmathlib.c	/^#define I2UInt(/;"	d	file:
I2UInt	lua\\lmathlib.c	/^static lua_Unsigned I2UInt (Rand64 x) {$/;"	f	typeref:typename:lua_Unsigned	file:
I2d	lua\\lmathlib.c	/^static lua_Number I2d (Rand64 x) {$/;"	f	typeref:typename:lua_Number	file:
IDX	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define IDX(/;"	d	file:
ID_VOID_MAIN	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IMPLEMENT_THFILE_FLAGS	torch7\\lib\\TH\\THFile.c	/^#define IMPLEMENT_THFILE_FLAGS(/;"	d	file:
IMPLEMENT_THFILE_FLAGS	torch7\\lib\\TH\\THFile.c	/^IMPLEMENT_THFILE_FLAGS(isReadable)$/;"	f	typeref:typename:isQuiet
IMPLEMENT_THFILE_RW	torch7\\lib\\TH\\THFile.c	/^#define IMPLEMENT_THFILE_RW(/;"	d	file:
IMPLEMENT_THFILE_RW	torch7\\lib\\TH\\THFile.c	/^IMPLEMENT_THFILE_RW(Byte, unsigned char)$/;"	f
IMPLEMENT_THFILE_SCALAR	torch7\\lib\\TH\\THFile.c	/^#define IMPLEMENT_THFILE_SCALAR(/;"	d	file:
IMPLEMENT_THFILE_STORAGE	torch7\\lib\\TH\\THFile.c	/^#define IMPLEMENT_THFILE_STORAGE(/;"	d	file:
IMPLEMENT_THStorage_COPY	torch7\\lib\\TH\\generic\\THStorageCopy.c	/^#define IMPLEMENT_THStorage_COPY(/;"	d	file:
IMPLEMENT_THStorage_COPY_FROM_HALF	torch7\\lib\\TH\\generic\\THStorageCopy.c	/^#define IMPLEMENT_THStorage_COPY_FROM_HALF(/;"	d	file:
IMPLEMENT_THStorage_COPY_TO_FROM_HALF	torch7\\lib\\TH\\generic\\THStorageCopy.c	/^#define IMPLEMENT_THStorage_COPY_TO_FROM_HALF(/;"	d	file:
IMPLEMENT_THStorage_COPY_TO_HALF	torch7\\lib\\TH\\generic\\THStorageCopy.c	/^#define IMPLEMENT_THStorage_COPY_TO_HALF(/;"	d	file:
IMPLEMENT_THTensor_COPY	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^#define IMPLEMENT_THTensor_COPY(/;"	d	file:
IMPLEMENT_THTensor_COPY_FROM_HALF	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^#define IMPLEMENT_THTensor_COPY_FROM_HALF(/;"	d	file:
IMPLEMENT_THTensor_COPY_TO_FROM_HALF	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^#define IMPLEMENT_THTensor_COPY_TO_FROM_HALF(/;"	d	file:
IMPLEMENT_THTensor_COPY_TO_HALF	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^#define IMPLEMENT_THTensor_COPY_TO_HALF(/;"	d	file:
IMPLEMENT_TORCH_FILE_FLAG	torch7\\File.c	/^#define IMPLEMENT_TORCH_FILE_FLAG(/;"	d	file:
IMPLEMENT_TORCH_FILE_FLAG	torch7\\File.c	/^IMPLEMENT_TORCH_FILE_FLAG(isReadable)$/;"	f	typeref:typename:isQuiet	file:
IMPLEMENT_TORCH_FILE_FUNC	torch7\\File.c	/^#define IMPLEMENT_TORCH_FILE_FUNC(/;"	d	file:
IMPLEMENT_TORCH_FILE_FUNC	torch7\\File.c	/^IMPLEMENT_TORCH_FILE_FUNC(seekEnd)$/;"	f	file:
IMPLEMENT_TORCH_FILE_RW	torch7\\File.c	/^#define IMPLEMENT_TORCH_FILE_RW(/;"	d	file:
IMPLEMENT_TORCH_FILE_RW	torch7\\File.c	/^IMPLEMENT_TORCH_FILE_RW(Byte, unsigned char)$/;"	f	typeref:typename:close	file:
INC_INPUTX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUTX(/;"	d
INC_INPUT_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUT_1(/;"	d
INC_INPUT_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUT_2(/;"	d
INC_INPUT_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUT_4(/;"	d
INC_INPUT_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUT_5(/;"	d
INC_INPUT_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUT_6(/;"	d
INC_INPUT_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUT_7(/;"	d
INC_INPUT_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_INPUT_8(/;"	d
INC_OUTPUTX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUTX(/;"	d
INC_OUTPUT_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUT_1(/;"	d
INC_OUTPUT_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUT_2(/;"	d
INC_OUTPUT_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUT_4(/;"	d
INC_OUTPUT_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUT_5(/;"	d
INC_OUTPUT_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUT_6(/;"	d
INC_OUTPUT_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUT_7(/;"	d
INC_OUTPUT_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define INC_OUTPUT_8(/;"	d
INIT_DISPATCH_PTR	torch7\\lib\\TH\\generic\\simd\\simd.h	/^#define INIT_DISPATCH_PTR(/;"	d
IOPREF_LEN	lua\\liolib.c	/^#define IOPREF_LEN	/;"	d	file:
IO_INPUT	lua\\liolib.c	/^#define IO_INPUT	/;"	d	file:
IO_OUTPUT	lua\\liolib.c	/^#define IO_OUTPUT	/;"	d	file:
IO_PREFIX	lua\\liolib.c	/^#define IO_PREFIX	/;"	d	file:
IS_NONZERO	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define IS_NONZERO(/;"	d	file:
Iadd	lua\\lmathlib.c	/^static Rand64 Iadd (Rand64 i1, Rand64 i2) {$/;"	f	typeref:typename:Rand64	file:
IdxT	lua\\ltablib.c	/^typedef unsigned int IdxT;$/;"	t	typeref:typename:unsigned int	file:
IfThenElse	dmlc-core\\include\\dmlc\\serializer.h	/^struct IfThenElse<false, Then, Else, T> {$/;"	s	namespace:dmlc::serializer
IfThenElse	dmlc-core\\include\\dmlc\\serializer.h	/^struct IfThenElse<true, Then, Else, T> {$/;"	s	namespace:dmlc::serializer
IfThenElseType	dmlc-core\\include\\dmlc\\type_traits.h	/^struct IfThenElseType<false, Then, Else> {$/;"	s	namespace:dmlc
IfThenElseType	dmlc-core\\include\\dmlc\\type_traits.h	/^struct IfThenElseType<true, Then, Else> {$/;"	s	namespace:dmlc
IfThenElseType	nnvm\\include\\dmlc\\type_traits.h	/^struct IfThenElseType<false, Then, Else> {$/;"	s	namespace:dmlc
IfThenElseType	nnvm\\include\\dmlc\\type_traits.h	/^struct IfThenElseType<true, Then, Else> {$/;"	s	namespace:dmlc
InBuf	dmlc-core\\include\\dmlc\\io.h	/^    explicit InBuf(size_t buffer_size)$/;"	f	class:dmlc::istream::InBuf
InBuf	dmlc-core\\include\\dmlc\\io.h	/^  class InBuf : public std::streambuf {$/;"	c	class:dmlc::istream
IncRef	dmlc-core\\include\\dmlc\\memory.h	/^  inline static void IncRef(RefBlock* block) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:void
IncRef	nnvm\\include\\dmlc\\memory.h	/^  inline static void IncRef(RefBlock* block) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:void
IndexedGraph	nnvm\\include\\nnvm\\graph.h	/^class IndexedGraph {$/;"	c	namespace:nnvm
IndexedGraph	nnvm\\src\\core\\graph.cc	/^IndexedGraph::IndexedGraph(const Graph &g) {$/;"	f	class:nnvm::IndexedGraph
Indices and tables	dmlc-core\\doc\\index.md	/^Indices and tables$/;"	s
InferAttr	nnvm\\src\\pass\\infer_shape_type.cc	/^Graph InferAttr(Graph &&ret,$/;"	f	namespace:nnvm::pass::__anon305116100110	typeref:typename:Graph
InferShape	nnvm\\include\\nnvm\\pass_functions.h	/^inline Graph InferShape(Graph graph,$/;"	f	namespace:nnvm::pass	typeref:typename:Graph
InferType	nnvm\\include\\nnvm\\pass_functions.h	/^inline Graph InferType(Graph graph,$/;"	f	namespace:nnvm::pass	typeref:typename:Graph
Init	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void Init(const Container &kwargs,$/;"	f	struct:dmlc::Parameter	typeref:typename:void
Init	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void Init(const std::string &key,$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
Init	dmlc-core\\include\\dmlc\\threadediter.h	/^Init(Producer *producer, bool pass_ownership) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:void
Init	dmlc-core\\include\\dmlc\\threadediter.h	/^Init(std::function<bool(DType **)> next,$/;"	f	class:dmlc::ThreadedIter	typeref:typename:void
Init	dmlc-core\\src\\data\\basic_row_iter.h	/^inline void BasicRowIter<IndexType>::Init(Parser<IndexType> *parser) {$/;"	f	class:dmlc::data::BasicRowIter	typeref:typename:void
Init	dmlc-core\\src\\io\\input_split_base.cc	/^void InputSplitBase::Init(FileSystem *filesys,$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:void
Init	dmlc-core\\src\\io\\s3_filesys.cc	/^void CURLReadStreamBase::Init(size_t begin_bytes) {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:void
Init	dmlc-core\\src\\io\\s3_filesys.cc	/^void WriteStream::Init(void) {$/;"	f	class:dmlc::io::s3::WriteStream	typeref:typename:void
Init	nnvm\\include\\dmlc\\parameter.h	/^  inline void Init(const Container &kwargs,$/;"	f	struct:dmlc::Parameter	typeref:typename:void
Init	nnvm\\include\\dmlc\\parameter.h	/^  inline void Init(const std::string &key,$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
Init	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^void RTC::Init() {$/;"	f	class:nnvm::fusion::RTC	typeref:typename:void
Init	nnvm\\src\\pass\\plan_memory.cc	/^  void Init(size_t match_range, uint32_t num_match_color) {$/;"	f	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:void	file:
Init	src\\session.cc	/^void TorchExecutor::Init(nnvm::Symbol symbol,$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:void
InitAllowUnknown	dmlc-core\\include\\dmlc\\parameter.h	/^  InitAllowUnknown(const Container &kwargs) {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::vector<std::pair<std::string,std::string>>
InitAllowUnknown	nnvm\\include\\dmlc\\parameter.h	/^  InitAllowUnknown(const Container &kwargs) {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::vector<std::pair<std::string,std::string>>
InitCachedIter	dmlc-core\\src\\io\\cached_input_split.h	/^inline bool CachedInputSplit::InitCachedIter(void) {$/;"	f	class:dmlc::io::CachedInputSplit	typeref:typename:bool
InitGPU	src\\torch\\torch_util.h	/^  inline void InitGPU() {$/;"	f	class:tinyflow::TorchState	typeref:typename:void
InitInputFileInfo	dmlc-core\\src\\io\\input_split_base.cc	/^void InputSplitBase::InitInputFileInfo(const std::string& uri) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:void
InitLogging	dmlc-core\\include\\dmlc\\logging.h	/^inline void InitLogging(const char* argv0) {$/;"	f	namespace:dmlc	typeref:typename:void
InitLogging	nnvm\\include\\dmlc\\logging.h	/^inline void InitLogging(const char* argv0) {$/;"	f	namespace:dmlc	typeref:typename:void
InitPreprocIter	dmlc-core\\src\\io\\cached_input_split.h	/^inline void CachedInputSplit:: InitPreprocIter(void) {$/;"	f	class:dmlc::io::CachedInputSplit	typeref:typename:void
InitRequest	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual void InitRequest(size_t begin_bytes,$/;"	f	class:dmlc::io::s3::HttpReadStream	typeref:typename:void	file:
InitRequest	dmlc-core\\src\\io\\s3_filesys.cc	/^void ReadStream::InitRequest(size_t begin_bytes,$/;"	f	class:dmlc::io::s3::ReadStream	typeref:typename:void
InplaceIn0Out0	nnvm\\example\\src\\operator.cc	/^inline std::vector<std::pair<int, int> > InplaceIn0Out0(const NodeAttrs& attrs) {$/;"	f	namespace:myproject	typeref:typename:std::vector<std::pair<int,int>>
InplaceIn0Out0	src\\op_util.h	/^inline std::vector<std::pair<int, int> > InplaceIn0Out0(const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	typeref:typename:std::vector<std::pair<int,int>>
InplaceIn1Out0	src\\op_util.h	/^inline std::vector<std::pair<int, int> > InplaceIn1Out0(const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	typeref:typename:std::vector<std::pair<int,int>>
InputSplit	dmlc-core\\include\\dmlc\\io.h	/^class InputSplit {$/;"	c	namespace:dmlc
InputSplitBase	dmlc-core\\src\\io\\input_split_base.h	/^  InputSplitBase()$/;"	f	class:dmlc::io::InputSplitBase
InputSplitBase	dmlc-core\\src\\io\\input_split_base.h	/^class InputSplitBase : public InputSplit {$/;"	c	namespace:dmlc::io
Insert	dmlc-core\\src\\config.cc	/^void Config::Insert(const std::string& key, const std::string& value, bool is_string) {$/;"	f	class:dmlc::Config	typeref:typename:void
Instruction	lua\\llimits.h	/^typedef l_uint32 Instruction;$/;"	t	typeref:typename:l_uint32
Int2I	lua\\lmathlib.c	/^#define Int2I(/;"	d	file:
Int2I	lua\\lmathlib.c	/^static Rand64 Int2I (lua_Unsigned n) {$/;"	f	typeref:typename:Rand64	file:
IntAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  IntAST(int val)$/;"	f	class:nnvm::fusion::IntAST
IntAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class IntAST : public AST {$/;"	c	namespace:nnvm::fusion
IntProducer	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^  IntProducer(int maxcap, int sleep)$/;"	f	struct:producer_test::IntProducer	file:
IntProducer	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^struct IntProducer : public ThreadedIter<int>::Producer {$/;"	s	namespace:producer_test	file:
InternalGraph	nnvm\\plugin\\nnvm-fusion\\src\\internal.h	/^using InternalGraph   = Graph;$/;"	t	namespace:nnvm::fusion	typeref:typename:Graph
InternalNode	nnvm\\plugin\\nnvm-fusion\\src\\internal.h	/^using InternalNode    = Node;$/;"	t	namespace:nnvm::fusion	typeref:typename:Node
InternalNodePtr	nnvm\\plugin\\nnvm-fusion\\src\\internal.h	/^using InternalNodePtr = NodePtr;$/;"	t	namespace:nnvm::fusion	typeref:typename:NodePtr
IsAtomic	nnvm\\src\\core\\symbolic.cc	/^inline bool IsAtomic(const std::vector<NodeEntry>& outputs) {$/;"	f	namespace:nnvm	typeref:typename:bool
IsFusible	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^bool IsFusible(Graph& g, NodePtr n1, NodePtr n2) {$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:bool
IsGenuineString	dmlc-core\\src\\config.cc	/^bool Config::IsGenuineString(const std::string& key) const {$/;"	f	class:dmlc::Config	typeref:typename:bool
IsMutate	nnvm\\src\\pass\\order_mutation.cc	/^inline bool IsMutate(const std::vector<uint32_t>& mutate_inputs, uint32_t i) {$/;"	f	namespace:nnvm::pass::__anonfe8061970110	typeref:typename:bool
Ishl	lua\\lmathlib.c	/^static Rand64 Ishl (Rand64 i, int n) {$/;"	f	typeref:typename:Rand64	file:
Ixor	lua\\lmathlib.c	/^static void Ixor (Rand64 *i1, Rand64 i2) {$/;"	f	typeref:typename:void	file:
JSONGraph	nnvm\\src\\pass\\saveload_json.cc	/^struct JSONGraph {$/;"	s	namespace:nnvm::pass::__anonc309bbd30110	file:
JSONNode	nnvm\\src\\pass\\saveload_json.cc	/^struct JSONNode {$/;"	s	namespace:nnvm::pass::__anonc309bbd30110	file:
JSONObjectReadHelper	dmlc-core\\include\\dmlc\\json.h	/^class JSONObjectReadHelper {$/;"	c	namespace:dmlc
JSONObjectReadHelper	nnvm\\include\\dmlc\\json.h	/^class JSONObjectReadHelper {$/;"	c	namespace:dmlc
JSONReader	dmlc-core\\include\\dmlc\\json.h	/^  explicit JSONReader(std::istream *is)$/;"	f	class:dmlc::JSONReader
JSONReader	dmlc-core\\include\\dmlc\\json.h	/^class JSONReader {$/;"	c	namespace:dmlc
JSONReader	nnvm\\include\\dmlc\\json.h	/^  explicit JSONReader(std::istream *is)$/;"	f	class:dmlc::JSONReader
JSONReader	nnvm\\include\\dmlc\\json.h	/^class JSONReader {$/;"	c	namespace:dmlc
JSONString	nnvm\\include\\nnvm\\graph_attr_types.h	/^using JSONString = std::string;$/;"	t	namespace:nnvm	typeref:typename:std::string
JSONWriter	dmlc-core\\include\\dmlc\\json.h	/^  explicit JSONWriter(std::ostream *os)$/;"	f	class:dmlc::JSONWriter
JSONWriter	dmlc-core\\include\\dmlc\\json.h	/^class JSONWriter {$/;"	c	namespace:dmlc
JSONWriter	nnvm\\include\\dmlc\\json.h	/^  explicit JSONWriter(std::ostream *os)$/;"	f	class:dmlc::JSONWriter
JSONWriter	nnvm\\include\\dmlc\\json.h	/^class JSONWriter {$/;"	c	namespace:dmlc
K	dmlc-core\\include\\dmlc\\lua.h	/^  using K = typename ContainerType::key_type;$/;"	t	struct:dmlc::lua_stack::MapHandler	typeref:typename:ContainerType::key_type
KB	lua\\lvm.c	/^#define KB(/;"	d	file:
KC	lua\\lvm.c	/^#define KC(/;"	d	file:
KEY	bin\\CMakeFiles\\CheckTypeSize\\SIZE_OF_VOIDP.c	/^# define KEY /;"	d	file:
KGC_GEN	lua\\lstate.h	/^#define KGC_GEN	/;"	d
KGC_INC	lua\\lstate.h	/^#define KGC_INC	/;"	d
KOption	lua\\lstrlib.c	/^typedef enum KOption {$/;"	g	file:
KOption	lua\\lstrlib.c	/^} KOption;$/;"	t	typeref:enum:KOption	file:
Kchar	lua\\lstrlib.c	/^  Kchar,	\/* fixed-length strings *\/$/;"	e	enum:KOption	file:
Kernel	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^using Kernel        = std::pair<std::string, std::string>;$/;"	t	namespace:nnvm::fusion	typeref:typename:std::pair<std::string,std::string>
KernelCodeGen	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^Kernel KernelCodeGen(const std::string& kernel_name, InternalGraph internal_graph) {$/;"	f	namespace:nnvm::fusion::__anon0d7734b40110	typeref:typename:Kernel
KernelMap	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^using KernelMap     = std::unordered_map<uint32_t, Kernel>;$/;"	t	namespace:nnvm::fusion	typeref:typename:std::unordered_map<uint32_t,Kernel>
KeywordArgumentMismatch	nnvm\\src\\core\\symbolic.cc	/^inline void KeywordArgumentMismatch(const char *source,$/;"	f	namespace:nnvm	typeref:typename:void
Kfloat	lua\\lstrlib.c	/^  Kfloat,	\/* floating-point numbers *\/$/;"	e	enum:KOption	file:
Kint	lua\\lstrlib.c	/^  Kint,		\/* signed integers *\/$/;"	e	enum:KOption	file:
Knop	lua\\lstrlib.c	/^  Knop		\/* no-op (configuration or spaces) *\/$/;"	e	enum:KOption	file:
Kpaddalign	lua\\lstrlib.c	/^  Kpaddalign,	\/* padding for alignment *\/$/;"	e	enum:KOption	file:
Kpadding	lua\\lstrlib.c	/^  Kpadding,	\/* padding *\/$/;"	e	enum:KOption	file:
Kstring	lua\\lstrlib.c	/^  Kstring,	\/* strings with prefixed length *\/$/;"	e	enum:KOption	file:
Kuint	lua\\lstrlib.c	/^  Kuint,	\/* unsigned integers *\/$/;"	e	enum:KOption	file:
Kzstr	lua\\lstrlib.c	/^  Kzstr,	\/* zero-terminated strings *\/$/;"	e	enum:KOption	file:
L	dmlc-core\\include\\dmlc\\lua.h	/^  lua_State* L;$/;"	m	struct:dmlc::LuaState::StackReset	typeref:typename:lua_State *
L	dmlc-core\\include\\dmlc\\lua.h	/^  lua_State* L;$/;"	m	struct:dmlc::lua_stack::PushArg	typeref:typename:lua_State *
L	lua\\lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer	typeref:typename:lua_State *
L	lua\\ldump.c	/^  lua_State *L;$/;"	m	struct:__anon7d8240f60108	typeref:typename:lua_State *	file:
L	lua\\llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:lua_State *
L	lua\\lobject.c	/^  lua_State *L;$/;"	m	struct:BuffFS	typeref:typename:lua_State *	file:
L	lua\\lstrlib.c	/^  lua_State *L;$/;"	m	struct:Header	typeref:typename:lua_State *	file:
L	lua\\lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	typeref:typename:lua_State *	file:
L	lua\\ltests.c	/^struct Aux { jmp_buf jb; const char *paniccode; lua_State *L; };$/;"	m	struct:Aux	typeref:typename:lua_State *	file:
L	lua\\lundump.c	/^  lua_State *L;$/;"	m	struct:__anon681ca6790108	typeref:typename:lua_State *	file:
L	lua\\lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio	typeref:typename:lua_State *
LAB_IMPLEMENT_BASIC_FUNCTION	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define LAB_IMPLEMENT_BASIC_FUNCTION(/;"	d	file:
LClosure	lua\\lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	lua\\lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LDFLAGS	Makefile	/^export LDFLAGS = -pthread -lm$/;"	m
LDFLAGS	dmlc-core\\Makefile	/^export LDFLAGS= -pthread -lm$/;"	m
LDFLAGS	nnvm\\Makefile	/^export LDFLAGS = -pthread -lm$/;"	m
LEVELS1	lua\\lauxlib.c	/^#define LEVELS1	/;"	d	file:
LEVELS2	lua\\lauxlib.c	/^#define LEVELS2	/;"	d	file:
LEfloatint	lua\\lvm.c	/^static int LEfloatint (lua_Number f, lua_Integer i) {$/;"	f	typeref:typename:int	file:
LEintfloat	lua\\lvm.c	/^static int LEintfloat (lua_Integer i, lua_Number f) {$/;"	f	typeref:typename:int	file:
LEnum	lua\\lvm.c	/^static int LEnum (const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int	file:
LFIELDS_PER_FLUSH	lua\\lopcodes.h	/^#define LFIELDS_PER_FLUSH	/;"	d
LG	dmlc-core\\include\\dmlc\\logging.h	/^#define LG /;"	d
LG	lua\\lstate.c	/^typedef struct LG {$/;"	s	file:
LG	lua\\lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LG	nnvm\\include\\dmlc\\logging.h	/^#define LG /;"	d
LHS_assign	lua\\lparser.c	/^struct LHS_assign {$/;"	s	file:
LIBJVM	dmlc-core\\make\\config.mk	/^LIBJVM=$(JAVA_HOME)\/jre\/lib\/amd64\/server$/;"	m
LIBJVM	dmlc-core\\make\\dmlc.mk	/^	LIBJVM=$(JAVA_HOME)\/jre\/lib\/amd64\/server$/;"	m
LIBS	lua\\makefile	/^LIBS = -lm$/;"	m
LIB_DEP	Makefile	/^LIB_DEP = $(NNVM_PATH)\/lib\/libnnvm.a$/;"	m
LIB_FAIL	lua\\loadlib.c	/^#define LIB_FAIL	/;"	d	file:
LIB_O	lua\\makefile	/^LIB_O=	lbaselib.o ldblib.o liolib.o lmathlib.o loslib.o ltablib.o lstrlib.o \\$/;"	m
LIMLINEDIFF	lua\\lcode.c	/^#define LIMLINEDIFF	/;"	d	file:
LINT_LANG	dmlc-core\\Makefile	/^	LINT_LANG="all"$/;"	m
LL	lua\\llimits.h	/^#define LL(/;"	d
LLONG_MAX	torch7\\lib\\TH\\THDiskFile.c	/^#define LLONG_MAX /;"	d	file:
LMASK	torch7\\lib\\TH\\THRandom.c	/^#define LMASK /;"	d	file:
LOAD_SUMX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUMX(/;"	d
LOAD_SUM_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUM_1(/;"	d
LOAD_SUM_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUM_2(/;"	d
LOAD_SUM_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUM_4(/;"	d
LOAD_SUM_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUM_5(/;"	d
LOAD_SUM_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUM_6(/;"	d
LOAD_SUM_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUM_7(/;"	d
LOAD_SUM_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_SUM_8(/;"	d
LOAD_WEIGHT	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_WEIGHT(/;"	d
LOAD_WEIGHTS	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define LOAD_WEIGHTS(/;"	d
LOG	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG(/;"	d
LOG	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private static final Log LOG = LogFactory.getLog(ApplicationMaster.class);$/;"	f	class:ApplicationMaster	file:
LOG	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private static final Log LOG = LogFactory.getLog(Client.class);$/;"	f	class:Client	file:
LOG	nnvm\\include\\dmlc\\logging.h	/^#define LOG(/;"	d
LOG_DFATAL	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_DFATAL /;"	d
LOG_DFATAL	nnvm\\include\\dmlc\\logging.h	/^#define LOG_DFATAL /;"	d
LOG_ERROR	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_ERROR /;"	d
LOG_ERROR	nnvm\\include\\dmlc\\logging.h	/^#define LOG_ERROR /;"	d
LOG_EVERY_N	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_EVERY_N(/;"	d
LOG_EVERY_N	nnvm\\include\\dmlc\\logging.h	/^#define LOG_EVERY_N(/;"	d
LOG_FATAL	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_FATAL /;"	d
LOG_FATAL	nnvm\\include\\dmlc\\logging.h	/^#define LOG_FATAL /;"	d
LOG_IF	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_IF(/;"	d
LOG_IF	nnvm\\include\\dmlc\\logging.h	/^#define LOG_IF(/;"	d
LOG_INFO	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_INFO /;"	d
LOG_INFO	nnvm\\include\\dmlc\\logging.h	/^#define LOG_INFO /;"	d
LOG_QFATAL	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_QFATAL /;"	d
LOG_QFATAL	nnvm\\include\\dmlc\\logging.h	/^#define LOG_QFATAL /;"	d
LOG_WARNING	dmlc-core\\include\\dmlc\\logging.h	/^#define LOG_WARNING /;"	d
LOG_WARNING	nnvm\\include\\dmlc\\logging.h	/^#define LOG_WARNING /;"	d
LONG_SWAP	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define LONG_SWAP(/;"	d	file:
LStream	lua\\liolib.c	/^typedef luaL_Stream LStream;$/;"	t	typeref:typename:luaL_Stream	file:
LTfloatint	lua\\lvm.c	/^static int LTfloatint (lua_Number f, lua_Integer i) {$/;"	f	typeref:typename:int	file:
LTintfloat	lua\\lvm.c	/^static int LTintfloat (lua_Integer i, lua_Number f) {$/;"	f	typeref:typename:int	file:
LTnum	lua\\lvm.c	/^static int LTnum (const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int	file:
LUAC_DATA	lua\\lundump.h	/^#define LUAC_DATA	/;"	d
LUAC_FORMAT	lua\\lundump.h	/^#define LUAC_FORMAT	/;"	d
LUAC_INT	lua\\lundump.h	/^#define LUAC_INT	/;"	d
LUAC_NUM	lua\\lundump.h	/^#define LUAC_NUM	/;"	d
LUAC_VERSION	lua\\lundump.h	/^#define LUAC_VERSION	/;"	d
LUAI_DDEC	lua\\luaconf.h	/^#define LUAI_DDEC(/;"	d
LUAI_DDEC	lua\\onelua.c	/^#define LUAI_DDEC(/;"	d	file:
LUAI_DDEF	lua\\luaconf.h	/^#define LUAI_DDEF	/;"	d
LUAI_DDEF	lua\\onelua.c	/^#define LUAI_DDEF	/;"	d	file:
LUAI_DEFOPNAMES	lua\\ltests.h	/^#define LUAI_DEFOPNAMES$/;"	d
LUAI_FUNC	lua\\luaconf.h	/^#define LUAI_FUNC	/;"	d
LUAI_FUNC	lua\\onelua.c	/^#define LUAI_FUNC	/;"	d	file:
LUAI_GCMUL	lua\\lgc.h	/^#define LUAI_GCMUL /;"	d
LUAI_GCPAUSE	lua\\lgc.h	/^#define LUAI_GCPAUSE /;"	d
LUAI_GCSTEPSIZE	lua\\lgc.h	/^#define LUAI_GCSTEPSIZE /;"	d
LUAI_GENMAJORMUL	lua\\lgc.h	/^#define LUAI_GENMAJORMUL /;"	d
LUAI_GENMINORMUL	lua\\lgc.h	/^#define LUAI_GENMINORMUL /;"	d
LUAI_HASHLIMIT	lua\\lstring.c	/^#define LUAI_HASHLIMIT	/;"	d	file:
LUAI_IS32INT	lua\\luaconf.h	/^#define LUAI_IS32INT	/;"	d
LUAI_MAXALIGN	lua\\luaconf.h	/^#define LUAI_MAXALIGN /;"	d
LUAI_MAXCSTACK	lua\\ltests.h	/^#define LUAI_MAXCSTACK	/;"	d
LUAI_MAXCSTACK	lua\\luaconf.h	/^#define LUAI_MAXCSTACK	/;"	d
LUAI_MAXSHORTLEN	lua\\llimits.h	/^#define LUAI_MAXSHORTLEN	/;"	d
LUAI_MAXSTACK	lua\\ltests.h	/^#define LUAI_MAXSTACK /;"	d
LUAI_MAXSTACK	lua\\luaconf.h	/^#define LUAI_MAXSTACK	/;"	d
LUAI_THROW	lua\\ldo.c	/^#define LUAI_THROW(/;"	d	file:
LUAI_TRY	lua\\ldo.c	/^#define LUAI_TRY(/;"	d	file:
LUAI_UACINT	lua\\luaconf.h	/^#define LUAI_UACINT	/;"	d
LUAI_UACNUMBER	lua\\luaconf.h	/^#define LUAI_UACNUMBER	/;"	d
LUAI_USER_ALIGNMENT_T	lua\\ltests.h	/^#define LUAI_USER_ALIGNMENT_T /;"	d
LUALIB_API	lua\\luaconf.h	/^#define LUALIB_API	/;"	d
LUAL_BUFFERSIZE	lua\\ltests.h	/^#define LUAL_BUFFERSIZE	/;"	d
LUAL_BUFFERSIZE	lua\\luaconf.h	/^#define LUAL_BUFFERSIZE /;"	d
LUAL_NUMSIZES	lua\\lauxlib.h	/^#define LUAL_NUMSIZES	/;"	d
LUAL_PACKPADBYTE	lua\\lstrlib.c	/^#define LUAL_PACKPADBYTE	/;"	d	file:
LUAMOD_API	lua\\luaconf.h	/^#define LUAMOD_API	/;"	d
LUAT_API	torch7\\lib\\luaT\\luaT.h	/^#  define LUAT_API /;"	d
LUAT_API	torch7\\lib\\luaT\\luaT.h	/^# define LUAT_API /;"	d
LUAT_DEPRECATED	torch7\\lib\\luaT\\luaT.h	/^#define LUAT_DEPRECATED /;"	d
LUAT_DEPRECATED	torch7\\lib\\luaT\\luaT.h	/^#define LUAT_DEPRECATED$/;"	d
LUAT_UTILS_INC	torch7\\lib\\luaT\\luaT.h	/^#define LUAT_UTILS_INC$/;"	d
LUA_API	lua\\luaconf.h	/^#define LUA_API	/;"	d
LUA_API	lua\\luaconf.h	/^#define LUA_API /;"	d
LUA_AUTHORS	lua\\lua.h	/^#define LUA_AUTHORS	/;"	d
LUA_C89_NUMBERS	lua\\luaconf.h	/^#define LUA_C89_NUMBERS$/;"	d
LUA_CALL	dmlc-core\\include\\dmlc\\lua.h	/^#define LUA_CALL(/;"	d
LUA_CDIR	lua\\luaconf.h	/^#define LUA_CDIR	/;"	d
LUA_COLIBNAME	lua\\lualib.h	/^#define LUA_COLIBNAME	/;"	d
LUA_COMPAT_APIINTCASTS	lua\\luaconf.h	/^#define LUA_COMPAT_APIINTCASTS$/;"	d
LUA_COMPAT_LT_LE	lua\\ltests.h	/^#define LUA_COMPAT_LT_LE$/;"	d
LUA_COMPAT_LT_LE	lua\\luaconf.h	/^#define LUA_COMPAT_LT_LE$/;"	d
LUA_COMPAT_MATHLIB	lua\\ltests.h	/^#define LUA_COMPAT_MATHLIB$/;"	d
LUA_COMPAT_MATHLIB	lua\\luaconf.h	/^#define LUA_COMPAT_MATHLIB$/;"	d
LUA_COPYRIGHT	lua\\lua.h	/^#define LUA_COPYRIGHT	/;"	d
LUA_CORE	lua\\lapi.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lcode.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lctype.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\ldebug.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\ldo.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\ldump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lfunc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lgc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\llex.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lmem.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lobject.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lopcodes.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lparser.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lstate.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lstring.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\ltable.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\ltests.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\ltm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lundump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lvm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\lzio.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lua\\onelua.c	/^#define LUA_CORE$/;"	d	file:
LUA_CPATH_DEFAULT	lua\\luaconf.h	/^#define LUA_CPATH_DEFAULT /;"	d
LUA_CPATH_VAR	lua\\loadlib.c	/^#define LUA_CPATH_VAR /;"	d	file:
LUA_CSUBSEP	lua\\loadlib.c	/^#define LUA_CSUBSEP	/;"	d	file:
LUA_DBLIBNAME	lua\\lualib.h	/^#define LUA_DBLIBNAME	/;"	d
LUA_DEBUG	lua\\ltests.h	/^#define LUA_DEBUG$/;"	d
LUA_DIR	lua\\testes\\libs\\makefile	/^LUA_DIR = ..\/..\/$/;"	m
LUA_DIRSEP	lua\\luaconf.h	/^#define LUA_DIRSEP	/;"	d
LUA_DL_DLL	lua\\luaconf.h	/^#define LUA_DL_DLL	/;"	d
LUA_ENV	lua\\llex.h	/^#define LUA_ENV	/;"	d
LUA_ERRERR	lua\\lua.h	/^#define LUA_ERRERR	/;"	d
LUA_ERRFILE	lua\\lauxlib.h	/^#define LUA_ERRFILE /;"	d
LUA_ERRMEM	lua\\lua.h	/^#define LUA_ERRMEM	/;"	d
LUA_ERRRUN	lua\\lua.h	/^#define LUA_ERRRUN	/;"	d
LUA_ERRSYNTAX	lua\\lua.h	/^#define LUA_ERRSYNTAX	/;"	d
LUA_EXEC_DIR	lua\\luaconf.h	/^#define LUA_EXEC_DIR /;"	d
LUA_EXTERNC	torch7\\lib\\luaT\\luaT.h	/^#  define LUA_EXTERNC /;"	d
LUA_EXTRASPACE	lua\\ltests.h	/^#define LUA_EXTRASPACE	/;"	d
LUA_EXTRASPACE	lua\\luaconf.h	/^#define LUA_EXTRASPACE	/;"	d
LUA_FILEHANDLE	lua\\lauxlib.h	/^#define LUA_FILEHANDLE /;"	d
LUA_FLOAT_DOUBLE	lua\\luaconf.h	/^#define LUA_FLOAT_DOUBLE	/;"	d
LUA_FLOAT_FLOAT	lua\\luaconf.h	/^#define LUA_FLOAT_FLOAT	/;"	d
LUA_FLOAT_LONGDOUBLE	lua\\luaconf.h	/^#define LUA_FLOAT_LONGDOUBLE	/;"	d
LUA_FLOAT_TYPE	lua\\luaconf.h	/^#define LUA_FLOAT_TYPE	/;"	d
LUA_FLOORN2I	lua\\lvm.h	/^#define LUA_FLOORN2I	/;"	d
LUA_GCCOLLECT	lua\\lua.h	/^#define LUA_GCCOLLECT	/;"	d
LUA_GCCOUNT	lua\\lua.h	/^#define LUA_GCCOUNT	/;"	d
LUA_GCCOUNTB	lua\\lua.h	/^#define LUA_GCCOUNTB	/;"	d
LUA_GCGEN	lua\\lua.h	/^#define LUA_GCGEN	/;"	d
LUA_GCINC	lua\\lua.h	/^#define LUA_GCINC	/;"	d
LUA_GCISRUNNING	lua\\lua.h	/^#define LUA_GCISRUNNING	/;"	d
LUA_GCRESTART	lua\\lua.h	/^#define LUA_GCRESTART	/;"	d
LUA_GCSETPAUSE	lua\\lua.h	/^#define LUA_GCSETPAUSE	/;"	d
LUA_GCSETSTEPMUL	lua\\lua.h	/^#define LUA_GCSETSTEPMUL	/;"	d
LUA_GCSTEP	lua\\lua.h	/^#define LUA_GCSTEP	/;"	d
LUA_GCSTOP	lua\\lua.h	/^#define LUA_GCSTOP	/;"	d
LUA_GNAME	lua\\lauxlib.h	/^#define	LUA_GNAME	/;"	d
LUA_HOOKCALL	lua\\lua.h	/^#define LUA_HOOKCALL	/;"	d
LUA_HOOKCOUNT	lua\\lua.h	/^#define LUA_HOOKCOUNT	/;"	d
LUA_HOOKLINE	lua\\lua.h	/^#define LUA_HOOKLINE	/;"	d
LUA_HOOKRET	lua\\lua.h	/^#define LUA_HOOKRET	/;"	d
LUA_HOOKTAILCALL	lua\\lua.h	/^#define LUA_HOOKTAILCALL /;"	d
LUA_IDSIZE	lua\\luaconf.h	/^#define LUA_IDSIZE	/;"	d
LUA_IGMARK	lua\\loadlib.c	/^#define LUA_IGMARK	/;"	d	file:
LUA_INITVARVERSION	lua\\lua.c	/^#define LUA_INITVARVERSION	/;"	d	file:
LUA_INIT_VAR	lua\\lua.c	/^#define LUA_INIT_VAR	/;"	d	file:
LUA_INTEGER	lua\\luaconf.h	/^#define LUA_INTEGER	/;"	d
LUA_INTEGER_FMT	lua\\luaconf.h	/^#define LUA_INTEGER_FMT	/;"	d
LUA_INTEGER_FRMLEN	lua\\luaconf.h	/^#define LUA_INTEGER_FRMLEN	/;"	d
LUA_INT_INT	lua\\luaconf.h	/^#define LUA_INT_INT	/;"	d
LUA_INT_LONG	lua\\luaconf.h	/^#define LUA_INT_LONG	/;"	d
LUA_INT_LONGLONG	lua\\luaconf.h	/^#define LUA_INT_LONGLONG	/;"	d
LUA_INT_TYPE	lua\\luaconf.h	/^#define LUA_INT_TYPE	/;"	d
LUA_IOLIBNAME	lua\\lualib.h	/^#define LUA_IOLIBNAME	/;"	d
LUA_KCONTEXT	lua\\luaconf.h	/^#define LUA_KCONTEXT	/;"	d
LUA_LDIR	lua\\luaconf.h	/^#define LUA_LDIR	/;"	d
LUA_LIB	lua\\lauxlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\lbaselib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\lcorolib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\ldblib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\linit.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\liolib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\lmathlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\loadlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\loslib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\lstrlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\ltablib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\lutf8lib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lua\\onelua.c	/^#define LUA_LIB$/;"	d	file:
LUA_LLE_FLAGS	lua\\loadlib.c	/^#define LUA_LLE_FLAGS	/;"	d	file:
LUA_LOADED_TABLE	lua\\lauxlib.h	/^#define LUA_LOADED_TABLE	/;"	d
LUA_LOADLIBNAME	lua\\lualib.h	/^#define LUA_LOADLIBNAME	/;"	d
LUA_LSUBSEP	lua\\loadlib.c	/^#define LUA_LSUBSEP	/;"	d	file:
LUA_MASKCALL	lua\\lua.h	/^#define LUA_MASKCALL	/;"	d
LUA_MASKCOUNT	lua\\lua.h	/^#define LUA_MASKCOUNT	/;"	d
LUA_MASKLINE	lua\\lua.h	/^#define LUA_MASKLINE	/;"	d
LUA_MASKRET	lua\\lua.h	/^#define LUA_MASKRET	/;"	d
LUA_MATHLIBNAME	lua\\lualib.h	/^#define LUA_MATHLIBNAME	/;"	d
LUA_MAXCAPTURES	lua\\lstrlib.c	/^#define LUA_MAXCAPTURES	/;"	d	file:
LUA_MAXINPUT	lua\\lua.c	/^#define LUA_MAXINPUT	/;"	d	file:
LUA_MAXINTEGER	lua\\luaconf.h	/^#define LUA_MAXINTEGER	/;"	d
LUA_MAXUNSIGNED	lua\\luaconf.h	/^#define LUA_MAXUNSIGNED	/;"	d
LUA_MINBUFFER	lua\\llimits.h	/^#define LUA_MINBUFFER	/;"	d
LUA_MININTEGER	lua\\luaconf.h	/^#define LUA_MININTEGER	/;"	d
LUA_MINSTACK	lua\\lua.h	/^#define LUA_MINSTACK	/;"	d
LUA_MULTRET	lua\\lua.h	/^#define LUA_MULTRET	/;"	d
LUA_NOREF	lua\\lauxlib.h	/^#define LUA_NOREF /;"	d
LUA_NUMBER	lua\\luaconf.h	/^#define LUA_NUMBER	/;"	d
LUA_NUMBER_FMT	lua\\luaconf.h	/^#define LUA_NUMBER_FMT	/;"	d
LUA_NUMBER_FRMLEN	lua\\luaconf.h	/^#define LUA_NUMBER_FRMLEN	/;"	d
LUA_NUMBER_TO_REAL	torch7\\generic\\luaG.h	/^# define LUA_NUMBER_TO_REAL(/;"	d
LUA_NUMTAGS	lua\\lua.h	/^#define LUA_NUMTAGS	/;"	d
LUA_O	lua\\makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	lua\\loadlib.c	/^#define LUA_OFSEP	/;"	d	file:
LUA_OK	lua\\lua.h	/^#define LUA_OK	/;"	d
LUA_OPADD	lua\\lua.h	/^#define LUA_OPADD	/;"	d
LUA_OPBAND	lua\\lua.h	/^#define LUA_OPBAND	/;"	d
LUA_OPBNOT	lua\\lua.h	/^#define LUA_OPBNOT	/;"	d
LUA_OPBOR	lua\\lua.h	/^#define LUA_OPBOR	/;"	d
LUA_OPBXOR	lua\\lua.h	/^#define LUA_OPBXOR	/;"	d
LUA_OPDIV	lua\\lua.h	/^#define LUA_OPDIV	/;"	d
LUA_OPEQ	lua\\lua.h	/^#define LUA_OPEQ	/;"	d
LUA_OPIDIV	lua\\lua.h	/^#define LUA_OPIDIV	/;"	d
LUA_OPLE	lua\\lua.h	/^#define LUA_OPLE	/;"	d
LUA_OPLT	lua\\lua.h	/^#define LUA_OPLT	/;"	d
LUA_OPMOD	lua\\lua.h	/^#define LUA_OPMOD	/;"	d
LUA_OPMUL	lua\\lua.h	/^#define LUA_OPMUL	/;"	d
LUA_OPPOW	lua\\lua.h	/^#define LUA_OPPOW	/;"	d
LUA_OPSHL	lua\\lua.h	/^#define LUA_OPSHL	/;"	d
LUA_OPSHR	lua\\lua.h	/^#define LUA_OPSHR	/;"	d
LUA_OPSUB	lua\\lua.h	/^#define LUA_OPSUB	/;"	d
LUA_OPUNM	lua\\lua.h	/^#define LUA_OPUNM	/;"	d
LUA_OSLIBNAME	lua\\lualib.h	/^#define LUA_OSLIBNAME	/;"	d
LUA_PATH_DEFAULT	lua\\luaconf.h	/^#define LUA_PATH_DEFAULT /;"	d
LUA_PATH_MARK	lua\\luaconf.h	/^#define LUA_PATH_MARK /;"	d
LUA_PATH_SEP	lua\\luaconf.h	/^#define LUA_PATH_SEP /;"	d
LUA_PATH_VAR	lua\\loadlib.c	/^#define LUA_PATH_VAR /;"	d	file:
LUA_POF	lua\\loadlib.c	/^#define LUA_POF	/;"	d	file:
LUA_PRELOAD_TABLE	lua\\lauxlib.h	/^#define LUA_PRELOAD_TABLE	/;"	d
LUA_PROGNAME	lua\\lua.c	/^#define LUA_PROGNAME	/;"	d	file:
LUA_PROMPT	lua\\lua.c	/^#define LUA_PROMPT	/;"	d	file:
LUA_PROMPT2	lua\\lua.c	/^#define LUA_PROMPT2	/;"	d	file:
LUA_RAND32	lua\\ltests.h	/^#define LUA_RAND32$/;"	d
LUA_REFNIL	lua\\lauxlib.h	/^#define LUA_REFNIL /;"	d
LUA_REGISTRYINDEX	lua\\lua.h	/^#define LUA_REGISTRYINDEX	/;"	d
LUA_RELEASE	lua\\lua.h	/^#define LUA_RELEASE	/;"	d
LUA_RIDX_GLOBALS	lua\\lua.h	/^#define LUA_RIDX_GLOBALS	/;"	d
LUA_RIDX_LAST	lua\\lua.h	/^#define LUA_RIDX_LAST	/;"	d
LUA_RIDX_MAINTHREAD	lua\\lua.h	/^#define LUA_RIDX_MAINTHREAD	/;"	d
LUA_ROOT	lua\\luaconf.h	/^#define LUA_ROOT	/;"	d
LUA_SHRDIR	lua\\luaconf.h	/^#define LUA_SHRDIR	/;"	d
LUA_SIGNATURE	lua\\lua.h	/^#define LUA_SIGNATURE	/;"	d
LUA_STRFTIMEOPTIONS	lua\\loslib.c	/^#define LUA_STRFTIMEOPTIONS	/;"	d	file:
LUA_STRLIBNAME	lua\\lualib.h	/^#define LUA_STRLIBNAME	/;"	d
LUA_T	lua\\makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	lua\\lualib.h	/^#define LUA_TABLIBNAME	/;"	d
LUA_TABSTKEY	lua\\lobject.h	/^#define LUA_TABSTKEY	/;"	d
LUA_TBOOLEAN	lua\\lua.h	/^#define LUA_TBOOLEAN	/;"	d
LUA_TCCL	lua\\lobject.h	/^#define LUA_TCCL	/;"	d
LUA_TEMPTY	lua\\lobject.h	/^#define LUA_TEMPTY	/;"	d
LUA_TFUNCTION	lua\\lua.h	/^#define LUA_TFUNCTION	/;"	d
LUA_TLCF	lua\\lobject.h	/^#define LUA_TLCF	/;"	d
LUA_TLCL	lua\\lobject.h	/^#define LUA_TLCL	/;"	d
LUA_TLIGHTUSERDATA	lua\\lua.h	/^#define LUA_TLIGHTUSERDATA	/;"	d
LUA_TLNGSTR	lua\\lobject.h	/^#define LUA_TLNGSTR	/;"	d
LUA_TMPNAMBUFSIZE	lua\\loslib.c	/^#define LUA_TMPNAMBUFSIZE	/;"	d	file:
LUA_TMPNAMTEMPLATE	lua\\loslib.c	/^#define LUA_TMPNAMTEMPLATE	/;"	d	file:
LUA_TNIL	lua\\lua.h	/^#define LUA_TNIL	/;"	d
LUA_TNONE	lua\\lua.h	/^#define LUA_TNONE	/;"	d
LUA_TNUMBER	lua\\lua.h	/^#define LUA_TNUMBER	/;"	d
LUA_TNUMFLT	lua\\lobject.h	/^#define LUA_TNUMFLT	/;"	d
LUA_TNUMINT	lua\\lobject.h	/^#define LUA_TNUMINT	/;"	d
LUA_TOTALTAGS	lua\\lobject.h	/^#define LUA_TOTALTAGS	/;"	d
LUA_TPROTO	lua\\lobject.h	/^#define LUA_TPROTO	/;"	d
LUA_TSHRSTR	lua\\lobject.h	/^#define LUA_TSHRSTR	/;"	d
LUA_TSTRING	lua\\lua.h	/^#define LUA_TSTRING	/;"	d
LUA_TTABLE	lua\\lua.h	/^#define LUA_TTABLE	/;"	d
LUA_TTHREAD	lua\\lua.h	/^#define LUA_TTHREAD	/;"	d
LUA_TUPVAL	lua\\lobject.h	/^#define LUA_TUPVAL	/;"	d
LUA_TUPVALTBC	lua\\lobject.h	/^#define LUA_TUPVALTBC	/;"	d
LUA_TUSERDATA	lua\\lua.h	/^#define LUA_TUSERDATA	/;"	d
LUA_UNSIGNED	lua\\luaconf.h	/^#define LUA_UNSIGNED	/;"	d
LUA_UNSIGNEDBITS	lua\\luaconf.h	/^#define LUA_UNSIGNEDBITS	/;"	d
LUA_USE_C89	lua\\luaconf.h	/^#define LUA_USE_C89	/;"	d
LUA_USE_CTYPE	lua\\lctype.h	/^#define LUA_USE_CTYPE	/;"	d
LUA_USE_DLOPEN	lua\\luaconf.h	/^#define LUA_USE_DLOPEN	/;"	d
LUA_USE_JUMPTABLE	lua\\ltests.h	/^#define LUA_USE_JUMPTABLE	/;"	d
LUA_USE_JUMPTABLE	lua\\lvm.c	/^#define LUA_USE_JUMPTABLE	/;"	d	file:
LUA_USE_POSIX	lua\\luaconf.h	/^#define LUA_USE_POSIX$/;"	d
LUA_USE_WINDOWS	lua\\luaconf.h	/^#define LUA_USE_WINDOWS /;"	d
LUA_UTF8LIBNAME	lua\\lualib.h	/^#define LUA_UTF8LIBNAME	/;"	d
LUA_VDIR	lua\\luaconf.h	/^#define LUA_VDIR	/;"	d
LUA_VERSION	lua\\lua.h	/^#define LUA_VERSION	/;"	d
LUA_VERSION_MAJOR	lua\\lua.h	/^#define LUA_VERSION_MAJOR	/;"	d
LUA_VERSION_MINOR	lua\\lua.h	/^#define LUA_VERSION_MINOR	/;"	d
LUA_VERSION_NUM	lua\\lua.h	/^#define LUA_VERSION_NUM	/;"	d
LUA_VERSION_RELEASE	lua\\lua.h	/^#define LUA_VERSION_RELEASE	/;"	d
LUA_VERSION_RELEASE_NUM	lua\\lua.h	/^#define LUA_VERSION_RELEASE_NUM	/;"	d
LUA_VERSUFFIX	lua\\lualib.h	/^#define LUA_VERSUFFIX /;"	d
LUA_YIELD	lua\\lua.h	/^#define LUA_YIELD	/;"	d
LX	lua\\lstate.c	/^typedef struct LX {$/;"	s	file:
LX	lua\\lstate.c	/^} LX;$/;"	t	typeref:struct:LX	file:
L_	dmlc-core\\include\\dmlc\\lua.h	/^  lua_State* L_;$/;"	m	class:dmlc::LuaState	typeref:typename:lua_State *
L_ESC	lua\\lstrlib.c	/^#define L_ESC	/;"	d	file:
L_EXTRA	lua\\ltests.h	/^struct L_EXTRA { int lock; int *plock; };$/;"	s
L_INTHASBITS	lua\\lopcodes.h	/^#define L_INTHASBITS(/;"	d
L_MAXDATEFIELD	lua\\loslib.c	/^#define L_MAXDATEFIELD	/;"	d	file:
L_MAXLENNUM	lua\\liolib.c	/^#define L_MAXLENNUM /;"	d	file:
L_MAXLENNUM	lua\\lobject.c	/^#define L_MAXLENNUM	/;"	d	file:
L_MODEEXT	lua\\liolib.c	/^#define L_MODEEXT	/;"	d	file:
L_NBFD	lua\\lstrlib.c	/^#define L_NBFD	/;"	d	file:
L_STRFTIMEC89	lua\\loslib.c	/^#define L_STRFTIMEC89	/;"	d	file:
L_STRFTIMEC99	lua\\loslib.c	/^#define L_STRFTIMEC99 /;"	d	file:
L_STRFTIMEWIN	lua\\loslib.c	/^#define L_STRFTIMEWIN /;"	d	file:
Labeldesc	lua\\lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	lua\\lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labellist	lua\\lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	lua\\lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
LexState	lua\\llex.h	/^typedef struct LexState {$/;"	s
LexState	lua\\llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LibSVMParser	dmlc-core\\src\\data\\libsvm_parser.h	/^  explicit LibSVMParser(InputSplit *source,$/;"	f	class:dmlc::data::LibSVMParser
LibSVMParser	dmlc-core\\src\\data\\libsvm_parser.h	/^class LibSVMParser : public TextParserBase<IndexType> {$/;"	c	namespace:dmlc::data
LineSplitter	dmlc-core\\src\\io\\line_split.h	/^  LineSplitter(FileSystem *fs,$/;"	f	class:dmlc::io::LineSplitter
LineSplitter	dmlc-core\\src\\io\\line_split.h	/^class LineSplitter : public InputSplitBase {$/;"	c	namespace:dmlc::io
LinearParam	src\\op_nn.cc	/^struct LinearParam : public dmlc::Parameter<LinearParam> {$/;"	s	namespace:tinyflow	file:
LinearShape	src\\op_nn.cc	/^inline bool LinearShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
LinkedList	dmlc-core\\include\\dmlc\\memory.h	/^  struct LinkedList {$/;"	s	class:dmlc::MemoryPool
LinkedList	nnvm\\include\\dmlc\\memory.h	/^  struct LinkedList {$/;"	s	class:dmlc::MemoryPool
Links	nnvm\\README.md	/^## Links$/;"	s
LintHelper	dmlc-core\\scripts\\lint.py	/^class LintHelper(object):$/;"	c
LintHelper	dmlc-core\\scripts\\lint3.py	/^class LintHelper(object):$/;"	c
List	dmlc-core\\include\\dmlc\\registry.h	/^  inline static const std::vector<const EntryType*>& List() {$/;"	f	class:dmlc::Registry	typeref:typename:const std::vector<const EntryType * > &
List	nnvm\\include\\dmlc\\registry.h	/^  inline static const std::vector<const EntryType*>& List() {$/;"	f	class:dmlc::Registry	typeref:typename:const std::vector<const EntryType * > &
ListAllNames	dmlc-core\\include\\dmlc\\registry.h	/^  inline static std::vector<std::string> ListAllNames() {$/;"	f	class:dmlc::Registry	typeref:typename:std::vector<std::string>
ListAllNames	nnvm\\include\\dmlc\\registry.h	/^  inline static std::vector<std::string> ListAllNames() {$/;"	f	class:dmlc::Registry	typeref:typename:std::vector<std::string>
ListAttrOption	nnvm\\include\\nnvm\\symbolic.h	/^  enum ListAttrOption {$/;"	g	class:nnvm::Symbol
ListAttrs	nnvm\\src\\core\\symbolic.cc	/^std::unordered_map<std::string, std::string> Symbol::ListAttrs(ListAttrOption option) const {$/;"	f	class:nnvm::Symbol	typeref:typename:std::unordered_map<std::string,std::string>
ListDirectory	dmlc-core\\src\\io\\azure_filesys.cc	/^void AzureFileSystem::ListDirectory($/;"	f	class:dmlc::io::AzureFileSystem	typeref:typename:void
ListDirectory	dmlc-core\\src\\io\\hdfs_filesys.cc	/^void HDFSFileSystem::ListDirectory(const URI &path, std::vector<FileInfo> *out_list) {$/;"	f	class:dmlc::io::HDFSFileSystem	typeref:typename:void
ListDirectory	dmlc-core\\src\\io\\local_filesys.cc	/^void LocalFileSystem::ListDirectory(const URI &path, std::vector<FileInfo> *out_list) {$/;"	f	class:dmlc::io::LocalFileSystem	typeref:typename:void
ListDirectory	dmlc-core\\src\\io\\s3_filesys.cc	/^void S3FileSystem::ListDirectory(const URI &path, std::vector<FileInfo> *out_list) {$/;"	f	class:dmlc::io::S3FileSystem	typeref:typename:void
ListHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct ListHandler {$/;"	s	namespace:dmlc::serializer
ListInputNames	nnvm\\src\\core\\symbolic.cc	/^std::vector<std::string> Symbol::ListInputNames(ListInputOption option) const {$/;"	f	class:nnvm::Symbol	typeref:typename:std::vector<std::string>
ListInputOption	nnvm\\include\\nnvm\\symbolic.h	/^  enum ListInputOption {$/;"	g	class:nnvm::Symbol
ListInputs	nnvm\\src\\core\\symbolic.cc	/^std::vector<NodePtr> Symbol::ListInputs(ListInputOption option) const {$/;"	f	class:nnvm::Symbol	typeref:typename:std::vector<NodePtr>
ListObjects	dmlc-core\\src\\io\\s3_filesys.cc	/^void ListObjects(const URI &path,$/;"	f	namespace:dmlc::io::s3	typeref:typename:void
ListOutputNames	nnvm\\src\\core\\symbolic.cc	/^std::vector<std::string> Symbol::ListOutputNames() const {$/;"	f	class:nnvm::Symbol	typeref:typename:std::vector<std::string>
Load	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void Load(dmlc::JSONReader *reader) {$/;"	f	struct:dmlc::Parameter	typeref:typename:void
Load	dmlc-core\\src\\data\\row_block.h	/^RowBlockContainer<IndexType>::Load(Stream *fi) {$/;"	f	class:dmlc::data::RowBlockContainer	typeref:typename:bool
Load	dmlc-core\\src\\io\\input_split_base.cc	/^bool InputSplitBase::Chunk::Load(InputSplitBase *split, size_t buffer_size) {$/;"	f	class:dmlc::io::InputSplitBase::Chunk	typeref:typename:bool
Load	dmlc-core\\test\\unittest\\unittest_json.cc	/^  inline void Load(dmlc::JSONReader *reader) {$/;"	f	class:json::MyClass	typeref:typename:void	file:
Load	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  inline bool Load(dmlc::Stream *strm) {$/;"	f	class:MyClass	typeref:typename:bool	file:
Load	nnvm\\include\\dmlc\\parameter.h	/^  inline void Load(dmlc::JSONReader *reader) {$/;"	f	struct:dmlc::Parameter	typeref:typename:void
Load	nnvm\\include\\nnvm\\tuple.h	/^  inline bool Load(TStream *strm) {$/;"	f	class:nnvm::TShape	typeref:typename:bool
Load	nnvm\\include\\nnvm\\tuple.h	/^  inline void Load(dmlc::JSONReader* reader) {$/;"	f	class:nnvm::Tuple	typeref:typename:void
Load	nnvm\\src\\pass\\saveload_json.cc	/^    void Load(dmlc::JSONReader *reader) {$/;"	f	struct:nnvm::pass::__anonc309bbd30110::JSONNode::Entry	typeref:typename:void	file:
Load	nnvm\\src\\pass\\saveload_json.cc	/^  void Load(dmlc::JSONReader *reader) {$/;"	f	struct:nnvm::pass::__anonc309bbd30110::JSONGraph	typeref:typename:void	file:
Load	nnvm\\src\\pass\\saveload_json.cc	/^  void Load(dmlc::JSONReader *reader) {$/;"	f	struct:nnvm::pass::__anonc309bbd30110::JSONNode	typeref:typename:void	file:
LoadBlock	lua\\lundump.c	/^static void LoadBlock (LoadState *S, void *b, size_t size) {$/;"	f	typeref:typename:void	file:
LoadByte	lua\\lundump.c	/^static lu_byte LoadByte (LoadState *S) {$/;"	f	typeref:typename:lu_byte	file:
LoadChunk	dmlc-core\\src\\io\\single_file_split.h	/^  inline bool LoadChunk(void) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:bool
LoadCode	lua\\lundump.c	/^static void LoadCode (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadConstants	lua\\lundump.c	/^static void LoadConstants (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadDebug	lua\\lundump.c	/^static void LoadDebug (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadF	lua\\lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	lua\\lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFromStream	dmlc-core\\src\\config.cc	/^void Config::LoadFromStream(istream& is) {$/;"	f	class:dmlc::Config	typeref:typename:void
LoadFunction	lua\\lundump.c	/^static void LoadFunction (LoadState *S, Proto *f, TString *psource) {$/;"	f	typeref:typename:void	file:
LoadInt	lua\\lundump.c	/^static int LoadInt (LoadState *S) {$/;"	f	typeref:typename:int	file:
LoadInteger	lua\\lundump.c	/^static lua_Integer LoadInteger (LoadState *S) {$/;"	f	typeref:typename:lua_Integer	file:
LoadJSON	nnvm\\include\\nnvm\\pass_functions.h	/^inline Graph LoadJSON(const std::string& json_str) {$/;"	f	namespace:nnvm::pass	typeref:typename:Graph
LoadJSON	nnvm\\src\\pass\\saveload_json.cc	/^Graph LoadJSON(Graph src) {$/;"	f	namespace:nnvm::pass::__anonc309bbd30110	typeref:typename:Graph
LoadNumber	lua\\lundump.c	/^static lua_Number LoadNumber (LoadState *S) {$/;"	f	typeref:typename:lua_Number	file:
LoadProtos	lua\\lundump.c	/^static void LoadProtos (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadS	lua\\lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	lua\\lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadSize	lua\\lundump.c	/^static size_t LoadSize (LoadState *S) {$/;"	f	typeref:typename:size_t	file:
LoadState	lua\\lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon681ca6790108	file:
LoadString	lua\\lundump.c	/^static TString *LoadString (LoadState *S) {$/;"	f	typeref:typename:TString *	file:
LoadStringN	lua\\lundump.c	/^static TString *LoadStringN (LoadState *S) {$/;"	f	typeref:typename:TString *	file:
LoadUnsigned	lua\\lundump.c	/^static size_t LoadUnsigned (LoadState *S, size_t limit) {$/;"	f	typeref:typename:size_t	file:
LoadUpvalues	lua\\lundump.c	/^static void LoadUpvalues (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadVar	lua\\lundump.c	/^#define LoadVar(/;"	d	file:
LoadVector	lua\\lundump.c	/^#define LoadVector(/;"	d	file:
LocVar	lua\\lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	lua\\lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
LocalFileSystem	dmlc-core\\src\\io\\local_filesys.h	/^  LocalFileSystem() {}$/;"	f	class:dmlc::io::LocalFileSystem
LocalFileSystem	dmlc-core\\src\\io\\local_filesys.h	/^class LocalFileSystem : public FileSystem {$/;"	c	namespace:dmlc::io
LogMessage	dmlc-core\\include\\dmlc\\logging.h	/^  LogMessage(const char* file, int line)$/;"	f	class:dmlc::LogMessage
LogMessage	dmlc-core\\include\\dmlc\\logging.h	/^class LogMessage {$/;"	c	namespace:dmlc
LogMessage	nnvm\\include\\dmlc\\logging.h	/^  LogMessage(const char* file, int line)$/;"	f	class:dmlc::LogMessage
LogMessage	nnvm\\include\\dmlc\\logging.h	/^class LogMessage {$/;"	c	namespace:dmlc
LogMessageFatal	dmlc-core\\include\\dmlc\\logging.h	/^  LogMessageFatal(const char* file, int line) : LogMessage(file, line) {}$/;"	f	class:dmlc::LogMessageFatal
LogMessageFatal	dmlc-core\\include\\dmlc\\logging.h	/^  LogMessageFatal(const char* file, int line) {$/;"	f	class:dmlc::LogMessageFatal
LogMessageFatal	dmlc-core\\include\\dmlc\\logging.h	/^class LogMessageFatal : public LogMessage {$/;"	c	namespace:dmlc
LogMessageFatal	dmlc-core\\include\\dmlc\\logging.h	/^class LogMessageFatal {$/;"	c	namespace:dmlc
LogMessageFatal	nnvm\\include\\dmlc\\logging.h	/^  LogMessageFatal(const char* file, int line) : LogMessage(file, line) {}$/;"	f	class:dmlc::LogMessageFatal
LogMessageFatal	nnvm\\include\\dmlc\\logging.h	/^  LogMessageFatal(const char* file, int line) {$/;"	f	class:dmlc::LogMessageFatal
LogMessageFatal	nnvm\\include\\dmlc\\logging.h	/^class LogMessageFatal : public LogMessage {$/;"	c	namespace:dmlc
LogMessageFatal	nnvm\\include\\dmlc\\logging.h	/^class LogMessageFatal {$/;"	c	namespace:dmlc
LogMessageVoidify	dmlc-core\\include\\dmlc\\logging.h	/^  LogMessageVoidify() {}$/;"	f	class:dmlc::LogMessageVoidify
LogMessageVoidify	dmlc-core\\include\\dmlc\\logging.h	/^class LogMessageVoidify {$/;"	c	namespace:dmlc
LogMessageVoidify	nnvm\\include\\dmlc\\logging.h	/^  LogMessageVoidify() {}$/;"	f	class:dmlc::LogMessageVoidify
LogMessageVoidify	nnvm\\include\\dmlc\\logging.h	/^class LogMessageVoidify {$/;"	c	namespace:dmlc
Logical Operations on `Tensor`s	torch7\\doc\\maths.md	/^## Logical Operations on `Tensor`s ##$/;"	s
Lua Torch C API	torch7\\lib\\luaT\\README.md	/^# Lua Torch C API #$/;"	c
LuaJIT FFI access	torch7\\doc\\tensor.md	/^## LuaJIT FFI access ##$/;"	s
LuaRef	dmlc-core\\include\\dmlc\\lua.h	/^class LuaRef {$/;"	c	namespace:dmlc
LuaRef	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef::LuaRef(LuaRef&& other) {$/;"	f	class:dmlc::LuaRef
LuaRef	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef::LuaRef(const LuaRef& other) {$/;"	f	class:dmlc::LuaRef
LuaReshape	src\\torch\\op_nn_torch.cc	/^const char* LuaReshape = R"($/;"	v	namespace:tinyflow	typeref:typename:const char *
LuaState	dmlc-core\\include\\dmlc\\lua.h	/^class LuaState {$/;"	c	namespace:dmlc
LuaState	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaState::LuaState() {$/;"	f	class:dmlc::LuaState
MAKE_LUA	lua\\onelua.c	/^#define MAKE_LUA$/;"	d	file:
MARK	lua\\ltests.c	/^#define MARK	/;"	d	file:
MARKSIZE	lua\\ltests.c	/^#define MARKSIZE	/;"	d	file:
MASK	lua\\lctype.h	/^#define MASK(/;"	d
MASK0	lua\\lopcodes.h	/^#define MASK0(/;"	d
MASK1	lua\\lopcodes.h	/^#define MASK1(/;"	d
MATRIX_A	torch7\\lib\\TH\\THRandom.c	/^#define MATRIX_A /;"	d	file:
MAX	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^  #define MAX(/;"	d	file:
MAXABITS	lua\\ltable.c	/^#define MAXABITS	/;"	d	file:
MAXALIGN	lua\\lstrlib.c	/^#define MAXALIGN	/;"	d	file:
MAXARGLINE	lua\\liolib.c	/^#define MAXARGLINE	/;"	d	file:
MAXARG_A	lua\\lopcodes.h	/^#define MAXARG_A	/;"	d
MAXARG_Ax	lua\\lopcodes.h	/^#define MAXARG_Ax	/;"	d
MAXARG_B	lua\\lopcodes.h	/^#define MAXARG_B	/;"	d
MAXARG_Bx	lua\\lopcodes.h	/^#define MAXARG_Bx	/;"	d
MAXARG_C	lua\\lopcodes.h	/^#define MAXARG_C	/;"	d
MAXARG_sJ	lua\\lopcodes.h	/^#define MAXARG_sJ	/;"	d
MAXASIZE	lua\\ltable.c	/^#define MAXASIZE	/;"	d	file:
MAXBY10	lua\\lobject.c	/^#define MAXBY10	/;"	d	file:
MAXCCALLS	lua\\lstrlib.c	/^#define MAXCCALLS	/;"	d	file:
MAXHBITS	lua\\ltable.c	/^#define MAXHBITS	/;"	d	file:
MAXHSIZE	lua\\ltable.c	/^#define MAXHSIZE	/;"	d	file:
MAXINDEXRK	lua\\lopcodes.h	/^#define MAXINDEXRK	/;"	d
MAXINTFITSF	lua\\lvm.c	/^#define MAXINTFITSF	/;"	d	file:
MAXINTSIZE	lua\\lstrlib.c	/^#define MAXINTSIZE	/;"	d	file:
MAXIWTHABS	lua\\lcode.c	/^#define MAXIWTHABS	/;"	d	file:
MAXIWTHABS	lua\\ltests.h	/^#define MAXIWTHABS	/;"	d
MAXLASTD	lua\\lobject.c	/^#define MAXLASTD	/;"	d	file:
MAXMISS	lua\\lfunc.h	/^#define MAXMISS	/;"	d
MAXNUMBER2STR	lua\\lobject.c	/^#define MAXNUMBER2STR	/;"	d	file:
MAXREGS	lua\\lcode.c	/^#define MAXREGS	/;"	d	file:
MAXSIGDIG	lua\\lobject.c	/^#define MAXSIGDIG	/;"	d	file:
MAXSIZE	lua\\lstrlib.c	/^#define MAXSIZE /;"	d	file:
MAXSTRTB	lua\\lstring.c	/^#define MAXSTRTB	/;"	d	file:
MAXTAGLOOP	lua\\lvm.c	/^#define MAXTAGLOOP	/;"	d	file:
MAXUNICODE	lua\\lutf8lib.c	/^#define MAXUNICODE	/;"	d	file:
MAXUPVAL	lua\\lfunc.h	/^#define MAXUPVAL	/;"	d
MAXUTF	lua\\lutf8lib.c	/^#define MAXUTF	/;"	d	file:
MAXVARS	lua\\lparser.c	/^#define MAXVARS	/;"	d	file:
MAX_FORMAT	lua\\lstrlib.c	/^#define MAX_FORMAT	/;"	d	file:
MAX_INT	lua\\llimits.h	/^#define MAX_INT	/;"	d
MAX_ITEM	lua\\lstrlib.c	/^#define MAX_ITEM	/;"	d	file:
MAX_ITEMF	lua\\lstrlib.c	/^#define MAX_ITEMF	/;"	d	file:
MAX_LEVELS	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define MAX_LEVELS /;"	d	file:
MAX_LMEM	lua\\llimits.h	/^#define MAX_LMEM	/;"	d
MAX_LUMEM	lua\\llimits.h	/^#define MAX_LUMEM	/;"	d
MAX_SIZE	lua\\llimits.h	/^#define MAX_SIZE	/;"	d
MAX_SIZET	lua\\lauxlib.c	/^#define MAX_SIZET	/;"	d	file:
MAX_SIZET	lua\\llimits.h	/^#define MAX_SIZET	/;"	d
MAX_SIZET	lua\\lstrlib.c	/^#define MAX_SIZET	/;"	d	file:
MC	lua\\lstrlib.c	/^#define MC	/;"	d	file:
MEMERRMSG	lua\\lstring.h	/^#define MEMERRMSG /;"	d
MIN	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^  #define MIN(/;"	d	file:
MINSIZEARRAY	lua\\lmem.c	/^#define MINSIZEARRAY	/;"	d	file:
MINSTRTABSIZE	lua\\llimits.h	/^#define MINSTRTABSIZE	/;"	d
MINSTRTABSIZE	lua\\ltests.h	/^#define MINSTRTABSIZE	/;"	d
MINUS_LOG_THRESHOLD	torch7\\lib\\TH\\THLogAdd.c	/^#define MINUS_LOG_THRESHOLD /;"	d	file:
MIXBITS	torch7\\lib\\TH\\THRandom.c	/^#define MIXBITS(/;"	d	file:
MNISTData	python\\tinyflow\\datasets.py	/^MNISTData = namedtuple("MNISTData", ["train", "test"])$/;"	v
MSVC Project	dmlc-core\\windows\\README.md	/^MSVC Project$/;"	c
MT_BIN_OPERATOR_GET_HANDLER	torch7\\lib\\luaT\\luaT.c	/^#define MT_BIN_OPERATOR_GET_HANDLER(/;"	d	file:
MT_DECLARE_BIN_OPERATOR	torch7\\lib\\luaT\\luaT.c	/^#define MT_DECLARE_BIN_OPERATOR(/;"	d	file:
MT_DECLARE_BIN_OPERATOR	torch7\\lib\\luaT\\luaT.c	/^MT_DECLARE_BIN_OPERATOR(add,    BIN_OPERATOR_ERROR(addition) )$/;"	f
MT_DECLARE_OPERATOR	torch7\\lib\\luaT\\luaT.c	/^#define MT_DECLARE_OPERATOR(/;"	d	file:
MT_DECLARE_OPERATOR_BODY	torch7\\lib\\luaT\\luaT.c	/^#define MT_DECLARE_OPERATOR_BODY(/;"	d	file:
MT_UNI_OPERATOR_GET_HANDLER	torch7\\lib\\luaT\\luaT.c	/^#define MT_UNI_OPERATOR_GET_HANDLER(/;"	d	file:
MX_TREAD_LOCAL	dmlc-core\\include\\dmlc\\thread_local.h	/^  #define MX_TREAD_LOCAL /;"	d
MX_TREAD_LOCAL	nnvm\\include\\dmlc\\thread_local.h	/^  #define MX_TREAD_LOCAL /;"	d
MYCFLAGS	lua\\makefile	/^MYCFLAGS= $(LOCAL) -std=c99 -DLUA_USE_LINUX -DLUA_USE_READLINE$/;"	m
MYLDFLAGS	lua\\makefile	/^MYLDFLAGS= $(LOCAL) -Wl,-E$/;"	m
MYLIBS	lua\\makefile	/^MYLIBS= -ldl -lreadline$/;"	m
M_PI	bin\\torch7\\lib\\TH\\THGeneral.h	/^# define M_PI /;"	d
M_PI	torch7\\lib\\TH\\THGeneral.h.in	/^# define M_PI /;"	d	file:
M_SMALL	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define M_SMALL /;"	d	file:
MakeBackwardGrads	src\\op_util.h	/^inline std::vector<NodeEntry> MakeBackwardGrads($/;"	f	namespace:tinyflow	typeref:typename:std::vector<NodeEntry>
MakeNNBackwardNode	src\\op_nn.cc	/^inline std::vector<NodeEntry> MakeNNBackwardNode($/;"	f	namespace:tinyflow	typeref:typename:std::vector<NodeEntry>
MakeNode	nnvm\\example\\src\\operator.cc	/^inline NodeEntry MakeNode(const char* op_name,$/;"	f	namespace:myproject	typeref:typename:NodeEntry
MakeNode	src\\op_util.h	/^inline NodeEntry MakeNode(const char* op_name,$/;"	f	namespace:tinyflow	typeref:typename:NodeEntry
MakeProtoStringValue	dmlc-core\\src\\config.cc	/^string MakeProtoStringValue(const std::string& str) {$/;"	f	namespace:dmlc	typeref:typename:string
Manipulating the tensor view	torch7\\doc\\tensor.md	/^## Manipulating the tensor view ##$/;"	s
MapHandler	dmlc-core\\include\\dmlc\\json.h	/^struct MapHandler{$/;"	s	namespace:dmlc::json
MapHandler	dmlc-core\\include\\dmlc\\lua.h	/^struct MapHandler {$/;"	s	namespace:dmlc::lua_stack
MapHandler	nnvm\\include\\dmlc\\json.h	/^struct MapHandler{$/;"	s	namespace:dmlc::json
MarkdownParser	dmlc-core\\doc\\sphinx_util.py	/^MarkdownParser = parser.CommonMarkParser$/;"	v
MatchState	lua\\lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	lua\\lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Math Functions	torch7\\doc\\maths.md	/^# Math Functions #$/;"	c
Matrix-wide operations  (`Tensor`-wide operations)	torch7\\doc\\maths.md	/^## Matrix-wide operations  (`Tensor`-wide operations) ##$/;"	s
Mbuffer	lua\\lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	lua\\lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
MemCostBytes	dmlc-core\\include\\dmlc\\data.h	/^  inline size_t MemCostBytes(void) const {$/;"	f	struct:dmlc::RowBlock	typeref:typename:size_t
MemCostBytes	dmlc-core\\src\\data\\row_block.h	/^  inline size_t MemCostBytes(void) const {$/;"	f	struct:dmlc::data::RowBlockContainer	typeref:typename:size_t
Memcontrol	lua\\ltests.h	/^typedef struct Memcontrol {$/;"	s
Memcontrol	lua\\ltests.h	/^} Memcontrol;$/;"	t	typeref:struct:Memcontrol
Memory functions	torch7\\lib\\luaT\\README.md	/^## Memory functions ##$/;"	s
MemoryFile	torch7\\doc\\memoryfile.md	/^# MemoryFile #$/;"	c
MemoryFixedSizeStream	dmlc-core\\include\\dmlc\\memory_io.h	/^  MemoryFixedSizeStream(void *p_buffer, size_t buffer_size)$/;"	f	struct:dmlc::MemoryFixedSizeStream
MemoryFixedSizeStream	dmlc-core\\include\\dmlc\\memory_io.h	/^struct MemoryFixedSizeStream : public SeekStream {$/;"	s	namespace:dmlc
MemoryPool	dmlc-core\\include\\dmlc\\memory.h	/^  MemoryPool() {$/;"	f	class:dmlc::MemoryPool
MemoryPool	dmlc-core\\include\\dmlc\\memory.h	/^class MemoryPool {$/;"	c	namespace:dmlc
MemoryPool	nnvm\\include\\dmlc\\memory.h	/^  MemoryPool() {$/;"	f	class:dmlc::MemoryPool
MemoryPool	nnvm\\include\\dmlc\\memory.h	/^class MemoryPool {$/;"	c	namespace:dmlc
MemoryStringStream	dmlc-core\\include\\dmlc\\memory_io.h	/^  explicit MemoryStringStream(std::string *p_buffer)$/;"	f	struct:dmlc::MemoryStringStream
MemoryStringStream	dmlc-core\\include\\dmlc\\memory_io.h	/^struct MemoryStringStream : public dmlc::SeekStream {$/;"	s	namespace:dmlc
MergeIntoInput	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^void MergeIntoInput(NodePtr fnode,$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:void
Message	lua\\testes\\all.lua	/^function Message (m)$/;"	f
Minimum Registration for a Symbolic Front-End	nnvm\\docs\\overview.md	/^## Minimum Registration for a Symbolic Front-End$/;"	s
MirrorFun	nnvm\\src\\pass\\gradient.cc	/^  using MirrorFun = std::function<int (const Node& node)>;$/;"	t	function:nnvm::pass::__anona60d04f90110::Gradient	file:
MoveCopyAttr	nnvm\\include\\nnvm\\graph.h	/^inline T Graph::MoveCopyAttr(const std::string& attr_name) {$/;"	f	class:nnvm::Graph	typeref:typename:T
Multiplication	torch7\\doc\\maths.md	/^### Multiplication ###$/;"	S
MyClass	dmlc-core\\test\\unittest\\unittest_json.cc	/^  MyClass() {}$/;"	f	class:json::MyClass	file:
MyClass	dmlc-core\\test\\unittest\\unittest_json.cc	/^  MyClass(std::string data) : data_{data}, value_(0) {}$/;"	f	class:json::MyClass	file:
MyClass	dmlc-core\\test\\unittest\\unittest_json.cc	/^class MyClass {$/;"	c	namespace:json	file:
MyClass	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  MyClass() {}$/;"	f	class:MyClass	file:
MyClass	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  MyClass(std::string data) : data_(data) {}$/;"	f	class:MyClass	file:
MyClass	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^class MyClass {$/;"	c	file:
MyParam	dmlc-core\\example\\parameter.cc	/^struct MyParam : public dmlc::Parameter<MyParam> {$/;"	s	file:
N	torch7\\test\\timeSort.lua	/^    local N = pow10:clone():apply(function(x) return 10^x end)$/;"	f
NAN	torch7\\lib\\TH\\generic\\THTensorMath.c	/^  #define NAN /;"	d	file:
NB	lua\\lstrlib.c	/^#define NB	/;"	d	file:
NBITS	lua\\lvm.c	/^#define NBITS	/;"	d	file:
NBM	lua\\lvm.c	/^#define NBM	/;"	d	file:
NMCallbackHandler	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private class NMCallbackHandler implements NMClientAsync.CallbackHandler {$/;"	c	class:ApplicationMaster
NNAPIErrorStore	nnvm\\src\\c_api\\c_api_error.cc	/^typedef dmlc::ThreadLocalStore<ErrorEntry> NNAPIErrorStore;$/;"	t	typeref:typename:dmlc::ThreadLocalStore<ErrorEntry>	file:
NNAPIHandleException	nnvm\\src\\c_api\\c_api_common.h	/^inline int NNAPIHandleException(const dmlc::Error &e) {$/;"	f	typeref:typename:int
NNAPIHandleException	src\\c_api.cc	/^inline int NNAPIHandleException(const dmlc::Error &e) {$/;"	f	typeref:typename:int
NNAPISetLastError	nnvm\\src\\c_api\\c_api_error.cc	/^void NNAPISetLastError(const char* msg) {$/;"	f	typeref:typename:void
NNAPIThreadLocalEntry	nnvm\\src\\c_api\\c_api_common.h	/^struct NNAPIThreadLocalEntry {$/;"	s
NNAPIThreadLocalStore	nnvm\\src\\c_api\\c_api_common.h	/^typedef dmlc::ThreadLocalStore<NNAPIThreadLocalEntry> NNAPIThreadLocalStore;$/;"	t	typeref:typename:dmlc::ThreadLocalStore<NNAPIThreadLocalEntry>
NNAddControlDeps	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNAddControlDeps(SymbolHandle handle,$/;"	f	typeref:typename:int
NNBackwardParam	src\\op_util.h	/^struct NNBackwardParam {$/;"	s	namespace:tinyflow
NNGetLastError	nnvm\\src\\c_api\\c_api_error.cc	/^const char *NNGetLastError() {$/;"	f	typeref:typename:const char *
NNGetOpHandle	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNGetOpHandle(const char* op_name,$/;"	f	typeref:typename:int
NNGetOpInfo	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNGetOpInfo(OpHandle handle,$/;"	f	typeref:typename:int
NNGraphApplyPasses	nnvm\\src\\c_api\\c_api_graph.cc	/^int NNGraphApplyPasses(GraphHandle src,$/;"	f	typeref:typename:int
NNGraphCreate	nnvm\\src\\c_api\\c_api_graph.cc	/^int NNGraphCreate(SymbolHandle symbol, GraphHandle *graph) {$/;"	f	typeref:typename:int
NNGraphFree	nnvm\\src\\c_api\\c_api_graph.cc	/^int NNGraphFree(GraphHandle handle) {$/;"	f	typeref:typename:int
NNGraphGetJSONAttr	nnvm\\src\\c_api\\c_api_graph.cc	/^int NNGraphGetJSONAttr(GraphHandle handle,$/;"	f	typeref:typename:int
NNGraphGetSymbol	nnvm\\src\\c_api\\c_api_graph.cc	/^int NNGraphGetSymbol(GraphHandle graph, SymbolHandle *symbol) {$/;"	f	typeref:typename:int
NNGraphSetJSONAttr	nnvm\\src\\c_api\\c_api_graph.cc	/^int NNGraphSetJSONAttr(GraphHandle handle,$/;"	f	typeref:typename:int
NNGraphSetNodeEntryListAttr_	nnvm\\src\\c_api\\c_api_graph.cc	/^int NNGraphSetNodeEntryListAttr_(GraphHandle handle,$/;"	f	typeref:typename:int
NNListAllOpNames	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNListAllOpNames(nn_uint *out_size,$/;"	f	typeref:typename:int
NNListUniqueOps	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNListUniqueOps(nn_uint *out_size,$/;"	f	typeref:typename:int
NNSessionClose	src\\c_api.cc	/^int NNSessionClose(SessionHandle handle) {$/;"	f	typeref:typename:int
NNSessionCreate	src\\c_api.cc	/^int NNSessionCreate(SessionHandle* handle, const char* option) {$/;"	f	typeref:typename:int
NNSessionRun	src\\c_api.cc	/^int NNSessionRun(SessionHandle handle,$/;"	f	typeref:typename:int
NNSymbolCompose	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolCompose(SymbolHandle sym,$/;"	f	typeref:typename:int
NNSymbolCopy	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolCopy(SymbolHandle symbol, SymbolHandle *out) {$/;"	f	typeref:typename:int
NNSymbolCreateAtomicSymbol	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolCreateAtomicSymbol(OpHandle creator,$/;"	f	typeref:typename:int
NNSymbolCreateGroup	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolCreateGroup(nn_uint num_symbols,$/;"	f	typeref:typename:int
NNSymbolCreateVariable	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolCreateVariable(const char *name, SymbolHandle *out) {$/;"	f	typeref:typename:int
NNSymbolFree	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolFree(SymbolHandle symbol) {$/;"	f	typeref:typename:int
NNSymbolGetAttr	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolGetAttr(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNSymbolGetInternals	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolGetInternals(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNSymbolGetOutput	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolGetOutput(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNSymbolListAttrs	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolListAttrs(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNSymbolListInputNames	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolListInputNames(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNSymbolListInputVariables	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolListInputVariables(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNSymbolListOutputNames	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolListOutputNames(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNSymbolPrint	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolPrint(SymbolHandle symbol, const char **out_str) {$/;"	f	typeref:typename:int
NNSymbolSetAttrs	nnvm\\src\\c_api\\c_api_symbolic.cc	/^int NNSymbolSetAttrs(SymbolHandle symbol,$/;"	f	typeref:typename:int
NNVM Overview	nnvm\\docs\\overview.md	/^# NNVM Overview$/;"	c
NNVM-Fusion: Implement GPU Kernel Fusion and Runtime Compilation Based on NNVM	nnvm\\plugin\\nnvm-fusion\\README.md	/^# NNVM-Fusion: Implement GPU Kernel Fusion and Runtime Compilation Based on NNVM$/;"	c
NNVM: Build deep learning system by parts	nnvm\\README.md	/^# NNVM: Build deep learning system by parts$/;"	c
NNVMError	nnvm\\python\\nnvm\\_base.py	/^class NNVMError(Exception):$/;"	c
NNVM_BASE_H_	nnvm\\include\\nnvm\\base.h	/^#define NNVM_BASE_H_$/;"	d
NNVM_C_API_C_API_COMMON_H_	nnvm\\src\\c_api\\c_api_common.h	/^#define NNVM_C_API_C_API_COMMON_H_$/;"	d
NNVM_C_API_H_	nnvm\\include\\nnvm\\c_api.h	/^#define NNVM_C_API_H_$/;"	d
NNVM_DLL	nnvm\\include\\nnvm\\c_api.h	/^#define NNVM_DLL /;"	d
NNVM_EXTERN_C	nnvm\\include\\nnvm\\c_api.h	/^#define NNVM_EXTERN_C /;"	d
NNVM_EXTERN_C	nnvm\\include\\nnvm\\c_api.h	/^#define NNVM_EXTERN_C$/;"	d
NNVM_FUSION_AST_H_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^#define NNVM_FUSION_AST_H_$/;"	d
NNVM_FUSION_BASE_H_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^#define NNVM_FUSION_BASE_H_$/;"	d
NNVM_FUSION_DEBUG	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^#define NNVM_FUSION_DEBUG /;"	d
NNVM_FUSION_INTERNAL_H_	nnvm\\plugin\\nnvm-fusion\\src\\internal.h	/^#define NNVM_FUSION_INTERNAL_H_$/;"	d
NNVM_FUSION_PATH	Makefile	/^  	NNVM_FUSION_PATH = $(NNVM_PATH)\/plugin\/nnvm-fusion\/$/;"	m
NNVM_FUSION_RTC_H_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^#define NNVM_FUSION_RTC_H_$/;"	d
NNVM_FUSION_SRC	nnvm\\plugin\\nnvm-fusion\\nnvm-fusion.mk	/^NNVM_FUSION_SRC = $(wildcard $(NNVM_FUSION_PATH)\/src\/*.cc)$/;"	m
NNVM_GRAPH_ATTR_TYPES_H_	nnvm\\include\\nnvm\\graph_attr_types.h	/^#define NNVM_GRAPH_ATTR_TYPES_H_$/;"	d
NNVM_GRAPH_H_	nnvm\\include\\nnvm\\graph.h	/^#define NNVM_GRAPH_H_$/;"	d
NNVM_NODE_H_	nnvm\\include\\nnvm\\node.h	/^#define NNVM_NODE_H_$/;"	d
NNVM_OP_ATTR_TYPES_H_	nnvm\\include\\nnvm\\op_attr_types.h	/^#define NNVM_OP_ATTR_TYPES_H_$/;"	d
NNVM_OP_H_	nnvm\\include\\nnvm\\op.h	/^#define NNVM_OP_H_$/;"	d
NNVM_PASS_FUNCTIONS_H_	nnvm\\include\\nnvm\\pass_functions.h	/^#define NNVM_PASS_FUNCTIONS_H_$/;"	d
NNVM_PASS_GRAPH_ALGORITHM_H_	nnvm\\src\\pass\\graph_algorithm.h	/^#define NNVM_PASS_GRAPH_ALGORITHM_H_$/;"	d
NNVM_PASS_H_	nnvm\\include\\nnvm\\pass.h	/^#define NNVM_PASS_H_$/;"	d
NNVM_PATH	Makefile	/^	NNVM_PATH = $(ROOTDIR)\/nnvm$/;"	m
NNVM_REGISTER_GVAR_DEF	nnvm\\include\\nnvm\\op.h	/^#define NNVM_REGISTER_GVAR_DEF(/;"	d
NNVM_REGISTER_OP	nnvm\\include\\nnvm\\op.h	/^#define NNVM_REGISTER_OP(/;"	d
NNVM_REGISTER_OP_GROUP	nnvm\\include\\nnvm\\op.h	/^#define NNVM_REGISTER_OP_GROUP(/;"	d
NNVM_REGISTER_PASS	nnvm\\include\\nnvm\\pass.h	/^#define NNVM_REGISTER_PASS(/;"	d
NNVM_REGISTER_VAR_DEF	nnvm\\include\\nnvm\\op.h	/^#define NNVM_REGISTER_VAR_DEF(/;"	d
NNVM_SYMBOLIC_H_	nnvm\\include\\nnvm\\symbolic.h	/^#define NNVM_SYMBOLIC_H_$/;"	d
NNVM_TUPLE_H_	nnvm\\include\\nnvm\\tuple.h	/^#define NNVM_TUPLE_H_$/;"	d
NOCLOSINGMETH	lua\\lfunc.h	/^#define NOCLOSINGMETH	/;"	d
NOTE	dmlc-core\\README.md	/^NOTE$/;"	s
NO_JUMP	lua\\lcode.h	/^#define NO_JUMP /;"	d
NO_REG	lua\\lopcodes.h	/^#define NO_REG	/;"	d
NO_WHOLE_ARCH	Makefile	/^	NO_WHOLE_ARCH= --no-whole-archive$/;"	m
NO_WHOLE_ARCH	Makefile	/^	NO_WHOLE_ARCH= -noall_load$/;"	m
NO_WHOLE_ARCH	nnvm\\Makefile	/^	NO_WHOLE_ARCH= --no-whole-archive$/;"	m
NO_WHOLE_ARCH	nnvm\\Makefile	/^	NO_WHOLE_ARCH= -noall_load$/;"	m
NUM_OPCODES	lua\\lopcodes.h	/^#define NUM_OPCODES	/;"	d
NUM_RESERVED	lua\\llex.h	/^#define NUM_RESERVED	/;"	d
NVCC	nnvm\\make\\config.mk	/^export NVCC = nvcc$/;"	m
NVRTC_SAFE_CALL	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^#define NVRTC_SAFE_CALL(/;"	d
NameManager	nnvm\\python\\nnvm\\name.py	/^class NameManager(object):$/;"	c
Need help?	torch7\\README.md	/^## Need help? ##$/;"	s
NeedBroadCast	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^bool NeedBroadCast(const InternalNode* var) {$/;"	f	namespace:nnvm::fusion::__anon0d7734b40110	typeref:typename:bool
Negation	torch7\\doc\\maths.md	/^### Negation ###$/;"	S
NewStorage	src\\torch\\torch_util.h	/^  LuaRef NewStorage(size_t size, int dev_mask = kCPU, int dtype = 0) {$/;"	f	class:tinyflow::TorchState	typeref:typename:LuaRef
NewSymbol	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^cdef NewSymbol(SymbolHandle handle):$/;"	f
NewTensorEmpty	src\\torch\\torch_util.h	/^  LuaRef NewTensorEmpty(int dev_mask = kCPU, int dtype = 0) {$/;"	f	class:tinyflow::TorchState	typeref:typename:LuaRef
NewTensorShared	src\\torch\\torch_util.h	/^  LuaRef NewTensorShared(TBlob src) {$/;"	f	class:tinyflow::TorchState	typeref:typename:LuaRef
Next	dmlc-core\\include\\dmlc\\threadediter.h	/^  virtual bool Next(void) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:bool
Next	dmlc-core\\include\\dmlc\\threadediter.h	/^Next(DType **out_dptr) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:bool
Next	dmlc-core\\src\\data\\basic_row_iter.h	/^  virtual bool Next(void) {$/;"	f	class:dmlc::data::BasicRowIter	typeref:typename:bool
Next	dmlc-core\\src\\data\\disk_row_iter.h	/^  virtual bool Next(void) {$/;"	f	class:dmlc::data::DiskRowIter	typeref:typename:bool
Next	dmlc-core\\src\\data\\parser.h	/^  virtual bool Next(void) {$/;"	f	class:dmlc::data::ParserImpl	typeref:typename:bool
Next	dmlc-core\\src\\data\\parser.h	/^  virtual bool Next(void) {$/;"	f	class:dmlc::data::ThreadedParser	typeref:typename:bool
Next	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^  virtual bool Next(int **inout_dptr) {$/;"	f	struct:producer_test::IntProducer	typeref:typename:bool	file:
NextArrayItem	dmlc-core\\include\\dmlc\\json.h	/^inline bool JSONReader::NextArrayItem() {$/;"	f	class:dmlc::JSONReader	typeref:typename:bool
NextArrayItem	nnvm\\include\\dmlc\\json.h	/^inline bool JSONReader::NextArrayItem() {$/;"	f	class:dmlc::JSONReader	typeref:typename:bool
NextChunk	dmlc-core\\src\\io\\cached_input_split.h	/^  virtual bool NextChunk(Blob *out_chunk) {$/;"	f	class:dmlc::io::CachedInputSplit	typeref:typename:bool
NextChunk	dmlc-core\\src\\io\\input_split_base.h	/^  virtual bool NextChunk(Blob *out_chunk) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:bool
NextChunk	dmlc-core\\src\\io\\single_file_split.h	/^  virtual bool NextChunk(Blob *out_chunk) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:bool
NextChunk	dmlc-core\\src\\io\\threaded_input_split.h	/^  virtual bool NextChunk(Blob *out_chunk) {$/;"	f	class:dmlc::io::ThreadedInputSplit	typeref:typename:bool
NextNonSpace	dmlc-core\\include\\dmlc\\json.h	/^inline int JSONReader::NextNonSpace() {$/;"	f	class:dmlc::JSONReader	typeref:typename:int
NextNonSpace	nnvm\\include\\dmlc\\json.h	/^inline int JSONReader::NextNonSpace() {$/;"	f	class:dmlc::JSONReader	typeref:typename:int
NextObjectItem	dmlc-core\\include\\dmlc\\json.h	/^inline bool JSONReader::NextObjectItem(std::string *out_key) {$/;"	f	class:dmlc::JSONReader	typeref:typename:bool
NextObjectItem	nnvm\\include\\dmlc\\json.h	/^inline bool JSONReader::NextObjectItem(std::string *out_key) {$/;"	f	class:dmlc::JSONReader	typeref:typename:bool
NextRecord	dmlc-core\\src\\io\\cached_input_split.h	/^  virtual bool NextRecord(Blob *out_rec) {$/;"	f	class:dmlc::io::CachedInputSplit	typeref:typename:bool
NextRecord	dmlc-core\\src\\io\\input_split_base.h	/^  virtual bool NextRecord(Blob *out_rec) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:bool
NextRecord	dmlc-core\\src\\io\\single_file_split.h	/^  virtual bool NextRecord(Blob *out_rec) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:bool
NextRecord	dmlc-core\\src\\io\\threaded_input_split.h	/^  virtual bool NextRecord(Blob *out_rec) {$/;"	f	class:dmlc::io::ThreadedInputSplit	typeref:typename:bool
NextRecord	dmlc-core\\src\\recordio.cc	/^bool RecordIOChunkReader::NextRecord(InputSplit::Blob *out_rec) {$/;"	f	class:dmlc::RecordIOChunkReader	typeref:typename:bool
NextRecord	dmlc-core\\src\\recordio.cc	/^bool RecordIOReader::NextRecord(std::string *out_rec) {$/;"	f	class:dmlc::RecordIOReader	typeref:typename:bool
NoRun	lua\\testes\\main.lua	/^local function NoRun (msg, p, ...)$/;"	f
Node	lua\\lobject.h	/^typedef union Node {$/;"	u
Node	lua\\lobject.h	/^} Node;$/;"	t	typeref:union:Node
Node	nnvm\\include\\nnvm\\graph.h	/^  struct Node {$/;"	s	class:nnvm::IndexedGraph
Node	nnvm\\include\\nnvm\\node.h	/^class Node {$/;"	c	namespace:nnvm
NodeAttrs	nnvm\\include\\nnvm\\node.h	/^struct NodeAttrs {$/;"	s	namespace:nnvm
NodeEntry	nnvm\\include\\nnvm\\graph.h	/^  struct NodeEntry {$/;"	s	class:nnvm::IndexedGraph
NodeEntry	nnvm\\include\\nnvm\\node.h	/^struct NodeEntry {$/;"	s	namespace:nnvm
NodeKey	lua\\lobject.h	/^  struct NodeKey {$/;"	s	union:Node
NodePtr	nnvm\\include\\nnvm\\node.h	/^using NodePtr = std::shared_ptr<Node>;$/;"	t	namespace:nnvm	typeref:typename:std::shared_ptr<Node>
NotImplemented	dmlc-core\\include\\dmlc\\threadediter.h	/^  inline static void NotImplemented(void) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:void
NumCol	dmlc-core\\src\\data\\basic_row_iter.h	/^  virtual size_t NumCol(void) const {$/;"	f	class:dmlc::data::BasicRowIter	typeref:typename:size_t
NumCol	dmlc-core\\src\\data\\disk_row_iter.h	/^  virtual size_t NumCol(void) const {$/;"	f	class:dmlc::data::DiskRowIter	typeref:typename:size_t
NumberHandler	dmlc-core\\include\\dmlc\\lua.h	/^struct NumberHandler {$/;"	s	namespace:dmlc::lua_stack
NumericHandler	dmlc-core\\include\\dmlc\\json.h	/^struct NumericHandler {$/;"	s	namespace:dmlc::json
NumericHandler	nnvm\\include\\dmlc\\json.h	/^struct NumericHandler {$/;"	s	namespace:dmlc::json
OBJ	Makefile	/^OBJ = $(patsubst %.cc, build\/%.o, $(SRC))$/;"	m
OBJ	dmlc-core\\Makefile	/^OBJ=line_split.o recordio_split.o input_split_base.o io.o local_filesys.o data.o recordio.o conf/;"	m
OFFSET_sBx	lua\\lopcodes.h	/^#define OFFSET_sBx	/;"	d
OFFSET_sC	lua\\lopcodes.h	/^#define OFFSET_sC	/;"	d
OFFSET_sJ	lua\\lopcodes.h	/^#define OFFSET_sJ	/;"	d
OPR_ADD	lua\\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	lua\\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_BAND	lua\\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BNOT	lua\\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_BOR	lua\\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BXOR	lua\\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_CONCAT	lua\\lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	lua\\lcode.h	/^  OPR_DIV,$/;"	e	enum:BinOpr
OPR_EQ	lua\\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_GE	lua\\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	lua\\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_IDIV	lua\\lcode.h	/^  OPR_IDIV,$/;"	e	enum:BinOpr
OPR_LE	lua\\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LEN	lua\\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	lua\\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_MINUS	lua\\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	lua\\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	lua\\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	lua\\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NOBINOPR	lua\\lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	lua\\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	lua\\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	lua\\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	lua\\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SHL	lua\\lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHR	lua\\lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SUB	lua\\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	lua\\lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := R(B) + R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_ADDI	lua\\lopcodes.h	/^OP_ADDI,\/*	A B sC	R(A) := R(B) + C				*\/$/;"	e	enum:__anon2da983320103
OP_ADDK	lua\\lopcodes.h	/^OP_ADDK,\/*	A B C	R(A) := R(B) + K(C)				*\/$/;"	e	enum:__anon2da983320103
OP_BAND	lua\\lopcodes.h	/^OP_BAND,\/*	A B C	R(A) := R(B) & R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_BANDK	lua\\lopcodes.h	/^OP_BANDK,\/*	A B C	R(A) := R(B) & K(C):integer			*\/$/;"	e	enum:__anon2da983320103
OP_BNOT	lua\\lopcodes.h	/^OP_BNOT,\/*	A B	R(A) := ~R(B)					*\/$/;"	e	enum:__anon2da983320103
OP_BOR	lua\\lopcodes.h	/^OP_BOR,\/*	A B C	R(A) := R(B) | R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_BORK	lua\\lopcodes.h	/^OP_BORK,\/*	A B C	R(A) := R(B) | K(C):integer			*\/$/;"	e	enum:__anon2da983320103
OP_BXOR	lua\\lopcodes.h	/^OP_BXOR,\/*	A B C	R(A) := R(B) ~ R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_BXORK	lua\\lopcodes.h	/^OP_BXORK,\/*	A B C	R(A) := R(B) ~ K(C):integer			*\/$/;"	e	enum:__anon2da983320103
OP_CALL	lua\\lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon2da983320103
OP_CLOSE	lua\\lopcodes.h	/^OP_CLOSE,\/*	A	close all upvalues >= R(A)			*\/$/;"	e	enum:__anon2da983320103
OP_CLOSURE	lua\\lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon2da983320103
OP_CONCAT	lua\\lopcodes.h	/^OP_CONCAT,\/*	A B  	R(A) := R(A).. ... ..R(A + B - 1)		*\/$/;"	e	enum:__anon2da983320103
OP_DIV	lua\\lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := R(B) \/ R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_DIVI	lua\\lopcodes.h	/^OP_DIVI,\/*	A B sC	R(A) := R(B) \/ C				*\/$/;"	e	enum:__anon2da983320103
OP_DIVK	lua\\lopcodes.h	/^OP_DIVK,\/*	A B C	R(A) := R(B) \/ K(C)				*\/$/;"	e	enum:__anon2da983320103
OP_EQ	lua\\lopcodes.h	/^OP_EQ,\/*	A B	if ((R(A) == R(B)) ~= k) then pc++		*\/$/;"	e	enum:__anon2da983320103
OP_EQI	lua\\lopcodes.h	/^OP_EQI,\/*	A sB	if ((R(A) == sB) ~= k) then pc++		*\/$/;"	e	enum:__anon2da983320103
OP_EQK	lua\\lopcodes.h	/^OP_EQK,\/*	A B	if ((R(A) == K(B)) ~= k) then pc++		*\/$/;"	e	enum:__anon2da983320103
OP_EXTRAARG	lua\\lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon2da983320103
OP_FORLOOP	lua\\lopcodes.h	/^OP_FORLOOP,\/*	A Bx	R(A)+=R(A+2);$/;"	e	enum:__anon2da983320103
OP_FORPREP	lua\\lopcodes.h	/^OP_FORPREP,\/*	A Bx	R(A)-=R(A+2); pc+=Bx				*\/$/;"	e	enum:__anon2da983320103
OP_GEI	lua\\lopcodes.h	/^OP_GEI,\/*	A sB	if ((R(A) >= sB) ~= k) then pc++		*\/$/;"	e	enum:__anon2da983320103
OP_GETFIELD	lua\\lopcodes.h	/^OP_GETFIELD,\/*	A B C	R(A) := R(B)[K(C):string]			*\/$/;"	e	enum:__anon2da983320103
OP_GETI	lua\\lopcodes.h	/^OP_GETI,\/*	A B C	R(A) := R(B)[C]					*\/$/;"	e	enum:__anon2da983320103
OP_GETTABLE	lua\\lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[R(C)]				*\/$/;"	e	enum:__anon2da983320103
OP_GETTABUP	lua\\lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][K(C):string]			*\/$/;"	e	enum:__anon2da983320103
OP_GETUPVAL	lua\\lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon2da983320103
OP_GTI	lua\\lopcodes.h	/^OP_GTI,\/*	A sB	if ((R(A) > sB) ~= k) then pc++			*\/$/;"	e	enum:__anon2da983320103
OP_IDIV	lua\\lopcodes.h	/^OP_IDIV,\/*	A B C	R(A) := R(B) \/\/ R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_IDIVI	lua\\lopcodes.h	/^OP_IDIVI,\/*	A B sC	R(A) := R(B) \/\/ C				*\/$/;"	e	enum:__anon2da983320103
OP_IDIVK	lua\\lopcodes.h	/^OP_IDIVK,\/*	A B C	R(A) := R(B) \/\/ K(C)				*\/$/;"	e	enum:__anon2da983320103
OP_JMP	lua\\lopcodes.h	/^OP_JMP,\/*	k sJ	pc += sJ  (k is used in code generation)	*\/$/;"	e	enum:__anon2da983320103
OP_LE	lua\\lopcodes.h	/^OP_LE,\/*	A B	if ((R(A) <= R(B)) ~= k) then pc++		*\/$/;"	e	enum:__anon2da983320103
OP_LEI	lua\\lopcodes.h	/^OP_LEI,\/*	A sB	if ((R(A) <= sB) ~= k) then pc++		*\/$/;"	e	enum:__anon2da983320103
OP_LEN	lua\\lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon2da983320103
OP_LOADBOOL	lua\\lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon2da983320103
OP_LOADF	lua\\lopcodes.h	/^OP_LOADF,\/*	A sBx	R(A) := (lua_Number)sBx				*\/$/;"	e	enum:__anon2da983320103
OP_LOADI	lua\\lopcodes.h	/^OP_LOADI,\/*	A sBx	R(A) := sBx					*\/$/;"	e	enum:__anon2da983320103
OP_LOADK	lua\\lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := K(Bx)					*\/$/;"	e	enum:__anon2da983320103
OP_LOADKX	lua\\lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := K(extra arg)				*\/$/;"	e	enum:__anon2da983320103
OP_LOADNIL	lua\\lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon2da983320103
OP_LT	lua\\lopcodes.h	/^OP_LT,\/*	A B	if ((R(A) <  R(B)) ~= k) then pc++		*\/$/;"	e	enum:__anon2da983320103
OP_LTI	lua\\lopcodes.h	/^OP_LTI,\/*	A sB	if ((R(A) < sB) ~= k) then pc++			*\/$/;"	e	enum:__anon2da983320103
OP_MOD	lua\\lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := R(B) % R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_MODI	lua\\lopcodes.h	/^OP_MODI,\/*	A B sC	R(A) := R(B) % C				*\/$/;"	e	enum:__anon2da983320103
OP_MODK	lua\\lopcodes.h	/^OP_MODK,\/*	A B C	R(A) := R(B) % K(C)				*\/$/;"	e	enum:__anon2da983320103
OP_MOVE	lua\\lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon2da983320103
OP_MUL	lua\\lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := R(B) * R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_MULI	lua\\lopcodes.h	/^OP_MULI,\/*	A B sC	R(A) := R(B) * C				*\/$/;"	e	enum:__anon2da983320103
OP_MULK	lua\\lopcodes.h	/^OP_MULK,\/*	A B C	R(A) := R(B) * K(C)				*\/$/;"	e	enum:__anon2da983320103
OP_NEWTABLE	lua\\lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon2da983320103
OP_NOT	lua\\lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon2da983320103
OP_POW	lua\\lopcodes.h	/^OP_POW,\/*	A B C	R(A) := R(B) ^ R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_POWI	lua\\lopcodes.h	/^OP_POWI,\/*	A B sC	R(A) := R(B) ^ C				*\/$/;"	e	enum:__anon2da983320103
OP_POWK	lua\\lopcodes.h	/^OP_POWK,\/*	A B C	R(A) := R(B) ^ K(C)				*\/$/;"	e	enum:__anon2da983320103
OP_RETURN	lua\\lopcodes.h	/^OP_RETURN,\/*	A B C	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon2da983320103
OP_RETURN0	lua\\lopcodes.h	/^OP_RETURN0,\/*	  	return 						*\/$/;"	e	enum:__anon2da983320103
OP_RETURN1	lua\\lopcodes.h	/^OP_RETURN1,\/*	A 	return R(A)					*\/$/;"	e	enum:__anon2da983320103
OP_SELF	lua\\lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C):string]	*\/$/;"	e	enum:__anon2da983320103
OP_SETFIELD	lua\\lopcodes.h	/^OP_SETFIELD,\/*	A B C	R(A)[K(B):string] := RK(C)			*\/$/;"	e	enum:__anon2da983320103
OP_SETI	lua\\lopcodes.h	/^OP_SETI,\/*	A B C	R(A)[B] := RK(C)				*\/$/;"	e	enum:__anon2da983320103
OP_SETLIST	lua\\lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon2da983320103
OP_SETTABLE	lua\\lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[R(B)] := RK(C)				*\/$/;"	e	enum:__anon2da983320103
OP_SETTABUP	lua\\lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][K(B):string] := RK(C)		*\/$/;"	e	enum:__anon2da983320103
OP_SETUPVAL	lua\\lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon2da983320103
OP_SHL	lua\\lopcodes.h	/^OP_SHL,\/*	A B C	R(A) := R(B) << R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_SHLI	lua\\lopcodes.h	/^OP_SHLI,\/*	A B sC	R(A) := C << R(B)				*\/$/;"	e	enum:__anon2da983320103
OP_SHR	lua\\lopcodes.h	/^OP_SHR,\/*	A B C	R(A) := R(B) >> R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_SHRI	lua\\lopcodes.h	/^OP_SHRI,\/*	A B sC	R(A) := R(B) >> C				*\/$/;"	e	enum:__anon2da983320103
OP_SUB	lua\\lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := R(B) - R(C)				*\/$/;"	e	enum:__anon2da983320103
OP_SUBI	lua\\lopcodes.h	/^OP_SUBI,\/*	A B sC	R(A) := R(B) - C				*\/$/;"	e	enum:__anon2da983320103
OP_SUBK	lua\\lopcodes.h	/^OP_SUBK,\/*	A B C	R(A) := R(B) - K(C)				*\/$/;"	e	enum:__anon2da983320103
OP_TAILCALL	lua\\lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon2da983320103
OP_TBC	lua\\lopcodes.h	/^OP_TBC,\/*	A	mark variable A "to be closed"			*\/$/;"	e	enum:__anon2da983320103
OP_TEST	lua\\lopcodes.h	/^OP_TEST,\/*	A 	if (not R(A) == k) then pc++			*\/$/;"	e	enum:__anon2da983320103
OP_TESTSET	lua\\lopcodes.h	/^OP_TESTSET,\/*	A B	if (not R(B) == k) then pc++ else R(A) := R(B)	*\/$/;"	e	enum:__anon2da983320103
OP_TFORCALL	lua\\lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+4), ... ,R(A+3+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon2da983320103
OP_TFORLOOP	lua\\lopcodes.h	/^OP_TFORLOOP,\/*	A Bx	if R(A+2) ~= nil then { R(A)=R(A+2); pc -= Bx }	*\/$/;"	e	enum:__anon2da983320103
OP_TFORPREP	lua\\lopcodes.h	/^OP_TFORPREP,\/*	A Bx	create upvalue for R(A + 3); pc+=Bx		*\/$/;"	e	enum:__anon2da983320103
OP_UNM	lua\\lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon2da983320103
OP_VARARG	lua\\lopcodes.h	/^OP_VARARG,\/*	A C  	R(A), R(A+1), ..., R(A+C-2) = vararg		*\/$/;"	e	enum:__anon2da983320103
OP_VARARGPREP	lua\\lopcodes.h	/^OP_VARARGPREP,\/*A 	(adjust vararg parameters)			*\/$/;"	e	enum:__anon2da983320103
Op	nnvm\\include\\nnvm\\op.h	/^class Op {$/;"	c	namespace:nnvm
Op	nnvm\\src\\core\\op.cc	/^Op::Op() {$/;"	f	class:nnvm::Op
OpCode	lua\\lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon2da983320103
OpGroup	nnvm\\include\\nnvm\\op.h	/^class OpGroup {$/;"	c	namespace:nnvm
OpHandle	nnvm\\include\\nnvm\\c_api.h	/^typedef void *OpHandle;$/;"	t	typeref:typename:void *
OpHandle	nnvm\\python\\nnvm\\_base.py	/^OpHandle = ctypes.c_void_p$/;"	v
OpManager	nnvm\\src\\core\\op.cc	/^struct OpManager {$/;"	s	namespace:nnvm	file:
OpMap	nnvm\\include\\nnvm\\op.h	/^class OpMap {$/;"	c	namespace:nnvm
OpMode	lua\\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx, isJ};  \/* basic instruction formats *\/$/;"	g
Open	dmlc-core\\src\\io\\azure_filesys.h	/^  virtual Stream *Open(const URI &path, const char* const flag, bool allow_null) {$/;"	f	class:dmlc::io::AzureFileSystem	typeref:typename:Stream *
Open	dmlc-core\\src\\io\\hdfs_filesys.cc	/^SeekStream *HDFSFileSystem::Open(const URI &path,$/;"	f	class:dmlc::io::HDFSFileSystem	typeref:typename:SeekStream *
Open	dmlc-core\\src\\io\\local_filesys.cc	/^SeekStream *LocalFileSystem::Open(const URI &path,$/;"	f	class:dmlc::io::LocalFileSystem	typeref:typename:SeekStream *
Open	dmlc-core\\src\\io\\s3_filesys.cc	/^Stream *S3FileSystem::Open(const URI &path, const char* const flag, bool allow_null) {$/;"	f	class:dmlc::io::S3FileSystem	typeref:typename:Stream *
OpenForRead	dmlc-core\\src\\io\\azure_filesys.h	/^  virtual SeekStream *OpenForRead(const URI &path, bool allow_null) {$/;"	f	class:dmlc::io::AzureFileSystem	typeref:typename:SeekStream *
OpenForRead	dmlc-core\\src\\io\\hdfs_filesys.cc	/^SeekStream *HDFSFileSystem::OpenForRead(const URI &path, bool allow_null) {$/;"	f	class:dmlc::io::HDFSFileSystem	typeref:typename:SeekStream *
OpenForRead	dmlc-core\\src\\io\\local_filesys.cc	/^SeekStream *LocalFileSystem::OpenForRead(const URI &path, bool allow_null) {$/;"	f	class:dmlc::io::LocalFileSystem	typeref:typename:SeekStream *
OpenForRead	dmlc-core\\src\\io\\s3_filesys.cc	/^SeekStream *S3FileSystem::OpenForRead(const URI &path, bool allow_null) {$/;"	f	class:dmlc::io::S3FileSystem	typeref:typename:SeekStream *
Operator Attribute for More Extensions	nnvm\\docs\\overview.md	/^## Operator Attribute for More Extensions$/;"	s
Operator overloading	torch7\\lib\\luaT\\README.md	/^### Operator overloading ###$/;"	S
Option	dmlc-core\\include\\dmlc\\lua.h	/^  enum Option {$/;"	g	class:dmlc::LuaState
OrderMutation	nnvm\\include\\nnvm\\pass_functions.h	/^inline Graph OrderMutation(Graph src) {$/;"	f	namespace:nnvm::pass	typeref:typename:Graph
OrderMutation	nnvm\\src\\pass\\order_mutation.cc	/^Graph OrderMutation(const Graph& src) {$/;"	f	namespace:nnvm::pass::__anonfe8061970110	typeref:typename:Graph
Other Questions?	torch7\\ROADMAP.md	/^## Other Questions?$/;"	s
OutBuf	dmlc-core\\include\\dmlc\\io.h	/^    explicit OutBuf(size_t buffer_size)$/;"	f	class:dmlc::ostream::OutBuf
OutBuf	dmlc-core\\include\\dmlc\\io.h	/^  class OutBuf : public std::streambuf {$/;"	c	class:dmlc::ostream
Overloaded operators	torch7\\doc\\maths.md	/^## Overloaded operators ##$/;"	s
PAPER	dmlc-core\\doc\\Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	dmlc-core\\doc\\Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	dmlc-core\\doc\\Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PAUSEADJ	lua\\lgc.c	/^#define PAUSEADJ	/;"	d	file:
PI	lua\\lmathlib.c	/^#define PI	/;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLUGIN_OBJ	nnvm\\Makefile	/^PLUGIN_OBJ =$/;"	m
PODHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct PODHandler {$/;"	s	namespace:dmlc::serializer
PODStringHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct PODStringHandler {$/;"	s	namespace:dmlc::serializer
PODVectorHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct PODVectorHandler {$/;"	s	namespace:dmlc::serializer
POS	lua\\lobject.c	/^#define POS	/;"	d	file:
POS_A	lua\\lopcodes.h	/^#define POS_A	/;"	d
POS_Ax	lua\\lopcodes.h	/^#define POS_Ax	/;"	d
POS_B	lua\\lopcodes.h	/^#define POS_B	/;"	d
POS_Bx	lua\\lopcodes.h	/^#define POS_Bx	/;"	d
POS_C	lua\\lopcodes.h	/^#define POS_C	/;"	d
POS_OP	lua\\lopcodes.h	/^#define POS_OP	/;"	d
POS_k	lua\\lopcodes.h	/^#define POS_k	/;"	d
POS_sJ	lua\\lopcodes.h	/^#define POS_sJ	/;"	d
PRAGMA	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define PRAGMA(/;"	d	file:
PRE	lua\\lobject.c	/^#define PRE	/;"	d	file:
PRINTBIT	lua\\lctype.h	/^#define PRINTBIT	/;"	d
PRun_	dmlc-core\\include\\dmlc\\lua.h	/^inline void LuaState::PRun_(F f) {$/;"	f	class:dmlc::LuaState	typeref:typename:void
PSTracker	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^class PSTracker(object):$/;"	c
PYTHON_SUFFIX	dmlc-core\\scripts\\lint.py	/^PYTHON_SUFFIX = set(['py'])$/;"	v
PYTHON_SUFFIX	dmlc-core\\scripts\\lint3.py	/^PYTHON_SUFFIX = set(['py'])$/;"	v
PadParam	src\\op_nn.cc	/^struct PadParam : public dmlc::Parameter<PadParam> {$/;"	s	namespace:tinyflow	file:
PadShape	src\\op_nn.cc	/^inline bool PadShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
Page	dmlc-core\\include\\dmlc\\memory.h	/^  struct Page {$/;"	s	class:dmlc::MemoryPool
Page	nnvm\\include\\dmlc\\memory.h	/^  struct Page {$/;"	s	class:dmlc::MemoryPool
PairHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct PairHandler {$/;"	s	namespace:dmlc::serializer
Param	dmlc-core\\test\\parameter_test.cc	/^struct Param : public dmlc::Parameter<Param> {$/;"	s	file:
Param	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  Param() {}$/;"	f	struct:Param	file:
Param	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  Param(int a, int b) : a(a), b(b) {}$/;"	f	struct:Param	file:
Param	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^struct Param {$/;"	s	file:
ParamError	dmlc-core\\include\\dmlc\\parameter.h	/^  explicit ParamError(const std::string &msg)$/;"	f	struct:dmlc::ParamError
ParamError	dmlc-core\\include\\dmlc\\parameter.h	/^struct ParamError : public dmlc::Error {$/;"	s	namespace:dmlc
ParamError	nnvm\\include\\dmlc\\parameter.h	/^  explicit ParamError(const std::string &msg)$/;"	f	struct:dmlc::ParamError
ParamError	nnvm\\include\\dmlc\\parameter.h	/^struct ParamError : public dmlc::Error {$/;"	s	namespace:dmlc
ParamFieldInfo	dmlc-core\\include\\dmlc\\parameter.h	/^struct ParamFieldInfo {$/;"	s	namespace:dmlc
ParamFieldInfo	nnvm\\include\\dmlc\\parameter.h	/^struct ParamFieldInfo {$/;"	s	namespace:dmlc
ParamInitOption	dmlc-core\\include\\dmlc\\parameter.h	/^enum ParamInitOption {$/;"	g	namespace:dmlc::parameter
ParamInitOption	nnvm\\include\\dmlc\\parameter.h	/^enum ParamInitOption {$/;"	g	namespace:dmlc::parameter
ParamManager	dmlc-core\\include\\dmlc\\parameter.h	/^class ParamManager {$/;"	c	namespace:dmlc::parameter
ParamManager	nnvm\\include\\dmlc\\parameter.h	/^class ParamManager {$/;"	c	namespace:dmlc::parameter
ParamManagerSingleton	dmlc-core\\include\\dmlc\\parameter.h	/^  explicit ParamManagerSingleton(const std::string &param_name) {$/;"	f	struct:dmlc::parameter::ParamManagerSingleton
ParamManagerSingleton	dmlc-core\\include\\dmlc\\parameter.h	/^struct ParamManagerSingleton {$/;"	s	namespace:dmlc::parameter
ParamManagerSingleton	nnvm\\include\\dmlc\\parameter.h	/^  explicit ParamManagerSingleton(const std::string &param_name) {$/;"	f	struct:dmlc::parameter::ParamManagerSingleton
ParamManagerSingleton	nnvm\\include\\dmlc\\parameter.h	/^struct ParamManagerSingleton {$/;"	s	namespace:dmlc::parameter
ParamParser	src\\op_util.h	/^inline void ParamParser(nnvm::NodeAttrs* attrs) {$/;"	f	namespace:tinyflow	typeref:typename:void
Parameter	dmlc-core\\include\\dmlc\\parameter.h	/^struct Parameter {$/;"	s	namespace:dmlc
Parameter	nnvm\\include\\dmlc\\parameter.h	/^struct Parameter {$/;"	s	namespace:dmlc
Parameter Structure for Machine Learning	dmlc-core\\doc\\parameter.md	/^Parameter Structure for Machine Learning$/;"	c
Parameters	dmlc-core\\tracker\\README.md	/^Parameters$/;"	s
Parent	dmlc-core\\include\\dmlc\\parameter.h	/^  typedef FieldEntryBase<FieldEntry<bool>, bool> Parent;$/;"	t	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntryBase<FieldEntry<bool>,bool>
Parent	dmlc-core\\include\\dmlc\\parameter.h	/^  typedef FieldEntryBase<FieldEntry<std::string>, std::string> Parent;$/;"	t	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntryBase<FieldEntry<std::string>,std::string>
Parent	dmlc-core\\include\\dmlc\\parameter.h	/^  typedef FieldEntryNumeric<FieldEntry<int>, int> Parent;$/;"	t	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntryNumeric<FieldEntry<int>,int>
Parent	nnvm\\include\\dmlc\\parameter.h	/^  typedef FieldEntryBase<FieldEntry<bool>, bool> Parent;$/;"	t	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntryBase<FieldEntry<bool>,bool>
Parent	nnvm\\include\\dmlc\\parameter.h	/^  typedef FieldEntryBase<FieldEntry<std::string>, std::string> Parent;$/;"	t	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntryBase<FieldEntry<std::string>,std::string>
Parent	nnvm\\include\\dmlc\\parameter.h	/^  typedef FieldEntryNumeric<FieldEntry<int>, int> Parent;$/;"	t	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntryNumeric<FieldEntry<int>,int>
ParseBlock	dmlc-core\\src\\data\\csv_parser.h	/^ParseBlock(char *begin,$/;"	f	class:dmlc::data::CSVParser	typeref:typename:void
ParseBlock	dmlc-core\\src\\data\\libsvm_parser.h	/^ParseBlock(char *begin,$/;"	f	class:dmlc::data::LibSVMParser	typeref:typename:void
ParseComments	dmlc-core\\src\\config.cc	/^  void ParseComments() {$/;"	f	class:dmlc::Tokenizer	typeref:typename:void	file:
ParseNext	dmlc-core\\src\\data\\parser.h	/^  virtual bool ParseNext(std::vector<RowBlockContainer<IndexType> > *data) {$/;"	f	class:dmlc::data::ThreadedParser	typeref:typename:bool
ParseNext	dmlc-core\\src\\data\\text_parser.h	/^  virtual bool ParseNext(std::vector<RowBlockContainer<IndexType> > *data) {$/;"	f	class:dmlc::data::TextParserBase	typeref:typename:bool
ParsePair	dmlc-core\\src\\data\\strtonum.h	/^inline int ParsePair(const char * begin, const char * end,$/;"	f	namespace:dmlc::data	typeref:typename:int
ParseState	dmlc-core\\src\\config.cc	/^  enum ParseState {$/;"	g	class:dmlc::Tokenizer	file:
ParseString	dmlc-core\\src\\config.cc	/^  void ParseString(string* tok) {$/;"	f	class:dmlc::Tokenizer	typeref:typename:void	file:
Parser	dmlc-core\\include\\dmlc\\data.h	/^class Parser : public DataIter<RowBlock<IndexType> > {$/;"	c	namespace:dmlc
ParserFactoryReg	dmlc-core\\include\\dmlc\\data.h	/^struct ParserFactoryReg$/;"	s	namespace:dmlc
ParserImpl	dmlc-core\\src\\data\\parser.h	/^  ParserImpl() : data_ptr_(0), data_end_(0) {}$/;"	f	class:dmlc::data::ParserImpl
ParserImpl	dmlc-core\\src\\data\\parser.h	/^class ParserImpl : public Parser<IndexType> {$/;"	c	namespace:dmlc::data
PassFunction	nnvm\\include\\nnvm\\pass.h	/^typedef std::function<Graph (Graph src)> PassFunction;$/;"	t	namespace:nnvm
PassFunctionReg	nnvm\\include\\nnvm\\pass.h	/^struct PassFunctionReg$/;"	s	namespace:nnvm
PeekChar	dmlc-core\\src\\config.cc	/^  char PeekChar() {$/;"	f	class:dmlc::Tokenizer	typeref:typename:char	file:
PeekNextNonSpace	dmlc-core\\include\\dmlc\\json.h	/^inline int JSONReader::PeekNextNonSpace() {$/;"	f	class:dmlc::JSONReader	typeref:typename:int
PeekNextNonSpace	nnvm\\include\\dmlc\\json.h	/^inline int JSONReader::PeekNextNonSpace() {$/;"	f	class:dmlc::JSONReader	typeref:typename:int
Performance	nnvm\\plugin\\nnvm-fusion\\README.md	/^## Performance$/;"	s
Pfunc	lua\\ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t	typeref:typename:void (*)(lua_State * L,void * ud)
PipeFile	torch7\\doc\\pipefile.md	/^# PipeFile #$/;"	c
PlaceDevice	nnvm\\include\\nnvm\\pass_functions.h	/^inline Graph PlaceDevice(Graph graph,$/;"	f	namespace:nnvm::pass	typeref:typename:Graph
PlaceDevice	nnvm\\src\\pass\\place_device.cc	/^Graph PlaceDevice(Graph src) {$/;"	f	namespace:nnvm::pass::__anon89c51c3f0110	typeref:typename:Graph
PlanMemory	nnvm\\src\\pass\\plan_memory.cc	/^Graph PlanMemory(Graph ret) {$/;"	f	namespace:nnvm::pass::__anon235b49ae0110	typeref:typename:Graph
Play with an Example	dmlc-core\\doc\\parameter.md	/^### Play with an Example$/;"	S
Pop	dmlc-core\\include\\dmlc\\concurrency.h	/^bool ConcurrentBlockingQueue<T, type>::Pop(T* rv) {$/;"	f	class:dmlc::ConcurrentBlockingQueue	typeref:typename:bool
PostOrderDFSVisit	nnvm\\include\\nnvm\\graph.h	/^void PostOrderDFSVisit(const std::vector<GNode>& heads,$/;"	f	namespace:nnvm	typeref:typename:void
Prefix	nnvm\\python\\nnvm\\name.py	/^class Prefix(NameManager):$/;"	c
Print	dmlc-core\\test\\registry_test.cc	/^  virtual void Print() {$/;"	f	struct:tree::AVLTree	typeref:typename:void	file:
Print	dmlc-core\\test\\registry_test.cc	/^  virtual void Print() {$/;"	f	struct:tree::BinaryTree	typeref:typename:void	file:
Print	nnvm\\src\\core\\symbolic.cc	/^void Symbol::Print(std::ostream &os) const {$/;"	f	class:nnvm::Symbol	typeref:typename:void
PrintDefaultValueString	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void PrintDefaultValueString(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintDefaultValueString	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void PrintDefaultValueString(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
PrintDefaultValueString	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void PrintDefaultValueString(std::ostream &os) const { \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintDefaultValueString	nnvm\\include\\dmlc\\parameter.h	/^  virtual void PrintDefaultValueString(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintDefaultValueString	nnvm\\include\\dmlc\\parameter.h	/^  virtual void PrintDefaultValueString(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
PrintDefaultValueString	nnvm\\include\\dmlc\\parameter.h	/^  virtual void PrintDefaultValueString(std::ostream &os) const { \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintDocString	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void PrintDocString(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
PrintDocString	nnvm\\include\\dmlc\\parameter.h	/^  inline void PrintDocString(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
PrintEnums	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void PrintEnums(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintEnums	nnvm\\include\\dmlc\\parameter.h	/^  inline void PrintEnums(std::ostream &os) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintInternalNode	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^void PrintInternalNode(const InternalNodePtr internal, int indent=0) {$/;"	f	namespace:nnvm::fusion::__anon0d7734b40110	typeref:typename:void
PrintValue	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void PrintValue(std::ostream &os, DType value) const { \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
PrintValue	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void PrintValue(std::ostream &os, bool value) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintValue	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void PrintValue(std::ostream &os, int value) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintValue	nnvm\\include\\dmlc\\parameter.h	/^  virtual void PrintValue(std::ostream &os, DType value) const { \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
PrintValue	nnvm\\include\\dmlc\\parameter.h	/^  virtual void PrintValue(std::ostream &os, bool value) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
PrintValue	nnvm\\include\\dmlc\\parameter.h	/^  virtual void PrintValue(std::ostream &os, int value) const {  \/\/ NOLINT(*)$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
ProdShape	nnvm\\include\\nnvm\\tuple.h	/^  inline index_t ProdShape(int dimstart, int dimend) const {$/;"	f	class:nnvm::TShape	typeref:typename:index_t
Producer	dmlc-core\\include\\dmlc\\threadediter.h	/^  class Producer {$/;"	c	class:dmlc::ThreadedIter
Protect	lua\\lvm.c	/^#define Protect(/;"	d	file:
ProtectNT	lua\\lvm.c	/^#define ProtectNT(/;"	d	file:
Proto	lua\\lobject.h	/^typedef struct Proto {$/;"	s
Proto	lua\\lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
Pull requests	torch7\\CONTRIBUTING.md	/^## Pull requests$/;"	s
Push	dmlc-core\\include\\dmlc\\concurrency.h	/^void ConcurrentBlockingQueue<T, type>::Push(E&& e, int priority) {$/;"	f	class:dmlc::ConcurrentBlockingQueue	typeref:typename:void
Push	dmlc-core\\include\\dmlc\\lua.h	/^  static inline void Push(lua_State* L, const ContainerType& v) {$/;"	f	struct:dmlc::lua_stack::MapHandler	typeref:typename:void
Push	dmlc-core\\include\\dmlc\\lua.h	/^  static inline void Push(lua_State* L, const LuaRef& v) {$/;"	f	struct:dmlc::lua_stack::Handler	typeref:typename:void
Push	dmlc-core\\include\\dmlc\\lua.h	/^  static inline void Push(lua_State* L, const T& v) {$/;"	f	struct:dmlc::lua_stack::NumberHandler	typeref:typename:void
Push	dmlc-core\\include\\dmlc\\lua.h	/^  static inline void Push(lua_State* L, const std::nullptr_t& v) {$/;"	f	struct:dmlc::lua_stack::Handler	typeref:typename:void
Push	dmlc-core\\include\\dmlc\\lua.h	/^  static inline void Push(lua_State* L, const std::string& v) {$/;"	f	struct:dmlc::lua_stack::Handler	typeref:typename:void
Push	dmlc-core\\src\\data\\row_block.h	/^  inline void Push(Row<I> row) {$/;"	f	struct:dmlc::data::RowBlockContainer	typeref:typename:void
Push	dmlc-core\\src\\data\\row_block.h	/^  inline void Push(RowBlock<I> batch) {$/;"	f	struct:dmlc::data::RowBlockContainer	typeref:typename:void
Push	src\\torch\\torch_util.h	/^  static inline void Push(lua_State* L, const nnvm::TShape& shape) {$/;"	f	struct:dmlc::lua_stack::Handler	typeref:typename:void
PushArg	dmlc-core\\include\\dmlc\\lua.h	/^struct PushArg {$/;"	s	namespace:dmlc::lua_stack
Querying elements	torch7\\doc\\tensor.md	/^## Querying elements ##$/;"	s
Querying the size and structure	torch7\\doc\\tensor.md	/^## Querying the size and structure ##$/;"	s
RA	lua\\lvm.c	/^#define RA(/;"	d	file:
RANLIB	lua\\makefile	/^RANLIB= ranlib$/;"	m
RANLIMIT	lua\\ltablib.c	/^#define RANLIMIT	/;"	d	file:
RB	lua\\lvm.c	/^#define RB(/;"	d	file:
RC	lua\\lvm.c	/^#define RC(/;"	d	file:
READ_WRITE_METHODS	torch7\\lib\\TH\\THDiskFile.c	/^#define READ_WRITE_METHODS(/;"	d	file:
READ_WRITE_METHODS	torch7\\lib\\TH\\THMemoryFile.c	/^#define READ_WRITE_METHODS(/;"	d	file:
REAL_SWAP	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define REAL_SWAP(/;"	d	file:
REAL_TO_LUA_NUMBER	torch7\\generic\\luaG.h	/^# define REAL_TO_LUA_NUMBER(/;"	d
REGISTER_TREE	dmlc-core\\test\\registry_test.cc	/^#define REGISTER_TREE(/;"	d	file:
RESERVED	lua\\llex.h	/^enum RESERVED {$/;"	g
RESERVEDSLOT	lua\\lbaselib.c	/^#define RESERVEDSLOT	/;"	d	file:
RETS	lua\\lobject.c	/^#define RETS	/;"	d	file:
RKC	lua\\lvm.c	/^#define RKC(/;"	d	file:
RM	lua\\makefile	/^RM= rm -f$/;"	m
RMCallbackHandler	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private class RMCallbackHandler implements AMRMClientAsync.CallbackHandler {$/;"	c	class:ApplicationMaster
RN	lua\\liolib.c	/^} RN;$/;"	t	typeref:struct:__anona099834f0108	file:
ROOTDIR	Makefile	/^ROOTDIR = $(CURDIR)$/;"	m
ROOTDIR	nnvm\\Makefile	/^ROOTDIR = $(CURDIR)$/;"	m
RTC	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^class RTC {$/;"	c	namespace:nnvm::fusion
RTC	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^RTC::RTC(const std::string& name, const std::string& kernel) {$/;"	f	class:nnvm::fusion::RTC
RTCGen	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^Graph RTCGen(Graph ret) {$/;"	f	namespace:nnvm::fusion::__anonddcb2e480110	typeref:typename:Graph
RTCMap	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^using RTCMap        = std::unordered_map<uint32_t, RTC>;$/;"	t	namespace:nnvm::fusion	typeref:typename:std::unordered_map<uint32_t,RTC>
RUN	lua\\testes\\main.lua	/^local function RUN (p, ...)$/;"	f
RabitTracker	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^class RabitTracker(object):$/;"	c
RanState	lua\\lmathlib.c	/^} RanState;$/;"	t	typeref:struct:__anon79b1c1a10108	file:
Rand64	lua\\lmathlib.c	/^#define Rand64	/;"	d	file:
Rand64	lua\\lmathlib.c	/^typedef struct Rand64 {$/;"	s	file:
Rand64	lua\\lmathlib.c	/^} Rand64;$/;"	t	typeref:struct:Rand64	file:
Random Numbers	torch7\\doc\\random.md	/^# Random Numbers #$/;"	c
Read	dmlc-core\\include\\dmlc\\io.h	/^inline bool Stream::Read(T *out_data) {$/;"	f	class:dmlc::Stream	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, ContainerType *array) {$/;"	f	struct:dmlc::json::ArrayHandler	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, ContainerType *map) {$/;"	f	struct:dmlc::json::MapHandler	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, T *data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, T *value) {$/;"	f	struct:dmlc::json::CommonJSONSerializer	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, ValueType *value) {$/;"	f	struct:dmlc::json::NumericHandler	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, any *data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, std::string *str) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONReader::Read(ValueType *out_value) {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
Read	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual size_t Read(void *ptr, size_t size) {$/;"	f	struct:dmlc::MemoryFixedSizeStream	typeref:typename:size_t
Read	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual size_t Read(void *ptr, size_t size) {$/;"	f	struct:dmlc::MemoryStringStream	typeref:typename:size_t
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, ContainerType *data) {$/;"	f	struct:dmlc::serializer::CollectionHandler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, ListType *data) {$/;"	f	struct:dmlc::serializer::ListHandler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, T *data) {$/;"	f	struct:dmlc::serializer::Handler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, T *data) {$/;"	f	struct:dmlc::serializer::IfThenElse	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, T *data) {$/;"	f	struct:dmlc::serializer::SaveLoadClassHandler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, T *dptr) {$/;"	f	struct:dmlc::serializer::PODHandler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, std::basic_string<T> *out_vec) {$/;"	f	struct:dmlc::serializer::PODStringHandler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, std::pair<TA, TB> *data) {$/;"	f	struct:dmlc::serializer::PairHandler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, std::vector<T> *out_vec) {$/;"	f	struct:dmlc::serializer::ComposeVectorHandler	typeref:typename:bool
Read	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static bool Read(Stream *strm, std::vector<T> *out_vec) {$/;"	f	struct:dmlc::serializer::PODVectorHandler	typeref:typename:bool
Read	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  virtual size_t Read(void *ptr, size_t size) {$/;"	f	class:dmlc::io::HDFSStream	typeref:typename:size_t	file:
Read	dmlc-core\\src\\io\\input_split_base.cc	/^size_t InputSplitBase::Read(void *ptr, size_t size) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:size_t
Read	dmlc-core\\src\\io\\local_filesys.cc	/^  virtual size_t Read(void *ptr, size_t size) {$/;"	f	class:dmlc::io::FileStream	typeref:typename:size_t	file:
Read	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual size_t Read(void *ptr, size_t size) {$/;"	f	class:dmlc::io::s3::WriteStream	typeref:typename:size_t	file:
Read	dmlc-core\\src\\io\\s3_filesys.cc	/^size_t CURLReadStreamBase::Read(void *ptr, size_t size) {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:size_t
Read	dmlc-core\\src\\io\\single_file_split.h	/^  virtual size_t Read(void *ptr, size_t size) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:size_t
Read	nnvm\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, ContainerType *array) {$/;"	f	struct:dmlc::json::ArrayHandler	typeref:typename:void
Read	nnvm\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, ContainerType *map) {$/;"	f	struct:dmlc::json::MapHandler	typeref:typename:void
Read	nnvm\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, T *data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Read	nnvm\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, T *value) {$/;"	f	struct:dmlc::json::CommonJSONSerializer	typeref:typename:void
Read	nnvm\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, ValueType *value) {$/;"	f	struct:dmlc::json::NumericHandler	typeref:typename:void
Read	nnvm\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, any *data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Read	nnvm\\include\\dmlc\\json.h	/^  inline static void Read(JSONReader *reader, std::string *str) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Read	nnvm\\include\\dmlc\\json.h	/^inline void JSONReader::Read(ValueType *out_value) {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
Read methods	torch7\\doc\\file.md	/^## Read methods ##$/;"	s
ReadAllFields	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONObjectReadHelper::ReadAllFields(JSONReader *reader) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
ReadAllFields	nnvm\\include\\dmlc\\json.h	/^inline void JSONObjectReadHelper::ReadAllFields(JSONReader *reader) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
ReadAny	dmlc-core\\include\\dmlc\\json.h	/^  inline static void ReadAny(JSONReader *reader, any* data) {$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:void
ReadAny	nnvm\\include\\dmlc\\json.h	/^  inline static void ReadAny(JSONReader *reader, any* data) {$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:void
ReadChunk	dmlc-core\\src\\io\\input_split_base.cc	/^bool InputSplitBase::ReadChunk(void *buf, size_t *size) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:bool
ReadChunk	dmlc-core\\src\\io\\single_file_split.h	/^  inline bool ReadChunk(void *buf, size_t *size) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:bool
ReadFunction	dmlc-core\\include\\dmlc\\json.h	/^  typedef void (*ReadFunction)(JSONReader *reader, void *addr);$/;"	t	class:dmlc::JSONObjectReadHelper	typeref:typename:void (*)(JSONReader * reader,void * addr)
ReadFunction	nnvm\\include\\dmlc\\json.h	/^  typedef void (*ReadFunction)(JSONReader *reader, void *addr);$/;"	t	class:dmlc::JSONObjectReadHelper	typeref:typename:void (*)(JSONReader * reader,void * addr)
ReadNumber	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONReader::ReadNumber(ValueType *out_value) {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
ReadNumber	nnvm\\include\\dmlc\\json.h	/^inline void JSONReader::ReadNumber(ValueType *out_value) {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
ReadStream	dmlc-core\\src\\io\\s3_filesys.cc	/^  ReadStream(const URI &path,$/;"	f	class:dmlc::io::s3::ReadStream	file:
ReadStream	dmlc-core\\src\\io\\s3_filesys.cc	/^class ReadStream : public CURLReadStreamBase {$/;"	c	namespace:dmlc::io::s3	file:
ReadString	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONReader::ReadString(std::string *out_str) {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
ReadString	nnvm\\include\\dmlc\\json.h	/^inline void JSONReader::ReadString(std::string *out_str) {$/;"	f	class:dmlc::JSONReader	typeref:typename:void
ReadStringStream	dmlc-core\\src\\io\\s3_filesys.cc	/^  explicit ReadStringStream(const std::string &data) {$/;"	f	struct:dmlc::io::s3::ReadStringStream	file:
ReadStringStream	dmlc-core\\src\\io\\s3_filesys.cc	/^struct ReadStringStream {$/;"	s	namespace:dmlc::io::s3	file:
ReaderFunction	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONObjectReadHelper::ReaderFunction(JSONReader *reader, void *addr) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
ReaderFunction	nnvm\\include\\dmlc\\json.h	/^inline void JSONObjectReadHelper::ReaderFunction(JSONReader *reader, void *addr) {$/;"	f	class:dmlc::JSONObjectReadHelper	typeref:typename:void
Real	torch7\\lib\\TH\\THGenerateByteType.h	/^#define Real /;"	d
Real	torch7\\lib\\TH\\THGenerateCharType.h	/^#define Real /;"	d
Real	torch7\\lib\\TH\\THGenerateDoubleType.h	/^#define Real /;"	d
Real	torch7\\lib\\TH\\THGenerateFloatType.h	/^#define Real /;"	d
Real	torch7\\lib\\TH\\THGenerateHalfType.h	/^#define Real /;"	d
Real	torch7\\lib\\TH\\THGenerateIntType.h	/^#define Real /;"	d
Real	torch7\\lib\\TH\\THGenerateLongType.h	/^#define Real /;"	d
Real	torch7\\lib\\TH\\THGenerateShortType.h	/^#define Real /;"	d
RecordIOChunkReader	dmlc-core\\include\\dmlc\\recordio.h	/^class RecordIOChunkReader {$/;"	c	namespace:dmlc
RecordIOChunkReader	dmlc-core\\src\\recordio.cc	/^RecordIOChunkReader::RecordIOChunkReader(InputSplit::Blob chunk,$/;"	f	class:dmlc::RecordIOChunkReader
RecordIOReader	dmlc-core\\include\\dmlc\\recordio.h	/^  explicit RecordIOReader(Stream *stream)$/;"	f	class:dmlc::RecordIOReader
RecordIOReader	dmlc-core\\include\\dmlc\\recordio.h	/^class RecordIOReader {$/;"	c	namespace:dmlc
RecordIOSplitter	dmlc-core\\src\\io\\recordio_split.h	/^  RecordIOSplitter(FileSystem *fs,$/;"	f	class:dmlc::io::RecordIOSplitter
RecordIOSplitter	dmlc-core\\src\\io\\recordio_split.h	/^class RecordIOSplitter : public InputSplitBase {$/;"	c	namespace:dmlc::io
RecordIOWriter	dmlc-core\\include\\dmlc\\recordio.h	/^  explicit RecordIOWriter(Stream *stream)$/;"	f	class:dmlc::RecordIOWriter
RecordIOWriter	dmlc-core\\include\\dmlc\\recordio.h	/^class RecordIOWriter {$/;"	c	namespace:dmlc
Recycle	dmlc-core\\include\\dmlc\\threadediter.h	/^inline void ThreadedIter<DType>::Recycle(DType **inout_dptr) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:void
ReduceParam	src\\op_tensor.cc	/^struct ReduceParam : public dmlc::Parameter<ReduceParam> {$/;"	s	namespace:tinyflow	file:
ReduceShape	src\\op_tensor.cc	/^inline bool ReduceShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
RefBlock	dmlc-core\\include\\dmlc\\memory.h	/^  struct RefBlock {$/;"	s	struct:dmlc::ThreadlocalSharedPtr
RefBlock	nnvm\\include\\dmlc\\memory.h	/^  struct RefBlock {$/;"	s	struct:dmlc::ThreadlocalSharedPtr
Reference counting	torch7\\doc\\tensor.md	/^## Reference counting ##$/;"	s
Reference counting methods	torch7\\doc\\storage.md	/^## Reference counting methods ##$/;"	s
Referencing a tensor to an existing tensor or chunk of memory	torch7\\doc\\tensor.md	/^## Referencing a tensor to an existing tensor or chunk of memory ##$/;"	s
RegisterDelete	dmlc-core\\include\\dmlc\\thread_local.h	/^  void RegisterDelete(T *str) {$/;"	f	class:dmlc::ThreadLocalStore	typeref:typename:void
RegisterDelete	nnvm\\include\\dmlc\\thread_local.h	/^  void RegisterDelete(T *str) {$/;"	f	class:dmlc::ThreadLocalStore	typeref:typename:void
Registry	dmlc-core\\include\\dmlc\\registry.h	/^  Registry() {}$/;"	f	class:dmlc::Registry
Registry	dmlc-core\\include\\dmlc\\registry.h	/^class Registry {$/;"	c	namespace:dmlc
Registry	nnvm\\include\\dmlc\\registry.h	/^  Registry() {}$/;"	f	class:dmlc::Registry
Registry	nnvm\\include\\dmlc\\registry.h	/^class Registry {$/;"	c	namespace:dmlc
Relation to LLVM	nnvm\\docs\\overview.md	/^## Relation to LLVM$/;"	s
Release	nnvm\\src\\pass\\plan_memory.cc	/^  void Release(StorageID id, uint32_t node_id) {$/;"	f	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:void	file:
Remap	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^void Remap(Graph& g, std::unordered_map<const Node*, NodePtr>& m_mirror) {$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:void
RemoveBeginSlash	dmlc-core\\src\\io\\s3_filesys.cc	/^inline const char *RemoveBeginSlash(const std::string &name) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:const char *
Request	nnvm\\src\\pass\\plan_memory.cc	/^  StorageID Request(int dev_id, int dtype, TShape shape, uint32_t node_id) {$/;"	f	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:StorageID	file:
ResetNamenode	dmlc-core\\src\\io\\hdfs_filesys.cc	/^void HDFSFileSystem::ResetNamenode(const std::string &namenode) {$/;"	f	class:dmlc::io::HDFSFileSystem	typeref:typename:void
ResetPartition	dmlc-core\\src\\io\\cached_input_split.h	/^  virtual void ResetPartition(unsigned part_index, unsigned num_parts) {$/;"	f	class:dmlc::io::CachedInputSplit	typeref:typename:void
ResetPartition	dmlc-core\\src\\io\\input_split_base.cc	/^void InputSplitBase::ResetPartition(unsigned rank,$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:void
ResetPartition	dmlc-core\\src\\io\\single_file_split.h	/^  virtual void ResetPartition(unsigned part_index, unsigned num_parts) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:void
ResetSpace	src\\session.cc	/^  inline void ResetSpace(TShape shape, int dev_mask = kCPU, int dtype = 0) {$/;"	f	struct:tinyflow::VarState	typeref:typename:void	file:
ResetStorage	src\\torch\\torch_util.h	/^  void ResetStorage(LuaRef tensor,$/;"	f	class:tinyflow::TorchState	typeref:typename:void
Resizing	torch7\\doc\\tensor.md	/^## Resizing ##$/;"	s
Row	dmlc-core\\include\\dmlc\\data.h	/^class Row {$/;"	c	namespace:dmlc
RowBlock	dmlc-core\\include\\dmlc\\data.h	/^struct RowBlock {$/;"	s	namespace:dmlc
RowBlockContainer	dmlc-core\\src\\data\\row_block.h	/^  RowBlockContainer(void) {$/;"	f	struct:dmlc::data::RowBlockContainer
RowBlockContainer	dmlc-core\\src\\data\\row_block.h	/^struct RowBlockContainer {$/;"	s	namespace:dmlc::data
RowBlockIter	dmlc-core\\include\\dmlc\\data.h	/^class RowBlockIter : public DataIter<RowBlock<IndexType> > {$/;"	c	namespace:dmlc
Run	dmlc-core\\src\\io\\s3_filesys.cc	/^void WriteStream::Run(const std::string &method,$/;"	f	class:dmlc::io::s3::WriteStream	typeref:typename:void
Run	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^void RTC::Run(std::vector<void*> const& input,$/;"	f	class:nnvm::fusion::RTC	typeref:typename:void
Run	src\\session.cc	/^TorchExecutor::Run(const std::unordered_map<std::string, TBlob>& inputs) {$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:const std::vector<TBlob> &
Run	src\\session.cc	/^const std::vector<TBlob>& TorchSession::Run($/;"	f	class:tinyflow::TorchSession	typeref:typename:const std::vector<TBlob> &
RunInit	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void RunInit(void *head,$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
RunInit	nnvm\\include\\dmlc\\parameter.h	/^  inline void RunInit(void *head,$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
S3FileSystem	dmlc-core\\src\\io\\s3_filesys.cc	/^S3FileSystem::S3FileSystem() {$/;"	f	class:dmlc::io::S3FileSystem
S3FileSystem	dmlc-core\\src\\io\\s3_filesys.h	/^class S3FileSystem : public FileSystem {$/;"	c	namespace:dmlc::io
SDot	dmlc-core\\include\\dmlc\\data.h	/^  inline V SDot(const V *weight, size_t size) const {$/;"	f	class:dmlc::Row	typeref:typename:V
SETARG_A	lua\\lopcodes.h	/^#define SETARG_A(/;"	d
SETARG_Ax	lua\\lopcodes.h	/^#define SETARG_Ax(/;"	d
SETARG_B	lua\\lopcodes.h	/^#define SETARG_B(/;"	d
SETARG_Bx	lua\\lopcodes.h	/^#define SETARG_Bx(/;"	d
SETARG_C	lua\\lopcodes.h	/^#define SETARG_C(/;"	d
SETARG_k	lua\\lopcodes.h	/^#define SETARG_k(/;"	d
SETARG_sBx	lua\\lopcodes.h	/^#define SETARG_sBx(/;"	d
SETARG_sJ	lua\\lopcodes.h	/^#define SETARG_sJ(/;"	d
SET_OPCODE	lua\\lopcodes.h	/^#define SET_OPCODE(/;"	d
SHAPE_ASSIGN	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^#define SHAPE_ASSIGN(/;"	d	file:
SHAPE_ASSIGN	src\\op_util.h	/^#define SHAPE_ASSIGN(/;"	d
SIMDExtension_DEFAULT	torch7\\lib\\TH\\generic\\simd\\simd.h	/^  SIMDExtension_DEFAULT = 0x0$/;"	e	enum:SIMDExtensions
SIMDExtension_NEON	torch7\\lib\\TH\\generic\\simd\\simd.h	/^  SIMDExtension_NEON    = 0x1,$/;"	e	enum:SIMDExtensions
SIMDExtensions	torch7\\lib\\TH\\generic\\simd\\simd.h	/^enum SIMDExtensions$/;"	g
SIMULATE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIZE	bin\\CMakeFiles\\CheckTypeSize\\SIZE_OF_VOIDP.c	/^#define SIZE /;"	d	file:
SIZELENMOD	lua\\lstrlib.c	/^#define SIZELENMOD	/;"	d	file:
SIZETIMEFMT	lua\\loslib.c	/^#define SIZETIMEFMT	/;"	d	file:
SIZE_A	lua\\lopcodes.h	/^#define SIZE_A	/;"	d
SIZE_Ax	lua\\lopcodes.h	/^#define SIZE_Ax	/;"	d
SIZE_B	lua\\lopcodes.h	/^#define SIZE_B	/;"	d
SIZE_Bx	lua\\lopcodes.h	/^#define SIZE_Bx	/;"	d
SIZE_C	lua\\lopcodes.h	/^#define SIZE_C	/;"	d
SIZE_OP	lua\\lopcodes.h	/^#define SIZE_OP	/;"	d
SIZE_sJ	lua\\lopcodes.h	/^#define SIZE_sJ	/;"	d
SPACEBIT	lua\\lctype.h	/^#define SPACEBIT	/;"	d
SPACECHARS	lua\\lbaselib.c	/^#define SPACECHARS	/;"	d	file:
SPECIALS	lua\\lstrlib.c	/^#define SPECIALS	/;"	d	file:
SPHINXBUILD	dmlc-core\\doc\\Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	dmlc-core\\doc\\Makefile	/^SPHINXOPTS    =$/;"	m
SParser	lua\\ldo.c	/^struct SParser {  \/* data to 'f_parser' *\/$/;"	s	file:
SRC	Makefile	/^SRC = $(wildcard src\/*.cc src\/*\/*.cc src\/*\/*\/*.cc)$/;"	m
SRC	nnvm\\Makefile	/^SRC = $(wildcard src\/*.cc src\/*\/*.cc)$/;"	m
STORE_SUMX	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUMX(/;"	d
STORE_SUM_1	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUM_1(/;"	d
STORE_SUM_2	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUM_2(/;"	d
STORE_SUM_4	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUM_4(/;"	d
STORE_SUM_5	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUM_5(/;"	d
STORE_SUM_6	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUM_6(/;"	d
STORE_SUM_7	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUM_7(/;"	d
STORE_SUM_8	torch7\\lib\\TH\\generic\\simd\\common_simd.h	/^#define STORE_SUM_8(/;"	d
STRCACHE_M	lua\\llimits.h	/^#define STRCACHE_M	/;"	d
STRCACHE_M	lua\\ltests.h	/^#define STRCACHE_M	/;"	d
STRCACHE_N	lua\\llimits.h	/^#define STRCACHE_N	/;"	d
STRCACHE_N	lua\\ltests.h	/^#define STRCACHE_N	/;"	d
STRINGIFY	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
SWAP	torch7\\lib\\TH\\generic\\THStorage.c	/^#define SWAP(/;"	d	file:
SZINT	lua\\lstrlib.c	/^#define SZINT	/;"	d	file:
SameLuaState	dmlc-core\\include\\dmlc\\lua.h	/^  inline bool SameLuaState(lua_State *L) const {$/;"	f	class:dmlc::LuaState	typeref:typename:bool
SameShape	nnvm\\example\\src\\operator.cc	/^inline bool SameShape(const NodeAttrs& attrs,$/;"	f	namespace:myproject	typeref:typename:bool
SameShape	src\\op_util.h	/^inline bool SameShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
SameType	nnvm\\src\\pass\\infer_shape_type.cc	/^inline bool SameType(const NodeAttrs& attrs,$/;"	f	namespace:nnvm::pass::__anon305116100110	typeref:typename:bool
Save	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void Save(dmlc::JSONWriter *writer) const {$/;"	f	struct:dmlc::Parameter	typeref:typename:void
Save	dmlc-core\\src\\data\\row_block.h	/^RowBlockContainer<IndexType>::Save(Stream *fo) const {$/;"	f	class:dmlc::data::RowBlockContainer	typeref:typename:void
Save	dmlc-core\\test\\unittest\\unittest_json.cc	/^  inline void Save(dmlc::JSONWriter *writer) const {$/;"	f	class:json::MyClass	typeref:typename:void	file:
Save	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  inline void Save(dmlc::Stream *strm) const {$/;"	f	class:MyClass	typeref:typename:void	file:
Save	nnvm\\include\\dmlc\\parameter.h	/^  inline void Save(dmlc::JSONWriter *writer) const {$/;"	f	struct:dmlc::Parameter	typeref:typename:void
Save	nnvm\\include\\nnvm\\tuple.h	/^  inline void Save(TStream *strm) const {$/;"	f	class:nnvm::TShape	typeref:typename:void
Save	nnvm\\include\\nnvm\\tuple.h	/^  inline void Save(dmlc::JSONWriter* writer) const {$/;"	f	class:nnvm::Tuple	typeref:typename:void
Save	nnvm\\src\\pass\\saveload_json.cc	/^    void Save(dmlc::JSONWriter *writer) const {$/;"	f	struct:nnvm::pass::__anonc309bbd30110::JSONNode::Entry	typeref:typename:void	file:
Save	nnvm\\src\\pass\\saveload_json.cc	/^  void Save(dmlc::JSONWriter *writer) const {$/;"	f	struct:nnvm::pass::__anonc309bbd30110::JSONGraph	typeref:typename:void	file:
Save	nnvm\\src\\pass\\saveload_json.cc	/^  void Save(dmlc::JSONWriter *writer) const {$/;"	f	struct:nnvm::pass::__anonc309bbd30110::JSONNode	typeref:typename:void	file:
SaveJSON	nnvm\\include\\nnvm\\pass_functions.h	/^inline std::string SaveJSON(Graph graph) {$/;"	f	namespace:nnvm::pass	typeref:typename:std::string
SaveJSON	nnvm\\src\\pass\\saveload_json.cc	/^Graph SaveJSON(Graph src) {$/;"	f	namespace:nnvm::pass::__anonc309bbd30110	typeref:typename:Graph
SaveLoadClassHandler	dmlc-core\\include\\dmlc\\serializer.h	/^struct SaveLoadClassHandler {$/;"	s	namespace:dmlc::serializer
ScalarShape	src\\op_util.h	/^inline bool ScalarShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
Search	torch7\\doc\\tensor.md	/^## Search ##$/;"	s
SecondParam	dmlc-core\\test\\parameter_test.cc	/^struct SecondParam : public dmlc::Parameter<SecondParam> {$/;"	s	file:
Seed Handling	torch7\\doc\\random.md	/^## Seed Handling ##$/;"	s
Seek	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual void Seek(size_t pos) {$/;"	f	struct:dmlc::MemoryFixedSizeStream	typeref:typename:void
Seek	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual void Seek(size_t pos) {$/;"	f	struct:dmlc::MemoryStringStream	typeref:typename:void
Seek	dmlc-core\\include\\dmlc\\recordio.h	/^  inline void Seek(size_t pos) {$/;"	f	class:dmlc::RecordIOReader	typeref:typename:void
Seek	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  virtual void Seek(size_t pos) {$/;"	f	class:dmlc::io::HDFSStream	typeref:typename:void	file:
Seek	dmlc-core\\src\\io\\local_filesys.cc	/^  virtual void Seek(size_t pos) {$/;"	f	class:dmlc::io::FileStream	typeref:typename:void	file:
Seek	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual void Seek(size_t pos) {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:void	file:
SeekRecordBegin	dmlc-core\\src\\io\\line_split.cc	/^size_t LineSplitter::SeekRecordBegin(Stream *fi) {$/;"	f	class:dmlc::io::LineSplitter	typeref:typename:size_t
SeekRecordBegin	dmlc-core\\src\\io\\recordio_split.cc	/^size_t RecordIOSplitter::SeekRecordBegin(Stream *fi) {$/;"	f	class:dmlc::io::RecordIOSplitter	typeref:typename:size_t
SeekStream	dmlc-core\\include\\dmlc\\io.h	/^class SeekStream: public Stream {$/;"	c	namespace:dmlc
SemInfo	lua\\llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon59ab1eae010a
Serializable	dmlc-core\\include\\dmlc\\io.h	/^class Serializable {$/;"	c	namespace:dmlc
Serialization	torch7\\doc\\serialization.md	/^# Serialization #$/;"	c
Serialization methods	torch7\\doc\\file.md	/^## Serialization methods ##$/;"	s
Serialization of Parameters	dmlc-core\\doc\\parameter.md	/^### Serialization of Parameters$/;"	S
Session	include\\tinyflow\\base.h	/^class Session {$/;"	c	namespace:tinyflow
Session	python\\tinyflow\\_session.py	/^class Session(object):$/;"	c
SessionHandle	include\\tinyflow\\c_api.h	/^typedef void* SessionHandle;$/;"	t	typeref:typename:void *
SessionHandle	python\\tinyflow\\_session.py	/^SessionHandle = _ctypes.c_void_p$/;"	v
Set	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void Set(void *head, const std::string &value) const {$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
Set	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void Set(void *head, const std::string &value) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
Set	lua\\testes\\events.lua	/^local function Set(x)$/;"	f
Set	nnvm\\include\\dmlc\\parameter.h	/^  virtual void Set(void *head, const std::string &value) const {$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:void
Set	nnvm\\include\\dmlc\\parameter.h	/^  virtual void Set(void *head, const std::string &value) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
Set the Parameters	dmlc-core\\doc\\parameter.md	/^### Set the Parameters$/;"	S
SetAttrs	nnvm\\src\\core\\symbolic.cc	/^void Symbol::SetAttrs(const std::vector<std::pair<std::string, std::string> >& attrs) {$/;"	f	class:nnvm::Symbol	typeref:typename:void
SetByPopStack_	dmlc-core\\include\\dmlc\\lua.h	/^inline void LuaRef::SetByPopStack_(LuaState* s) {$/;"	f	class:dmlc::LuaRef	typeref:typename:void
SetCredentials	dmlc-core\\src\\io\\s3_filesys.cc	/^void S3FileSystem::SetCredentials(const std::string& aws_access_id,$/;"	f	class:dmlc::io::S3FileSystem	typeref:typename:void
SetDefault	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual void SetDefault(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
SetDefault	nnvm\\include\\dmlc\\parameter.h	/^  virtual void SetDefault(void *head) const {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:void
SetDim	nnvm\\include\\nnvm\\tuple.h	/^  inline void SetDim(index_t dim) {$/;"	f	class:nnvm::Tuple	typeref:typename:void
SetField	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef& LuaRef::SetField(const std::string& key, const T& value) {  \/\/ NOLINT(*)$/;"	f	class:dmlc::LuaRef	typeref:typename:LuaRef &
SetGlobalField	dmlc-core\\include\\dmlc\\lua.h	/^inline void LuaState::SetGlobalField($/;"	f	class:dmlc::LuaState	typeref:typename:void
SetParam	dmlc-core\\include\\dmlc\\config.h	/^void Config::SetParam(const std::string& key, const T& value, bool is_string) {$/;"	f	class:dmlc::Config	typeref:typename:void
Setup	src\\session.cc	/^void TorchExecutor::Setup(const std::unordered_map<std::string, TBlob>& inputs) {$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:void
SetupAuxiliaryMembers	src\\session.cc	/^void TorchExecutor::SetupAuxiliaryMembers() {$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:void
SetupFusion	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^bool SetupFusion(Graph& g, NodePtr node,$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:bool
SetupOpExecs	src\\session.cc	/^void TorchExecutor::SetupOpExecs() {$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:void
SetupShapeDType	src\\session.cc	/^void TorchExecutor::SetupShapeDType($/;"	f	class:tinyflow::TorchExecutor	typeref:typename:void
SetupStorage	src\\session.cc	/^void TorchExecutor::SetupStorage() {$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:void
ShapeVector	nnvm\\include\\nnvm\\graph_attr_types.h	/^using ShapeVector = std::vector<TShape>;$/;"	t	namespace:nnvm	typeref:typename:std::vector<TShape>
Sign	dmlc-core\\src\\io\\s3_filesys.cc	/^static std::string Sign(const std::string &key, const std::string &content) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:std::string	file:
Sign	dmlc-core\\src\\io\\s3_filesys.cc	/^static std::string Sign(const std::string &key,$/;"	f	namespace:dmlc::io::s3	typeref:typename:std::string	file:
Signal	dmlc-core\\include\\dmlc\\threadediter.h	/^  enum Signal {$/;"	g	class:dmlc::ThreadedIter
SignalForKill	dmlc-core\\include\\dmlc\\concurrency.h	/^void ConcurrentBlockingQueue<T, type>::SignalForKill() {$/;"	f	class:dmlc::ConcurrentBlockingQueue	typeref:typename:void
SingleFileSplit	dmlc-core\\src\\io\\single_file_split.h	/^  explicit SingleFileSplit(const char *fname)$/;"	f	class:dmlc::io::SingleFileSplit
SingleFileSplit	dmlc-core\\src\\io\\single_file_split.h	/^class SingleFileSplit : public InputSplit {$/;"	c	namespace:dmlc::io
Singleton	dmlc-core\\include\\dmlc\\thread_local.h	/^  static ThreadLocalStore<T> *Singleton() {$/;"	f	class:dmlc::ThreadLocalStore	typeref:typename:ThreadLocalStore<T> *
Singleton	nnvm\\include\\dmlc\\thread_local.h	/^  static ThreadLocalStore<T> *Singleton() {$/;"	f	class:dmlc::ThreadLocalStore	typeref:typename:ThreadLocalStore<T> *
Size	dmlc-core\\include\\dmlc\\concurrency.h	/^size_t ConcurrentBlockingQueue<T, type>::Size() {$/;"	f	class:dmlc::ConcurrentBlockingQueue	typeref:typename:size_t
Size	dmlc-core\\src\\data\\row_block.h	/^  inline size_t Size(void) const {$/;"	f	struct:dmlc::data::RowBlockContainer	typeref:typename:size_t
Size	nnvm\\include\\nnvm\\tuple.h	/^  inline size_t Size() const {$/;"	f	class:nnvm::TShape	typeref:typename:size_t
SlaveEntry	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^class SlaveEntry(object):$/;"	c
Slice	dmlc-core\\include\\dmlc\\data.h	/^  inline RowBlock Slice(size_t begin, size_t end) const {$/;"	f	struct:dmlc::RowBlock	typeref:typename:RowBlock
Spinlock	dmlc-core\\include\\dmlc\\concurrency.h	/^  Spinlock() {$/;"	f	class:dmlc::Spinlock
Spinlock	dmlc-core\\include\\dmlc\\concurrency.h	/^class Spinlock {$/;"	c	namespace:dmlc
Split	dmlc-core\\include\\dmlc\\common.h	/^inline std::vector<std::string> Split(const std::string& s, char delim) {$/;"	f	namespace:dmlc	typeref:typename:std::vector<std::string>
StackReset	dmlc-core\\include\\dmlc\\lua.h	/^struct LuaState::StackReset {$/;"	s	class:dmlc::LuaState
StackValue	lua\\lobject.h	/^typedef union StackValue {$/;"	u
StackValue	lua\\lobject.h	/^} StackValue;$/;"	t	typeref:union:StackValue
Standard C types	cwrap\\doc\\argumenttypes.md	/^### Standard C types ###$/;"	S
StkId	lua\\lobject.h	/^typedef StackValue *StkId;  \/* index to stack elements *\/$/;"	t	typeref:typename:StackValue *
Storage	torch7\\doc\\storage.md	/^# Storage #$/;"	c
Storage.__tostring__	torch7\\Tensor.lua	/^function Storage.__tostring__(self)$/;"	f
StorageEntry	nnvm\\src\\pass\\plan_memory.cc	/^  struct StorageEntry {$/;"	s	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	file:
StorageID	nnvm\\src\\pass\\plan_memory.cc	/^  using StorageID = int;$/;"	t	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:int	file:
StorageVector	nnvm\\include\\nnvm\\graph_attr_types.h	/^using StorageVector = std::vector<int>;$/;"	t	namespace:nnvm	typeref:typename:std::vector<int>
Storage__printformat	torch7\\Tensor.lua	/^local function Storage__printformat(self)$/;"	f
Store	dmlc-core\\include\\dmlc\\memory.h	/^    typedef ThreadLocalStore<MemoryPool<sizeof(T), alignof(T)> > Store;$/;"	t	function:dmlc::ThreadlocalAllocator::allocate
Store	dmlc-core\\include\\dmlc\\memory.h	/^    typedef ThreadLocalStore<MemoryPool<sizeof(T), alignof(T)> > Store;$/;"	t	function:dmlc::ThreadlocalAllocator::deallocate
Store	nnvm\\include\\dmlc\\memory.h	/^    typedef ThreadLocalStore<MemoryPool<sizeof(T), alignof(T)> > Store;$/;"	t	function:dmlc::ThreadlocalAllocator::allocate
Store	nnvm\\include\\dmlc\\memory.h	/^    typedef ThreadLocalStore<MemoryPool<sizeof(T), alignof(T)> > Store;$/;"	t	function:dmlc::ThreadlocalAllocator::deallocate
Stories and Design Goals	nnvm\\docs\\overview.md	/^## Stories and Design Goals$/;"	s
Str2T	dmlc-core\\src\\data\\strtonum.h	/^class Str2T {$/;"	c	namespace:dmlc::data
Str2T	dmlc-core\\src\\data\\strtonum.h	/^class Str2T<float> {$/;"	c	namespace:dmlc::data
Str2T	dmlc-core\\src\\data\\strtonum.h	/^class Str2T<int32_t> {$/;"	c	namespace:dmlc::data
Str2T	dmlc-core\\src\\data\\strtonum.h	/^class Str2T<int64_t> {$/;"	c	namespace:dmlc::data
Str2T	dmlc-core\\src\\data\\strtonum.h	/^class Str2T<uint32_t> {$/;"	c	namespace:dmlc::data
Str2T	dmlc-core\\src\\data\\strtonum.h	/^class Str2T<uint64_t> {$/;"	c	namespace:dmlc::data
Str2Type	dmlc-core\\src\\data\\strtonum.h	/^inline T Str2Type(const char * begin, const char * end) {$/;"	f	namespace:dmlc::data	typeref:typename:T
Stream	dmlc-core\\include\\dmlc\\io.h	/^class Stream {  \/\/ NOLINT(*)$/;"	c	namespace:dmlc
StripEnd	dmlc-core\\src\\io\\input_split_base.cc	/^std::string InputSplitBase::StripEnd(std::string str, char ch) {$/;"	f	class:dmlc::io::InputSplitBase	typeref:typename:std::string
Symbol	nnvm\\include\\nnvm\\symbolic.h	/^class Symbol {$/;"	c	namespace:nnvm
Symbol	nnvm\\python\\nnvm\\symbol.py	/^class Symbol(SymbolBase):$/;"	c
SymbolBase	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^class SymbolBase(object):$/;"	c
SymbolBase	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^cdef class SymbolBase:$/;"	c
SymbolHandle	nnvm\\include\\nnvm\\c_api.h	/^typedef void *SymbolHandle;$/;"	t	typeref:typename:void *
SymbolHandle	nnvm\\python\\nnvm\\_base.py	/^SymbolHandle = ctypes.c_void_p$/;"	v
SymbolSetAttr	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^cdef SymbolSetAttr(SymbolHandle handle, dict kwargs):$/;"	f
TAB_L	lua\\ltablib.c	/^#define TAB_L	/;"	d	file:
TAB_R	lua\\ltablib.c	/^#define TAB_R	/;"	d	file:
TAB_RW	lua\\ltablib.c	/^#define TAB_RW	/;"	d	file:
TAB_W	lua\\ltablib.c	/^#define TAB_W	/;"	d	file:
TBRS_BSZ	torch7\\lib\\TH\\THDiskFile.c	/^#define TBRS_BSZ /;"	d	file:
TBackwardNeedInputs	include\\tinyflow\\base.h	/^using TBackwardNeedInputs = bool;$/;"	t	namespace:tinyflow	typeref:typename:bool
TBackwardNeedOutputs	include\\tinyflow\\base.h	/^using TBackwardNeedOutputs = bool;$/;"	t	namespace:tinyflow	typeref:typename:bool
TBackwardNumNoGradInputs	include\\tinyflow\\base.h	/^using TBackwardNumNoGradInputs = int;$/;"	t	namespace:tinyflow	typeref:typename:int
TBlob	include\\tinyflow\\base.h	/^struct TBlob {$/;"	s	namespace:tinyflow
TENSOR_IMPLEMENT_LOGICAL	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TENSOR_IMPLEMENT_LOGICAL(/;"	d	file:
TENSOR_IMPLEMENT_LOGICAL_SUM	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TENSOR_IMPLEMENT_LOGICAL_SUM(/;"	d	file:
TEST	dmlc-core\\test\\dmlc_test.mk	/^TEST=test\/filesys_test test\/dataiter_test\\$/;"	m
TEST	dmlc-core\\test\\unittest\\unittest_any.cc	/^TEST(Any, basics) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_any.cc	/^TEST(Any, cover) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_any.cc	/^TEST(Any, json) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_array_view.cc	/^TEST(ArrayView, Basic) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_config.cc	/^TEST(Config, basics) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_config.cc	/^TEST(Config, multi_value) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_config.cc	/^TEST(Config, order) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_config.cc	/^TEST(Config, set_param) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_json.cc	/^TEST(JSON, any) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_json.cc	/^TEST(JSON, basics) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_logging.cc	/^TEST(Logging, basics) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^TEST(Serializer, basics) {$/;"	f
TEST	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^TEST(ThreadedIter, basics) {$/;"	f
TEST	nnvm\\tests\\cpp\\op_test.cc	/^TEST(Op, GetAttr) {$/;"	f
TEST	nnvm\\tests\\cpp\\tuple_test.cc	/^TEST(Tuple, Basic) {$/;"	f
TEST	nnvm\\tests\\cpp\\unittest.mk	/^TEST = $(patsubst tests\/cpp\/%_test.cc, tests\/cpp\/%_test, $(TEST_SRC))$/;"	m
TESTARG_k	lua\\lopcodes.h	/^#define TESTARG_k(/;"	d
TESTS	lua\\makefile	/^TESTS= -DLUA_USER_H='"ltests.h"' -O0$/;"	m
TEST_SRC	nnvm\\tests\\cpp\\unittest.mk	/^TEST_SRC = $(wildcard tests\/cpp\/*_test.cc)$/;"	m
THAllLocalGenerateManyTypes	torch7\\lib\\TH\\THGenerateAllTypes.h	/^#define THAllLocalGenerateManyTypes$/;"	d
THAlloc	torch7\\lib\\TH\\THGeneral.c	/^void* THAlloc(ptrdiff_t size)$/;"	f	typeref:typename:void *
THAllocInternal	torch7\\lib\\TH\\THGeneral.c	/^static void* THAllocInternal(ptrdiff_t size)$/;"	f	typeref:typename:void *	file:
THAllocator	torch7\\lib\\TH\\THAllocator.h	/^typedef struct THAllocator {$/;"	s
THAllocator	torch7\\lib\\TH\\THAllocator.h	/^} THAllocator;$/;"	t	typeref:struct:THAllocator
THArgCheck	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THArgCheck(/;"	d
THArgCheck	torch7\\lib\\TH\\THGeneral.h.in	/^#define THArgCheck(/;"	d	file:
THArgCheckWithCleanup	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THArgCheckWithCleanup(/;"	d
THArgCheckWithCleanup	torch7\\lib\\TH\\THGeneral.h.in	/^#define THArgCheckWithCleanup(/;"	d	file:
THArgErrorHandlerFunction	bin\\torch7\\lib\\TH\\THGeneral.h	/^typedef void (*THArgErrorHandlerFunction)(int argNumber, const char *msg, void *data);$/;"	t	typeref:typename:void (*)(int argNumber,const char * msg,void * data)
THArgErrorHandlerFunction	torch7\\lib\\TH\\THGeneral.h.in	/^typedef void (*THArgErrorHandlerFunction)(int argNumber, const char *msg, void *data);$/;"	t	typeref:typename:void (*)(int argNumber,const char * msg,void * data)	file:
THAssert	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THAssert(/;"	d
THAssert	torch7\\lib\\TH\\THGeneral.h.in	/^#define THAssert(/;"	d	file:
THAssertMsg	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THAssertMsg(/;"	d
THAssertMsg	torch7\\lib\\TH\\THGeneral.h.in	/^#define THAssertMsg(/;"	d	file:
THAtomicAdd	torch7\\lib\\TH\\THAtomic.c	/^int THAtomicAdd(int volatile *a, int value)$/;"	f	typeref:typename:int
THAtomicAddLong	torch7\\lib\\TH\\THAtomic.c	/^long THAtomicAddLong(long volatile *a, long value)$/;"	f	typeref:typename:long
THAtomicAddPtrdiff	torch7\\lib\\TH\\THAtomic.c	/^ptrdiff_t THAtomicAddPtrdiff(ptrdiff_t volatile *a, ptrdiff_t value)$/;"	f	typeref:typename:ptrdiff_t
THAtomicCompareAndSwap	torch7\\lib\\TH\\THAtomic.c	/^int THAtomicCompareAndSwap(int volatile *a, int oldvalue, int newvalue)$/;"	f	typeref:typename:int
THAtomicCompareAndSwapLong	torch7\\lib\\TH\\THAtomic.c	/^long THAtomicCompareAndSwapLong(long volatile *a, long oldvalue, long newvalue)$/;"	f	typeref:typename:long
THAtomicCompareAndSwapPtrdiff	torch7\\lib\\TH\\THAtomic.c	/^ptrdiff_t THAtomicCompareAndSwapPtrdiff(ptrdiff_t volatile *a, ptrdiff_t oldvalue, ptrdiff_t new/;"	f	typeref:typename:ptrdiff_t
THAtomicDecrementRef	torch7\\lib\\TH\\THAtomic.c	/^int THAtomicDecrementRef(int volatile *a)$/;"	f	typeref:typename:int
THAtomicGet	torch7\\lib\\TH\\THAtomic.c	/^int THAtomicGet(int volatile *a)$/;"	f	typeref:typename:int
THAtomicGetLong	torch7\\lib\\TH\\THAtomic.c	/^long THAtomicGetLong(long volatile *a)$/;"	f	typeref:typename:long
THAtomicGetPtrdiff	torch7\\lib\\TH\\THAtomic.c	/^ptrdiff_t THAtomicGetPtrdiff(ptrdiff_t volatile *a)$/;"	f	typeref:typename:ptrdiff_t
THAtomicIncrementRef	torch7\\lib\\TH\\THAtomic.c	/^void THAtomicIncrementRef(int volatile *a)$/;"	f	typeref:typename:void
THAtomicSet	torch7\\lib\\TH\\THAtomic.c	/^void THAtomicSet(int volatile *a, int newvalue)$/;"	f	typeref:typename:void
THAtomicSetLong	torch7\\lib\\TH\\THAtomic.c	/^void THAtomicSetLong(long volatile *a, long newvalue)$/;"	f	typeref:typename:void
THAtomicSetPtrdiff	torch7\\lib\\TH\\THAtomic.c	/^void THAtomicSetPtrdiff(ptrdiff_t volatile *a, ptrdiff_t newvalue)$/;"	f	typeref:typename:void
THBlas_	torch7\\lib\\TH\\THBlas.h	/^#define THBlas_(/;"	d
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^real THBlas_(dot)(long n, real *x, long incx, real *y, long incy)$/;"	f	typeref:typename:real
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^void THBlas_(axpy)(long n, real a, real *x, long incx, real *y, long incy)$/;"	f	typeref:typename:void
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^void THBlas_(copy)(long n, real *x, long incx, real *y, long incy)$/;"	f	typeref:typename:void
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^void THBlas_(gemm)(char transa, char transb, long m, long n, long k, real alpha, real *a, long l/;"	f	typeref:typename:void
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^void THBlas_(gemv)(char trans, long m, long n, real alpha, real *a, long lda, real *x, long incx/;"	f	typeref:typename:void
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^void THBlas_(ger)(long m, long n, real alpha, real *x, long incx, real *y, long incy, real *a, l/;"	f	typeref:typename:void
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^void THBlas_(scal)(long n, real a, real *x, long incx)$/;"	f	typeref:typename:void
THBlas_	torch7\\lib\\TH\\generic\\THBlas.c	/^void THBlas_(swap)(long n, real *x, long incx, real *y, long incy)$/;"	f	typeref:typename:void
THBlas_C_sdot_	torch7\\lib\\TH\\generic\\THBlas.c	/^#define THBlas_C_sdot_$/;"	d	file:
THByteTensor_random1__	bin\\torch7\\TensorMath.c	/^static void THByteTensor_random1__(THByteTensor *self, THGenerator *gen, long b)$/;"	f	typeref:typename:void	file:
THByteTensor_random2__	bin\\torch7\\TensorMath.c	/^static void THByteTensor_random2__(THByteTensor *self, THGenerator *gen, long a, long b)$/;"	f	typeref:typename:void	file:
THCharTensor_random1__	bin\\torch7\\TensorMath.c	/^static void THCharTensor_random1__(THCharTensor *self, THGenerator *gen, long b)$/;"	f	typeref:typename:void	file:
THCharTensor_random2__	bin\\torch7\\TensorMath.c	/^static void THCharTensor_random2__(THCharTensor *self, THGenerator *gen, long a, long b)$/;"	f	typeref:typename:void	file:
THCleanup	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THCleanup(/;"	d
THCleanup	torch7\\lib\\TH\\THGeneral.h.in	/^#define THCleanup(/;"	d	file:
THDefaultAllocator	torch7\\lib\\TH\\THAllocator.c	/^THAllocator THDefaultAllocator = {$/;"	v	typeref:typename:THAllocator
THDefaultAllocator_alloc	torch7\\lib\\TH\\THAllocator.c	/^static void *THDefaultAllocator_alloc(void* ctx, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THDefaultAllocator_free	torch7\\lib\\TH\\THAllocator.c	/^static void THDefaultAllocator_free(void* ctx, void* ptr) {$/;"	f	typeref:typename:void	file:
THDefaultAllocator_realloc	torch7\\lib\\TH\\THAllocator.c	/^static void *THDefaultAllocator_realloc(void* ctx, void* ptr, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THDescBuff	bin\\torch7\\lib\\TH\\THGeneral.h	/^} THDescBuff;$/;"	t	typeref:struct:__anonc9df4ec80108
THDescBuff	torch7\\lib\\TH\\THGeneral.h.in	/^} THDescBuff;$/;"	t	typeref:struct:__anon6f7595180108	file:
THDiskFile	torch7\\lib\\TH\\THDiskFile.c	/^} THDiskFile;$/;"	t	typeref:struct:THDiskFile__	file:
THDiskFile__	torch7\\lib\\TH\\THDiskFile.c	/^typedef struct THDiskFile__$/;"	s	file:
THDiskFile_bigEndianEncoding	torch7\\lib\\TH\\THDiskFile.c	/^void THDiskFile_bigEndianEncoding(THFile *self)$/;"	f	typeref:typename:void
THDiskFile_close	torch7\\lib\\TH\\THDiskFile.c	/^static void THDiskFile_close(THFile *self)$/;"	f	typeref:typename:void	file:
THDiskFile_free	torch7\\lib\\TH\\THDiskFile.c	/^static void THDiskFile_free(THFile *self)$/;"	f	typeref:typename:void	file:
THDiskFile_isBigEndianCPU	torch7\\lib\\TH\\THDiskFile.c	/^int THDiskFile_isBigEndianCPU(void)$/;"	f	typeref:typename:int
THDiskFile_isLittleEndianCPU	torch7\\lib\\TH\\THDiskFile.c	/^int THDiskFile_isLittleEndianCPU(void)$/;"	f	typeref:typename:int
THDiskFile_isOpened	torch7\\lib\\TH\\THDiskFile.c	/^static int THDiskFile_isOpened(THFile *self)$/;"	f	typeref:typename:int	file:
THDiskFile_littleEndianEncoding	torch7\\lib\\TH\\THDiskFile.c	/^void THDiskFile_littleEndianEncoding(THFile *self)$/;"	f	typeref:typename:void
THDiskFile_longSize	torch7\\lib\\TH\\THDiskFile.c	/^void THDiskFile_longSize(THFile *self, int size)$/;"	f	typeref:typename:void
THDiskFile_mode	torch7\\lib\\TH\\THDiskFile.c	/^static int THDiskFile_mode(const char *mode, int *isReadable, int *isWritable)$/;"	f	typeref:typename:int	file:
THDiskFile_name	torch7\\lib\\TH\\THDiskFile.c	/^const char *THDiskFile_name(THFile *self)$/;"	f	typeref:typename:const char *
THDiskFile_nativeEndianEncoding	torch7\\lib\\TH\\THDiskFile.c	/^void THDiskFile_nativeEndianEncoding(THFile *self)$/;"	f	typeref:typename:void
THDiskFile_new	torch7\\lib\\TH\\THDiskFile.c	/^THFile *THDiskFile_new(const char *name, const char *mode, int isQuiet)$/;"	f	typeref:typename:THFile *
THDiskFile_noBuffer	torch7\\lib\\TH\\THDiskFile.c	/^void THDiskFile_noBuffer(THFile *self)$/;"	f	typeref:typename:void
THDiskFile_position	torch7\\lib\\TH\\THDiskFile.c	/^static size_t THDiskFile_position(THFile *self)$/;"	f	typeref:typename:size_t	file:
THDiskFile_readString	torch7\\lib\\TH\\THDiskFile.c	/^static size_t THDiskFile_readString(THFile *self, const char *format, char **str_)$/;"	f	typeref:typename:size_t	file:
THDiskFile_reverseMemory	torch7\\lib\\TH\\THDiskFile.c	/^static void THDiskFile_reverseMemory(void *dst, const void *src, size_t blockSize, size_t numBlo/;"	f	typeref:typename:void	file:
THDiskFile_seek	torch7\\lib\\TH\\THDiskFile.c	/^static void THDiskFile_seek(THFile *self, size_t position)$/;"	f	typeref:typename:void	file:
THDiskFile_seekEnd	torch7\\lib\\TH\\THDiskFile.c	/^static void THDiskFile_seekEnd(THFile *self)$/;"	f	typeref:typename:void	file:
THDiskFile_synchronize	torch7\\lib\\TH\\THDiskFile.c	/^static void THDiskFile_synchronize(THFile *self)$/;"	f	typeref:typename:void	file:
THDiskFile_writeLong	torch7\\lib\\TH\\THDiskFile.c	/^static size_t THDiskFile_writeLong(THFile *self, long *data, size_t n)$/;"	f	typeref:typename:size_t	file:
THDiskFile_writeString	torch7\\lib\\TH\\THDiskFile.c	/^static size_t THDiskFile_writeString(THFile *self, const char *str, size_t size)$/;"	f	typeref:typename:size_t	file:
THDoubleTensor_random1__	bin\\torch7\\TensorMath.c	/^static void THDoubleTensor_random1__(THDoubleTensor *self, THGenerator *gen, long b)$/;"	f	typeref:typename:void	file:
THDoubleTensor_random2__	bin\\torch7\\TensorMath.c	/^static void THDoubleTensor_random2__(THDoubleTensor *self, THGenerator *gen, long a, long b)$/;"	f	typeref:typename:void	file:
THDoubleVector_adds_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_adds_AVX(double *y, const double *x, const double c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THDoubleVector_adds_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THDoubleVector_adds_SSE(double *y, const double *x, const double c, const ptrdiff_t /;"	f	typeref:typename:void	file:
THDoubleVector_adds_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THDoubleVector_adds_VSX(double *y, const double *x, const double c, const ptrdiff_t /;"	f	typeref:typename:void	file:
THDoubleVector_cadd_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_cadd_AVX(double *z, const double *x, const double *y, const double c, const /;"	f	typeref:typename:void
THDoubleVector_cadd_AVX2	torch7\\lib\\TH\\vector\\AVX2.c	/^void THDoubleVector_cadd_AVX2(double *z, const double *x, const double *y, const double c, const/;"	f	typeref:typename:void
THDoubleVector_cadd_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THDoubleVector_cadd_SSE(double *z, const double *x, const double *y, const double c,/;"	f	typeref:typename:void	file:
THDoubleVector_cadd_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THDoubleVector_cadd_VSX(double *z, const double *x, const double *y, const double c,/;"	f	typeref:typename:void	file:
THDoubleVector_cdiv_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_cdiv_AVX(double *z, const double *x, const double *y, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THDoubleVector_cdiv_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THDoubleVector_cdiv_SSE(double *z, const double *x, const double *y, const ptrdiff_t/;"	f	typeref:typename:void	file:
THDoubleVector_cdiv_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THDoubleVector_cdiv_VSX(double *z, const double *x, const double *y, const ptrdiff_t/;"	f	typeref:typename:void	file:
THDoubleVector_cmul_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_cmul_AVX(double *z, const double *x, const double *y, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THDoubleVector_cmul_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THDoubleVector_cmul_SSE(double *z, const double *x, const double *y, const ptrdiff_t/;"	f	typeref:typename:void	file:
THDoubleVector_cmul_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THDoubleVector_cmul_VSX(double *z, const double *x, const double *y, const ptrdiff_t/;"	f	typeref:typename:void	file:
THDoubleVector_copy_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_copy_AVX(double *y, const double *x, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THDoubleVector_divs_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_divs_AVX(double *y, const double *x, const double c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THDoubleVector_divs_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THDoubleVector_divs_SSE(double *y, const double *x, const double c, const ptrdiff_t /;"	f	typeref:typename:void	file:
THDoubleVector_divs_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THDoubleVector_divs_VSX(double *y, const double *x, const double c, const ptrdiff_t /;"	f	typeref:typename:void	file:
THDoubleVector_fill_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_fill_AVX(double *x, const double c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THDoubleVector_fill_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THDoubleVector_fill_SSE(double *x, const double c, const ptrdiff_t n) {$/;"	f	typeref:typename:void	file:
THDoubleVector_fill_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THDoubleVector_fill_VSX(double *x, const double c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
THDoubleVector_muls_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THDoubleVector_muls_AVX(double *y, const double *x, const double c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THDoubleVector_muls_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THDoubleVector_muls_SSE(double *y, const double *x, const double c, const ptrdiff_t /;"	f	typeref:typename:void	file:
THDoubleVector_muls_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THDoubleVector_muls_VSX(double *y, const double *x, const double c, const ptrdiff_t /;"	f	typeref:typename:void	file:
THError	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THError(/;"	d
THError	torch7\\lib\\TH\\THGeneral.h.in	/^#define THError(/;"	d	file:
THErrorHandlerFunction	bin\\torch7\\lib\\TH\\THGeneral.h	/^typedef void (*THErrorHandlerFunction)(const char *msg, void *data);$/;"	t	typeref:typename:void (*)(const char * msg,void * data)
THErrorHandlerFunction	torch7\\lib\\TH\\THGeneral.h.in	/^typedef void (*THErrorHandlerFunction)(const char *msg, void *data);$/;"	t	typeref:typename:void (*)(const char * msg,void * data)	file:
THExpMinusApprox	torch7\\lib\\TH\\THLogAdd.c	/^double THExpMinusApprox(const double x)$/;"	f	typeref:typename:double
THFile	torch7\\lib\\TH\\THFile.h	/^typedef struct THFile__ THFile;$/;"	t	typeref:struct:THFile__
THFileVTable	torch7\\lib\\TH\\THFilePrivate.h	/^struct THFileVTable$/;"	s
THFile__	torch7\\lib\\TH\\THFilePrivate.h	/^struct THFile__$/;"	s
THFile_ascii	torch7\\lib\\TH\\THFile.c	/^void THFile_ascii(THFile *self)$/;"	f	typeref:typename:void
THFile_autoSpacing	torch7\\lib\\TH\\THFile.c	/^void THFile_autoSpacing(THFile *self)$/;"	f	typeref:typename:void
THFile_clearError	torch7\\lib\\TH\\THFile.c	/^void THFile_clearError(THFile *self)$/;"	f	typeref:typename:void
THFile_close	torch7\\lib\\TH\\THFile.c	/^void THFile_close(THFile *self)$/;"	f	typeref:typename:void
THFile_free	torch7\\lib\\TH\\THFile.c	/^void THFile_free(THFile *self)$/;"	f	typeref:typename:void
THFile_isOpened	torch7\\lib\\TH\\THFile.c	/^int THFile_isOpened(THFile *self)$/;"	f	typeref:typename:int
THFile_noAutoSpacing	torch7\\lib\\TH\\THFile.c	/^void THFile_noAutoSpacing(THFile *self)$/;"	f	typeref:typename:void
THFile_pedantic	torch7\\lib\\TH\\THFile.c	/^void THFile_pedantic(THFile *self)$/;"	f	typeref:typename:void
THFile_position	torch7\\lib\\TH\\THFile.c	/^size_t THFile_position(THFile *self)$/;"	f	typeref:typename:size_t
THFile_quiet	torch7\\lib\\TH\\THFile.c	/^void THFile_quiet(THFile *self)$/;"	f	typeref:typename:void
THFile_readRealRaw	torch7\\Storage.c	/^#define THFile_readRealRaw /;"	d	file:
THFile_seek	torch7\\lib\\TH\\THFile.c	/^void THFile_seek(THFile *self, size_t position)$/;"	f	typeref:typename:void
THFile_seekEnd	torch7\\lib\\TH\\THFile.c	/^void THFile_seekEnd(THFile *self)$/;"	f	typeref:typename:void
THFile_synchronize	torch7\\lib\\TH\\THFile.c	/^void THFile_synchronize(THFile *self)$/;"	f	typeref:typename:void
THFile_writeRealRaw	torch7\\Storage.c	/^#define THFile_writeRealRaw /;"	d	file:
THFile_writeStringRaw	torch7\\lib\\TH\\THFile.c	/^size_t THFile_writeStringRaw(THFile *self, const char *str, size_t size)$/;"	f	typeref:typename:size_t
THFloatLocalGenerateManyTypes	torch7\\lib\\TH\\THGenerateFloatTypes.h	/^#define THFloatLocalGenerateManyTypes$/;"	d
THFloatTensor_random1__	bin\\torch7\\TensorMath.c	/^static void THFloatTensor_random1__(THFloatTensor *self, THGenerator *gen, long b)$/;"	f	typeref:typename:void	file:
THFloatTensor_random2__	bin\\torch7\\TensorMath.c	/^static void THFloatTensor_random2__(THFloatTensor *self, THGenerator *gen, long a, long b)$/;"	f	typeref:typename:void	file:
THFloatVector_adds_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_adds_AVX(float *y, const float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THFloatVector_adds_NEON	torch7\\lib\\TH\\vector\\NEON.c	/^static void THFloatVector_adds_NEON(float *y, const float *x, const float c, const ptrdiff_t n) /;"	f	typeref:typename:void	file:
THFloatVector_adds_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THFloatVector_adds_SSE(float *y, const float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void	file:
THFloatVector_adds_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THFloatVector_adds_VSX(float *y, const float *x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
THFloatVector_cadd_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_cadd_AVX(float *z, const float *x, const float *y, const float c, const ptrdi/;"	f	typeref:typename:void
THFloatVector_cadd_AVX2	torch7\\lib\\TH\\vector\\AVX2.c	/^void THFloatVector_cadd_AVX2(float *z, const float *x, const float *y, const float c, const ptrd/;"	f	typeref:typename:void
THFloatVector_cadd_NEON	torch7\\lib\\TH\\vector\\NEON.c	/^static void THFloatVector_cadd_NEON(float *z, const float *x, const float *y, const float c, con/;"	f	typeref:typename:void	file:
THFloatVector_cadd_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THFloatVector_cadd_SSE(float *z, const float *x, const float *y, const float c, cons/;"	f	typeref:typename:void	file:
THFloatVector_cadd_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THFloatVector_cadd_VSX(float *z, const float *x, const float *y, const float c, cons/;"	f	typeref:typename:void	file:
THFloatVector_cdiv_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_cdiv_AVX(float *z, const float *x, const float *y, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THFloatVector_cdiv_NEON	torch7\\lib\\TH\\vector\\NEON.c	/^static void THFloatVector_cdiv_NEON(float *z, const float *x, const float *y, const ptrdiff_t n)/;"	f	typeref:typename:void	file:
THFloatVector_cdiv_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THFloatVector_cdiv_SSE(float *z, const float *x, const float *y, const ptrdiff_t n) /;"	f	typeref:typename:void	file:
THFloatVector_cdiv_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THFloatVector_cdiv_VSX(float *z, const float *x, const float *y, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
THFloatVector_cmul_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_cmul_AVX(float *z, const float *x, const float *y, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THFloatVector_cmul_NEON	torch7\\lib\\TH\\vector\\NEON.c	/^static void THFloatVector_cmul_NEON(float *z, const float *x, const float* y, const ptrdiff_t n)/;"	f	typeref:typename:void	file:
THFloatVector_cmul_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THFloatVector_cmul_SSE(float *z, const float *x, const float *y, const ptrdiff_t n) /;"	f	typeref:typename:void	file:
THFloatVector_cmul_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THFloatVector_cmul_VSX(float *z, const float *y, const float *x, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
THFloatVector_copy_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_copy_AVX(float *y, const float *x, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THFloatVector_divs_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_divs_AVX(float *y, const float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THFloatVector_divs_NEON	torch7\\lib\\TH\\vector\\NEON.c	/^static void THFloatVector_divs_NEON(float *y, const float *x, const float c, const ptrdiff_t n) /;"	f	typeref:typename:void	file:
THFloatVector_divs_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THFloatVector_divs_SSE(float *y, const float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void	file:
THFloatVector_divs_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THFloatVector_divs_VSX(float *y, const float*x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
THFloatVector_fill_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_fill_AVX(float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THFloatVector_fill_NEON	torch7\\lib\\TH\\vector\\NEON.c	/^static void THFloatVector_fill_NEON(float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void	file:
THFloatVector_fill_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THFloatVector_fill_SSE(float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void	file:
THFloatVector_fill_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THFloatVector_fill_VSX(float *x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
THFloatVector_muls_AVX	torch7\\lib\\TH\\vector\\AVX.c	/^void THFloatVector_muls_AVX(float *y, const float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THFloatVector_muls_NEON	torch7\\lib\\TH\\vector\\NEON.c	/^static void THFloatVector_muls_NEON(float *y, const float *x, const float c, const ptrdiff_t n) /;"	f	typeref:typename:void	file:
THFloatVector_muls_SSE	torch7\\lib\\TH\\vector\\SSE.c	/^static void THFloatVector_muls_SSE(float *y, const float *x, const float c, const ptrdiff_t n) {$/;"	f	typeref:typename:void	file:
THFloatVector_muls_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^static void THFloatVector_muls_VSX(float *y, const float *x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
THFree	torch7\\lib\\TH\\THGeneral.c	/^void THFree(void *ptr)$/;"	f	typeref:typename:void
THGenerateManyTypes	torch7\\lib\\TH\\THGenerateAllTypes.h	/^#define THGenerateManyTypes$/;"	d
THGenerateManyTypes	torch7\\lib\\TH\\THGenerateFloatTypes.h	/^#define THGenerateManyTypes$/;"	d
THGenerateManyTypes	torch7\\lib\\TH\\THGenerateIntTypes.h	/^#define THGenerateManyTypes$/;"	d
THGenerator	torch7\\lib\\TH\\THRandom.h	/^typedef struct THGenerator {$/;"	s
THGenerator	torch7\\lib\\TH\\THRandom.h	/^} THGenerator;$/;"	t	typeref:struct:THGenerator
THGenerator_copy	torch7\\lib\\TH\\THRandom.c	/^THGenerator* THGenerator_copy(THGenerator *self, THGenerator *from)$/;"	f	typeref:typename:THGenerator *
THGenerator_free	torch7\\lib\\TH\\THRandom.c	/^void THGenerator_free(THGenerator *self)$/;"	f	typeref:typename:void
THGenerator_isValid	torch7\\lib\\TH\\THRandom.c	/^int THGenerator_isValid(THGenerator *_generator)$/;"	f	typeref:typename:int
THGenerator_new	torch7\\lib\\TH\\THRandom.c	/^THGenerator* THGenerator_new()$/;"	f	typeref:typename:THGenerator *
THGenerator_newUnseeded	torch7\\lib\\TH\\THRandom.c	/^static THGenerator* THGenerator_newUnseeded()$/;"	f	typeref:typename:THGenerator *	file:
THGetNumCores	torch7\\lib\\TH\\THGeneral.c	/^int THGetNumCores(void)$/;"	f	typeref:typename:int
THGetNumThreads	torch7\\lib\\TH\\THGeneral.c	/^int THGetNumThreads(void)$/;"	f	typeref:typename:int
THHalf	torch7\\lib\\TH\\THHalf.h	/^typedef __THHalf THHalf;$/;"	t	typeref:typename:__THHalf
THHalf2	torch7\\lib\\TH\\THHalf.h	/^typedef __THHalf2 THHalf2;$/;"	t	typeref:typename:__THHalf2
THHeapUpdate	torch7\\lib\\TH\\THGeneral.c	/^void THHeapUpdate(ptrdiff_t size) {$/;"	f	typeref:typename:void
THInf	torch7\\lib\\TH\\THGenerateByteType.h	/^#define THInf /;"	d
THInf	torch7\\lib\\TH\\THGenerateCharType.h	/^#define THInf /;"	d
THInf	torch7\\lib\\TH\\THGenerateDoubleType.h	/^#define THInf /;"	d
THInf	torch7\\lib\\TH\\THGenerateFloatType.h	/^#define THInf /;"	d
THInf	torch7\\lib\\TH\\THGenerateHalfType.h	/^#define THInf /;"	d
THInf	torch7\\lib\\TH\\THGenerateIntType.h	/^#define THInf /;"	d
THInf	torch7\\lib\\TH\\THGenerateLongType.h	/^#define THInf /;"	d
THInf	torch7\\lib\\TH\\THGenerateShortType.h	/^#define THInf /;"	d
THInferNumThreads	torch7\\lib\\TH\\THGeneral.c	/^TH_API void THInferNumThreads(void)$/;"	f	typeref:typename:TH_API void
THIntLocalGenerateManyTypes	torch7\\lib\\TH\\THGenerateIntTypes.h	/^#define THIntLocalGenerateManyTypes$/;"	d
THIntTensor_random1__	bin\\torch7\\TensorMath.c	/^static void THIntTensor_random1__(THIntTensor *self, THGenerator *gen, long b)$/;"	f	typeref:typename:void	file:
THIntTensor_random2__	bin\\torch7\\TensorMath.c	/^static void THIntTensor_random2__(THIntTensor *self, THGenerator *gen, long a, long b)$/;"	f	typeref:typename:void	file:
THLapackCheck	torch7\\lib\\TH\\THLapack.h	/^#define THLapackCheck(/;"	d
THLapackCheckWithCleanup	torch7\\lib\\TH\\THLapack.h	/^#define THLapackCheckWithCleanup(/;"	d
THLapack_	torch7\\lib\\TH\\THLapack.h	/^#define THLapack_(/;"	d
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(geev)(char jobvl, char jobvr, int n, real *a, int lda, real *wr, real *wi, real* /;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(gels)(char trans, int m, int n, int nrhs, real *a, int lda, real *b, int ldb, rea/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(geqrf)(int m, int n, real *a, int lda, real *tau, real *work, int lwork, int *inf/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(gesv)(int n, int nrhs, real *a, int lda, int *ipiv, real *b, int ldb, int* info)$/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(gesvd)(char jobu, char jobvt, int m, int n, real *a, int lda, real *s, real *u, i/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(getrf)(int m, int n, real *a, int lda, int *ipiv, int *info)$/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(getri)(int n, real *a, int lda, int *ipiv, real *work, int lwork, int* info)$/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(getrs)(char trans, int n, int nrhs, real *a, int lda, int *ipiv, real *b, int ldb/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(orgqr)(int m, int n, int k, real *a, int lda, real *tau, real *work, int lwork, i/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(ormqr)(char side, char trans, int m, int n, int k, real *a, int lda, real *tau, r/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(potrf)(char uplo, int n, real *a, int lda, int *info)$/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(potri)(char uplo, int n, real *a, int lda, int *info)$/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(potrs)(char uplo, int n, int nrhs, real *a, int lda, real *b, int ldb, int *info)$/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(pstrf)(char uplo, int n, real *a, int lda, int *piv, int *rank, real tol, real *w/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(syev)(char jobz, char uplo, int n, real *a, int lda, real *w, real *work, int lwo/;"	f	typeref:typename:void
THLapack_	torch7\\lib\\TH\\generic\\THLapack.c	/^void THLapack_(trtrs)(char uplo, char trans, char diag, int n, int nrhs, real *a, int lda, real /;"	f	typeref:typename:void
THLog1p	torch7\\lib\\TH\\THGeneral.c	/^double THLog1p(const double x)$/;"	f	typeref:typename:double
THLog2Pi	torch7\\lib\\TH\\THLogAdd.c	/^const double THLog2Pi=1.83787706640934548355;$/;"	v	typeref:typename:const double
THLog2Pi	torch7\\lib\\TH\\THLogAdd.h	/^TH_API const double THLog2Pi;$/;"	v	typeref:typename:TH_API const double
THLogAdd	torch7\\lib\\TH\\THLogAdd.c	/^double THLogAdd(double log_a, double log_b)$/;"	f	typeref:typename:double
THLogOne	torch7\\lib\\TH\\THLogAdd.c	/^const double THLogOne=0;$/;"	v	typeref:typename:const double
THLogOne	torch7\\lib\\TH\\THLogAdd.h	/^TH_API const double THLogOne;$/;"	v	typeref:typename:TH_API const double
THLogSub	torch7\\lib\\TH\\THLogAdd.c	/^double THLogSub(double log_a, double log_b)$/;"	f	typeref:typename:double
THLogZero	torch7\\lib\\TH\\THLogAdd.c	/^const double THLogZero=-DBL_MAX;$/;"	v	typeref:typename:const double
THLogZero	torch7\\lib\\TH\\THLogAdd.h	/^TH_API const double THLogZero;$/;"	v	typeref:typename:TH_API const double
THLongStorage_inferExpandGeometry	torch7\\lib\\TH\\THStorage.c	/^int THLongStorage_inferExpandGeometry(long *tensorSizes, long *tensorStrides, long tensorDim,$/;"	f	typeref:typename:int
THLongStorage_inferSize2	torch7\\lib\\TH\\THStorage.c	/^int THLongStorage_inferSize2(THLongStorage *output, long *sizesA, long dimsA, long *sizesB, long/;"	f	typeref:typename:int
THLongStorage_inferSizeN	torch7\\lib\\TH\\THStorage.c	/^int THLongStorage_inferSizeN(THLongStorage *output, int n, long **sizes, long *dims,$/;"	f	typeref:typename:int
THLongStorage_newInferSize	torch7\\lib\\TH\\THStorage.c	/^THLongStorage *THLongStorage_newInferSize(THLongStorage *size, ptrdiff_t nElement)$/;"	f	typeref:typename:THLongStorage *
THLongStorage_sizeDesc	torch7\\lib\\TH\\THStorage.c	/^THDescBuff THLongStorage_sizeDesc(const THLongStorage *size) {$/;"	f	typeref:typename:THDescBuff
THLongTensor_random1__	bin\\torch7\\TensorMath.c	/^static void THLongTensor_random1__(THLongTensor *self, THGenerator *gen, long b)$/;"	f	typeref:typename:void	file:
THLongTensor_random2__	bin\\torch7\\TensorMath.c	/^static void THLongTensor_random2__(THLongTensor *self, THGenerator *gen, long a, long b)$/;"	f	typeref:typename:void	file:
THMapAllocator	torch7\\lib\\TH\\THAllocator.c	/^THAllocator THMapAllocator = {$/;"	v	typeref:typename:THAllocator
THMapAllocatorContext	torch7\\lib\\TH\\THAllocator.h	/^typedef struct THMapAllocatorContext_  THMapAllocatorContext;$/;"	t	typeref:struct:THMapAllocatorContext_
THMapAllocatorContext_	torch7\\lib\\TH\\THAllocator.c	/^struct THMapAllocatorContext_ {$/;"	s	file:
THMapAllocatorContext_fd	torch7\\lib\\TH\\THAllocator.c	/^int THMapAllocatorContext_fd(THMapAllocatorContext *ctx)$/;"	f	typeref:typename:int
THMapAllocatorContext_filename	torch7\\lib\\TH\\THAllocator.c	/^char * THMapAllocatorContext_filename(THMapAllocatorContext *ctx)$/;"	f	typeref:typename:char *
THMapAllocatorContext_free	torch7\\lib\\TH\\THAllocator.c	/^void THMapAllocatorContext_free(THMapAllocatorContext *ctx) {$/;"	f	typeref:typename:void
THMapAllocatorContext_free	torch7\\lib\\TH\\THAllocator.c	/^void THMapAllocatorContext_free(THMapAllocatorContext *ctx)$/;"	f	typeref:typename:void
THMapAllocatorContext_new	torch7\\lib\\TH\\THAllocator.c	/^THMapAllocatorContext *THMapAllocatorContext_new(const char *filename, int flags) {$/;"	f	typeref:typename:THMapAllocatorContext *
THMapAllocatorContext_new	torch7\\lib\\TH\\THAllocator.c	/^THMapAllocatorContext *THMapAllocatorContext_new(const char *filename, int flags)$/;"	f	typeref:typename:THMapAllocatorContext *
THMapAllocatorContext_newWithFd	torch7\\lib\\TH\\THAllocator.c	/^THMapAllocatorContext *THMapAllocatorContext_newWithFd(const char *filename, int fd, int flags)$/;"	f	typeref:typename:THMapAllocatorContext *
THMapAllocatorContext_size	torch7\\lib\\TH\\THAllocator.c	/^ptrdiff_t THMapAllocatorContext_size(THMapAllocatorContext *ctx)$/;"	f	typeref:typename:ptrdiff_t
THMapAllocator_alloc	torch7\\lib\\TH\\THAllocator.c	/^static void * THMapAllocator_alloc(void *ctx, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THMapAllocator_alloc	torch7\\lib\\TH\\THAllocator.c	/^static void *THMapAllocator_alloc(void* ctx_, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THMapAllocator_free	torch7\\lib\\TH\\THAllocator.c	/^static void THMapAllocator_free(void* ctx, void* data) {$/;"	f	typeref:typename:void	file:
THMapAllocator_free	torch7\\lib\\TH\\THAllocator.c	/^static void THMapAllocator_free(void* ctx_, void* data) {$/;"	f	typeref:typename:void	file:
THMapAllocator_realloc	torch7\\lib\\TH\\THAllocator.c	/^static void *THMapAllocator_realloc(void* ctx, void* ptr, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THMapInfo	torch7\\lib\\TH\\THAllocator.c	/^} THMapInfo;$/;"	t	typeref:struct:__anoncf22d2710108	file:
THMax	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THMax(/;"	d
THMax	torch7\\lib\\TH\\THGeneral.h.in	/^#define THMax(/;"	d	file:
THMemoryFile	torch7\\lib\\TH\\THMemoryFile.c	/^} THMemoryFile;$/;"	t	typeref:struct:THMemoryFile__	file:
THMemoryFile__	torch7\\lib\\TH\\THMemoryFile.c	/^typedef struct THMemoryFile__$/;"	s	file:
THMemoryFile_cloneString	torch7\\lib\\TH\\THMemoryFile.c	/^static char* THMemoryFile_cloneString(const char *str, ptrdiff_t size)$/;"	f	typeref:typename:char *	file:
THMemoryFile_close	torch7\\lib\\TH\\THMemoryFile.c	/^static void THMemoryFile_close(THFile *self)$/;"	f	typeref:typename:void	file:
THMemoryFile_free	torch7\\lib\\TH\\THMemoryFile.c	/^static void THMemoryFile_free(THFile *self)$/;"	f	typeref:typename:void	file:
THMemoryFile_grow	torch7\\lib\\TH\\THMemoryFile.c	/^static void THMemoryFile_grow(THMemoryFile *self, size_t size)$/;"	f	typeref:typename:void	file:
THMemoryFile_isOpened	torch7\\lib\\TH\\THMemoryFile.c	/^static int THMemoryFile_isOpened(THFile *self)$/;"	f	typeref:typename:int	file:
THMemoryFile_longSize	torch7\\lib\\TH\\THMemoryFile.c	/^void THMemoryFile_longSize(THFile *self, int size)$/;"	f	typeref:typename:void
THMemoryFile_mode	torch7\\lib\\TH\\THMemoryFile.c	/^static int THMemoryFile_mode(const char *mode, int *isReadable, int *isWritable)$/;"	f	typeref:typename:int	file:
THMemoryFile_new	torch7\\lib\\TH\\THMemoryFile.c	/^THFile *THMemoryFile_new(const char *mode)$/;"	f	typeref:typename:THFile *
THMemoryFile_newWithStorage	torch7\\lib\\TH\\THMemoryFile.c	/^THFile *THMemoryFile_newWithStorage(THCharStorage *storage, const char *mode)$/;"	f	typeref:typename:THFile *
THMemoryFile_position	torch7\\lib\\TH\\THMemoryFile.c	/^static size_t THMemoryFile_position(THFile *self)$/;"	f	typeref:typename:size_t	file:
THMemoryFile_readLong	torch7\\lib\\TH\\THMemoryFile.c	/^static size_t THMemoryFile_readLong(THFile *self, long *data, size_t n)$/;"	f	typeref:typename:size_t	file:
THMemoryFile_readString	torch7\\lib\\TH\\THMemoryFile.c	/^static size_t THMemoryFile_readString(THFile *self, const char *format, char **str_)$/;"	f	typeref:typename:size_t	file:
THMemoryFile_seek	torch7\\lib\\TH\\THMemoryFile.c	/^static void THMemoryFile_seek(THFile *self, size_t position)$/;"	f	typeref:typename:void	file:
THMemoryFile_seekEnd	torch7\\lib\\TH\\THMemoryFile.c	/^static void THMemoryFile_seekEnd(THFile *self)$/;"	f	typeref:typename:void	file:
THMemoryFile_storage	torch7\\lib\\TH\\THMemoryFile.c	/^THCharStorage *THMemoryFile_storage(THFile *self)$/;"	f	typeref:typename:THCharStorage *
THMemoryFile_strnextspace	torch7\\lib\\TH\\THMemoryFile.c	/^static char *THMemoryFile_strnextspace(char *str_, char *c_)$/;"	f	typeref:typename:char *	file:
THMemoryFile_synchronize	torch7\\lib\\TH\\THMemoryFile.c	/^static void THMemoryFile_synchronize(THFile *self)$/;"	f	typeref:typename:void	file:
THMemoryFile_writeLong	torch7\\lib\\TH\\THMemoryFile.c	/^static size_t THMemoryFile_writeLong(THFile *self, long *data, size_t n)$/;"	f	typeref:typename:size_t	file:
THMemoryFile_writeString	torch7\\lib\\TH\\THMemoryFile.c	/^static size_t THMemoryFile_writeString(THFile *self, const char *str, size_t size)$/;"	f	typeref:typename:size_t	file:
THMin	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define THMin(/;"	d
THMin	torch7\\lib\\TH\\THGeneral.h.in	/^#define THMin(/;"	d	file:
THPipeFile_free	torch7\\lib\\TH\\THDiskFile.c	/^static void THPipeFile_free(THFile *self)$/;"	f	typeref:typename:void	file:
THPipeFile_mode	torch7\\lib\\TH\\THDiskFile.c	/^static int THPipeFile_mode(const char *mode, int *isReadable, int *isWritable)$/;"	f	typeref:typename:int	file:
THPipeFile_new	torch7\\lib\\TH\\THDiskFile.c	/^THFile *THPipeFile_new(const char *name, const char *mode, int isQuiet)$/;"	f	typeref:typename:THFile *
THRandom_bernoulli	torch7\\lib\\TH\\THRandom.c	/^int THRandom_bernoulli(THGenerator *_generator, double p)$/;"	f	typeref:typename:int
THRandom_cauchy	torch7\\lib\\TH\\THRandom.c	/^double THRandom_cauchy(THGenerator *_generator, double median, double sigma)$/;"	f	typeref:typename:double
THRandom_exponential	torch7\\lib\\TH\\THRandom.c	/^double THRandom_exponential(THGenerator *_generator, double lambda)$/;"	f	typeref:typename:double
THRandom_geometric	torch7\\lib\\TH\\THRandom.c	/^int THRandom_geometric(THGenerator *_generator, double p)$/;"	f	typeref:typename:int
THRandom_initialSeed	torch7\\lib\\TH\\THRandom.c	/^unsigned long THRandom_initialSeed(THGenerator *_generator)$/;"	f	typeref:typename:unsigned long
THRandom_logNormal	torch7\\lib\\TH\\THRandom.c	/^double THRandom_logNormal(THGenerator *_generator, double mean, double stdv)$/;"	f	typeref:typename:double
THRandom_manualSeed	torch7\\lib\\TH\\THRandom.c	/^void THRandom_manualSeed(THGenerator *_generator, unsigned long the_seed_)$/;"	f	typeref:typename:void
THRandom_nextState	torch7\\lib\\TH\\THRandom.c	/^void THRandom_nextState(THGenerator *_generator)$/;"	f	typeref:typename:void
THRandom_normal	torch7\\lib\\TH\\THRandom.c	/^double THRandom_normal(THGenerator *_generator, double mean, double stdv)$/;"	f	typeref:typename:double
THRandom_random	torch7\\lib\\TH\\THRandom.c	/^unsigned long THRandom_random(THGenerator *_generator)$/;"	f	typeref:typename:unsigned long
THRandom_random1__	bin\\torch7\\TensorMath.c	/^static long THRandom_random1__(THGenerator *gen, long b)$/;"	f	typeref:typename:long	file:
THRandom_random2__	bin\\torch7\\TensorMath.c	/^static long THRandom_random2__(THGenerator *gen, long a, long b)$/;"	f	typeref:typename:long	file:
THRandom_seed	torch7\\lib\\TH\\THRandom.c	/^unsigned long THRandom_seed(THGenerator *_generator)$/;"	f	typeref:typename:unsigned long
THRandom_uniform	torch7\\lib\\TH\\THRandom.c	/^double THRandom_uniform(THGenerator *_generator, double a, double b)$/;"	f	typeref:typename:double
THRealloc	torch7\\lib\\TH\\THGeneral.c	/^void* THRealloc(void *ptr, ptrdiff_t size)$/;"	f	typeref:typename:void *
THRefcountedMapAllocator	torch7\\lib\\TH\\THAllocator.c	/^THAllocator THRefcountedMapAllocator = {$/;"	v	typeref:typename:THAllocator
THRefcountedMapAllocator_alloc	torch7\\lib\\TH\\THAllocator.c	/^static void * THRefcountedMapAllocator_alloc(void *_ctx, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THRefcountedMapAllocator_alloc	torch7\\lib\\TH\\THAllocator.c	/^static void * THRefcountedMapAllocator_alloc(void *ctx, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THRefcountedMapAllocator_decref	torch7\\lib\\TH\\THAllocator.c	/^int THRefcountedMapAllocator_decref(THMapAllocatorContext *ctx, void *data)$/;"	f	typeref:typename:int
THRefcountedMapAllocator_free	torch7\\lib\\TH\\THAllocator.c	/^static void THRefcountedMapAllocator_free(void* ctx_, void* data) {$/;"	f	typeref:typename:void	file:
THRefcountedMapAllocator_incref	torch7\\lib\\TH\\THAllocator.c	/^void THRefcountedMapAllocator_incref(THMapAllocatorContext *ctx, void *data)$/;"	f	typeref:typename:void
THRefcountedMapAllocator_realloc	torch7\\lib\\TH\\THAllocator.c	/^static void *THRefcountedMapAllocator_realloc(void* ctx, void* ptr, ptrdiff_t size) {$/;"	f	typeref:typename:void *	file:
THSetArgErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^void THSetArgErrorHandler(THArgErrorHandlerFunction new_handler, void *data)$/;"	f	typeref:typename:void
THSetDefaultArgErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^void THSetDefaultArgErrorHandler(THArgErrorHandlerFunction new_handler, void *data)$/;"	f	typeref:typename:void
THSetDefaultErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^void THSetDefaultErrorHandler(THErrorHandlerFunction new_handler, void *data)$/;"	f	typeref:typename:void
THSetErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^void THSetErrorHandler(THErrorHandlerFunction new_handler, void *data)$/;"	f	typeref:typename:void
THSetGCHandler	torch7\\lib\\TH\\THGeneral.c	/^void THSetGCHandler( void (*torchGCFunction_)(void *data), void *data )$/;"	f	typeref:typename:void
THSetNumThreads	torch7\\lib\\TH\\THGeneral.c	/^void THSetNumThreads(int num_threads)$/;"	f	typeref:typename:void
THShortTensor_random1__	bin\\torch7\\TensorMath.c	/^static void THShortTensor_random1__(THShortTensor *self, THGenerator *gen, long b)$/;"	f	typeref:typename:void	file:
THShortTensor_random2__	bin\\torch7\\TensorMath.c	/^static void THShortTensor_random2__(THShortTensor *self, THGenerator *gen, long a, long b)$/;"	f	typeref:typename:void	file:
THSize_isSameSizeAs	torch7\\lib\\TH\\THSize.c	/^int THSize_isSameSizeAs(const long *sizeA, long dimsA, const long *sizeB, long dimsB) {$/;"	f	typeref:typename:int
THSize_nElement	torch7\\lib\\TH\\THSize.c	/^ptrdiff_t THSize_nElement(long dims, long *size) {$/;"	f	typeref:typename:ptrdiff_t
THStorage	torch7\\lib\\TH\\THStorage.h	/^#define THStorage /;"	d
THStorage	torch7\\lib\\TH\\generic\\THStorage.h	/^typedef struct THStorage$/;"	s
THStorage	torch7\\lib\\TH\\generic\\THStorage.h	/^} THStorage;$/;"	t	typeref:struct:THStorage
THStorage_	torch7\\lib\\TH\\THStorage.h	/^#define THStorage_(/;"	d
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(new)(void)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithAllocator)(ptrdiff_t size,$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithData)(real *data, ptrdiff_t size)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithDataAndAllocator)(real* data, ptrdiff_t size,$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithMapping)(const char *filename, ptrdiff_t size, int flags)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithSize)(ptrdiff_t size)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithSize1)(real data0)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithSize2)(real data0, real data1)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithSize3)(real data0, real data1, real data2)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^THStorage* THStorage_(newWithSize4)(real data0, real data1, real data2, real data3)$/;"	f	typeref:typename:THStorage *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^ptrdiff_t THStorage_(size)(const THStorage *self)$/;"	f	typeref:typename:ptrdiff_t
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^real THStorage_(get)(const THStorage *self, ptrdiff_t idx)$/;"	f	typeref:typename:real
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^real* THStorage_(data)(const THStorage *self)$/;"	f	typeref:typename:real *
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^size_t THStorage_(elementSize)()$/;"	f	typeref:typename:size_t
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(clearFlag)(THStorage *storage, const char flag)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(fill)(THStorage *storage, real value)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(free)(THStorage *storage)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(resize)(THStorage *storage, ptrdiff_t size)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(retain)(THStorage *storage)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(set)(THStorage *self, ptrdiff_t idx, real value)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(setFlag)(THStorage *storage, const char flag)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorage.c	/^void THStorage_(swap)(THStorage *storage1, THStorage *storage2)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorageCopy.c	/^void THStorage_(copy)(THStorage *storage, THStorage *src)$/;"	f	typeref:typename:void
THStorage_	torch7\\lib\\TH\\generic\\THStorageCopy.c	/^void THStorage_(rawCopy)(THStorage *storage, real *src)$/;"	f	typeref:typename:void
THTensor	torch7\\lib\\TH\\THTensor.h	/^#define THTensor /;"	d
THTensor	torch7\\lib\\TH\\generic\\THTensor.h	/^typedef struct THTensor$/;"	s
THTensor	torch7\\lib\\TH\\generic\\THTensor.h	/^} THTensor;$/;"	t	typeref:struct:THTensor
THTensor_	torch7\\lib\\TH\\THTensor.h	/^#define THTensor_(/;"	d
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THDescBuff THTensor_(desc)(const THTensor *tensor) {$/;"	f	typeref:typename:THDescBuff
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THDescBuff THTensor_(sizeDesc)(const THTensor *tensor) {$/;"	f	typeref:typename:THDescBuff
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THLongStorage *THTensor_(newSizeOf)(THTensor *self)$/;"	f	typeref:typename:THLongStorage *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THLongStorage *THTensor_(newStrideOf)(THTensor *self)$/;"	f	typeref:typename:THLongStorage *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THStorage *THTensor_(storage)(const THTensor *self)$/;"	f	typeref:typename:THStorage *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(new)(void)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newClone)(THTensor *self)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newContiguous)(THTensor *self)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newNarrow)(THTensor *tensor, int dimension_, long firstIndex_, long size_)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newSelect)(THTensor *tensor, int dimension_, long sliceIndex_)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newTranspose)(THTensor *tensor, int dimension1_, int dimension2_)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newUnfold)(THTensor *tensor, int dimension_, long size_, long step_)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newView)(THTensor *tensor, THLongStorage *size)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithSize)(THLongStorage *size, THLongStorage *stride)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithSize1d)(long size0)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithSize2d)(long size0, long size1)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithSize3d)(long size0, long size1, long size2)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithSize4d)(long size0, long size1, long size2, long size3)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithStorage)(THStorage *storage, ptrdiff_t storageOffset, THLongStorage */;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithStorage1d)(THStorage *storage, ptrdiff_t storageOffset,$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithStorage2d)(THStorage *storage, ptrdiff_t storageOffset,$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithStorage3d)(THStorage *storage, ptrdiff_t storageOffset,$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithStorage4d)(THStorage *storage, ptrdiff_t storageOffset,$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor *THTensor_(newWithTensor)(THTensor *tensor)$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^THTensor* THTensor_(newExpand)(THTensor *tensor, THLongStorage *sizes) {$/;"	f	typeref:typename:THTensor *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^int THTensor_(isContiguous)(const THTensor *self)$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^int THTensor_(isSameSizeAs)(const THTensor *self, const THTensor* src)$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^int THTensor_(isSetTo)(const THTensor *self, const THTensor* src)$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^int THTensor_(isSize)(const THTensor *self, const THLongStorage *dims)$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^int THTensor_(isTransposed)(const THTensor *self)$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^int THTensor_(nDimension)(const THTensor *self)$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^long THTensor_(size)(const THTensor *self, int dim)$/;"	f	typeref:typename:long
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^long THTensor_(stride)(const THTensor *self, int dim)$/;"	f	typeref:typename:long
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^ptrdiff_t THTensor_(nElement)(const THTensor *self)$/;"	f	typeref:typename:ptrdiff_t
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^ptrdiff_t THTensor_(storageOffset)(const THTensor *self)$/;"	f	typeref:typename:ptrdiff_t
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^real *THTensor_(data)(const THTensor *self)$/;"	f	typeref:typename:real *
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^real THTensor_(get1d)(const THTensor *tensor, long x0)$/;"	f	typeref:typename:real
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^real THTensor_(get2d)(const THTensor *tensor, long x0, long x1)$/;"	f	typeref:typename:real
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^real THTensor_(get3d)(const THTensor *tensor, long x0, long x1, long x2)$/;"	f	typeref:typename:real
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^real THTensor_(get4d)(const THTensor *tensor, long x0, long x1, long x2, long x3)$/;"	f	typeref:typename:real
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^static void THTensor_(rawInit)(THTensor *self)$/;"	f	typeref:typename:void	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(clearFlag)(THTensor *self, const char flag)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(expand)(THTensor *r, THTensor *tensor, THLongStorage *sizes) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(expandNd)(THTensor **rets, THTensor **ops, int count) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(free)(THTensor *self)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(freeCopyTo)(THTensor *self, THTensor *dst)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(narrow)(THTensor *self, THTensor *src, int dimension, long firstIndex, long size)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resize)(THTensor *self, THLongStorage *size, THLongStorage *stride)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resize1d)(THTensor *tensor, long size0)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resize2d)(THTensor *tensor, long size0, long size1)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resize3d)(THTensor *tensor, long size0, long size1, long size2)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resize4d)(THTensor *self, long size0, long size1, long size2, long size3)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resize5d)(THTensor *self, long size0, long size1, long size2, long size3, long si/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resizeAs)(THTensor *self, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(resizeNd)(THTensor *self, int nDimension, long *size, long *stride)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(retain)(THTensor *self)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(select)(THTensor *self, THTensor *src, int dimension, long sliceIndex)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(set)(THTensor *self, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(set1d)(THTensor *tensor, long x0, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(set2d)(THTensor *tensor, long x0, long x1, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(set3d)(THTensor *tensor, long x0, long x1, long x2, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(set4d)(THTensor *tensor, long x0, long x1, long x2, long x3, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(setFlag)(THTensor *self, const char flag)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(setStorage)(THTensor *self, THStorage *storage_, ptrdiff_t storageOffset_, THLong/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(setStorage1d)(THTensor *self, THStorage *storage_, ptrdiff_t storageOffset_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(setStorage2d)(THTensor *self, THStorage *storage_, ptrdiff_t storageOffset_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(setStorage3d)(THTensor *self, THStorage *storage_, ptrdiff_t storageOffset_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(setStorage4d)(THTensor *self, THStorage *storage_, ptrdiff_t storageOffset_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(setStorageNd)(THTensor *self, THStorage *storage, ptrdiff_t storageOffset, int nD/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(squeeze)(THTensor *self, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(squeeze1d)(THTensor *self, THTensor *src, int dimension)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(transpose)(THTensor *self, THTensor *src, int dimension1, int dimension2)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(unfold)(THTensor *self, THTensor *src, int dimension, long size, long step)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensor.c	/^void THTensor_(unsqueeze1d)(THTensor *self, THTensor *src, int dimension)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^long THTensor_(convsize)(long x, long k, long s, const char* vf)$/;"	f	typeref:typename:long
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2DRevger)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, lo/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2DRevgerm)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, l/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2Dcmul)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, long/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2Dger)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, long /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2Dmap)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, THTen/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2Dmm)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, long s/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2Dmul)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, long /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2Dmv)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, long s/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv2d)(real* output_data,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv3DRevger)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv3Dcmul)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv3Dger)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv3Dmap)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_, THTen/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv3Dmul)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv3Dmv)(THTensor *r_, real beta, real alpha, THTensor *t_, THTensor *k_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(conv3d)(real* output_data,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(fullConv2Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(fullConv3Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(fullXCorr2Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(fullXCorr3Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(validConv2Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(validConv3Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(validXCorr2DRevptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(validXCorr2Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(validXCorr3DRevptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorConv.c	/^void THTensor_(validXCorr3Dptr)(real *r_,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^int THTensor_(copyTransposeValid)(THTensor *tensor, THTensor *src) {$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^void THTensor_(copy)(THTensor *tensor, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^void THTensor_(copyTranspose)(THTensor *tensor, THTensor *src) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^static THTensor *THTensor_(checkLapackClone)(THTensor *result, THTensor *src, int nrows)$/;"	f	typeref:typename:THTensor *	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^static THTensor *THTensor_(cloneColumnMajor)(THTensor *self, THTensor *src)$/;"	f	typeref:typename:THTensor *	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^static THTensor *THTensor_(cloneColumnMajorNrows)(THTensor *self, THTensor *src, int nrows)$/;"	f	typeref:typename:THTensor *	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^static THTensor *THTensor_(newTransposedContiguous)(THTensor *self)$/;"	f	typeref:typename:THTensor *	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^static int THTensor_(isTransposedContiguous)(THTensor *self)$/;"	f	typeref:typename:int	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^static void THTensor_(checkTransposed)(THTensor *self)$/;"	f	typeref:typename:void	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(btrifact)(THTensor *ra_, THIntTensor *rpivots_, THIntTensor *rinfo_, int pivot, T/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(btrisolve)(THTensor *rb_, THTensor *b, THTensor *atf, THIntTensor *pivots)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(clearUpLoTriangle)(THTensor *a, const char *uplo)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(copyUpLoTriangle)(THTensor *a, const char *uplo)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(geev)(THTensor *re_, THTensor *rv_, THTensor *a_, const char *jobvr)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(gels)(THTensor *rb_, THTensor *ra_, THTensor *b, THTensor *a)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(geqrf)(THTensor *ra_, THTensor *rtau_, THTensor *a)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(gesv)(THTensor *rb_, THTensor *ra_, THTensor *b, THTensor *a)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(gesvd)(THTensor *ru_, THTensor *rs_, THTensor *rv_, THTensor *a, const char* jobu/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(gesvd2)(THTensor *ru_, THTensor *rs_, THTensor *rv_, THTensor *ra_, THTensor *a, /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(getri)(THTensor *ra_, THTensor *a)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(orgqr)(THTensor *ra_, THTensor *a, THTensor *tau)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(ormqr)(THTensor *ra_, THTensor *a, THTensor *tau, THTensor *c, const char *side, /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(potrf)(THTensor *ra_, THTensor *a, const char *uplo)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(potri)(THTensor *ra_, THTensor *a, const char *uplo)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(potrs)(THTensor *rb_, THTensor *b, THTensor *a, const char *uplo)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(pstrf)(THTensor *ra_, THIntTensor *rpiv_, THTensor *a, const char *uplo, real tol/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(qr)(THTensor *rq_, THTensor *rr_, THTensor *a)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(syev)(THTensor *re_, THTensor *rv_, THTensor *a, const char *jobz, const char *up/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^void THTensor_(trtrs)(THTensor *rb_, THTensor *ra_, THTensor *b, THTensor *a,$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(dist)(THTensor *tensor, THTensor *src, real value)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(dot)(THTensor *tensor, THTensor *src)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(meanall)(THTensor *tensor)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(normall)(THTensor *tensor, real value)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(prodall)(THTensor *tensor)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(stdall)(THTensor *tensor, int biased)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(sumall)(THTensor *tensor)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(trace)(THTensor *t)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^accreal THTensor_(varall)(THTensor *tensor, int biased)$/;"	f	typeref:typename:accreal
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^int THTensor_(equal)(THTensor *ta, THTensor* tb)$/;"	f	typeref:typename:int
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^ptrdiff_t THTensor_(numel)(THTensor *t)$/;"	f	typeref:typename:ptrdiff_t
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^real THTensor_(maxall)(THTensor *tensor)$/;"	f	typeref:typename:real
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^real THTensor_(medianall)(THTensor *tensor)$/;"	f	typeref:typename:real
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^real THTensor_(minall)(THTensor *tensor)$/;"	f	typeref:typename:real
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^static void THTensor_(quickselect)(real *arr, long *idx, long k, long elements, long stride)$/;"	f	typeref:typename:void	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^static void THTensor_(quickselectnoidx)(real *arr, long k, long elements, long stride)$/;"	f	typeref:typename:void	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^static void THTensor_(quicksortascend)(real *arr, long *idx, long elements, long stride)$/;"	f	typeref:typename:void	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^static void THTensor_(quicksortdescend)(real *arr, long *idx, long elements, long stride)$/;"	f	typeref:typename:void	file:
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(add)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(addbmm)(THTensor *result, real beta, THTensor *t, real alpha, THTensor *batch1, T/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(addcdiv)(THTensor *r_, THTensor *t, real value, THTensor *src1, THTensor *src2)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(addcmul)(THTensor *r_, THTensor *t, real value, THTensor *src1, THTensor *src2)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(addmm)(THTensor *r_, real beta, THTensor *t, real alpha, THTensor *m1, THTensor */;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(addmv)(THTensor *r_, real beta, THTensor *t, real alpha, THTensor *mat, THTensor /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(addr)(THTensor *r_, real beta, THTensor *t, real alpha, THTensor *vec1, THTensor /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(arange)(THTensor *r_, accreal xmin, accreal xmax, accreal step) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(atan2)(THTensor *r_, THTensor *tx, THTensor *ty)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(baddbmm)(THTensor *result, real beta, THTensor *t, real alpha, THTensor *batch1, /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(bhistc)(THTensor *hist, THTensor *tensor, long nbins, real minvalue, real maxvalu/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(bitand)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(bitor)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(bitxor)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cadd)(THTensor *r_, THTensor *t, real value, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cat)(THTensor *r_, THTensor *ta, THTensor *tb, int dimension)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(catArray)(THTensor *result, THTensor **inputs, int numInputs, int dimension)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cbitand)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cbitor)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cbitxor)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cdiv)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cfmod)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(clamp)(THTensor *r_, THTensor *t, real min_value, real max_value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(clshift)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cmax)(THTensor *r, THTensor *t, THTensor *src) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cmaxValue)(THTensor *r, THTensor *t, real value) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cmin)(THTensor *r, THTensor *t, THTensor *src) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cminValue)(THTensor *r, THTensor *t, real value) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cmul)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cpow)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cremainder)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cross)(THTensor *r_, THTensor *a, THTensor *b, int dimension)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(crshift)(THTensor *r_, THTensor *t, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(csub)(THTensor *r_, THTensor *t, real value,THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cumprod)(THTensor *r_, THTensor *t, int dimension)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(cumsum)(THTensor *r_, THTensor *t, int dimension)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(diag)(THTensor *r_, THTensor *t, int k)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(div)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(eye)(THTensor *r_, long n, long m)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(fill)(THTensor *r_, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(fmod)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(gather)(THTensor *tensor, THTensor *src, int dim, THLongTensor *index)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(histc)(THTensor *hist, THTensor *tensor, long nbins, real minvalue, real maxvalue/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(indexAdd)(THTensor *tensor, int dim, THLongTensor *index, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(indexCopy)(THTensor *tensor, int dim, THLongTensor *index, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(indexFill)(THTensor *tensor, int dim, THLongTensor *index, real val)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(indexSelect)(THTensor *tensor, THTensor *src, int dim, THLongTensor *index)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(kthvalue)(THTensor *values_, THLongTensor *indices_, THTensor *t, long k, int dim/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(lerp)(THTensor *r_, THTensor *a, THTensor *b, real weight)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(linspace)(THTensor *r_, real a, real b, long n)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(logspace)(THTensor *r_, real a, real b, long n)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(lshift)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(maskedCopy)(THTensor *tensor, THByteTensor *mask, THTensor* src )$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(maskedFill)(THTensor *tensor, THByteTensor *mask, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(maskedSelect)(THTensor *tensor, THTensor *src, THByteTensor *mask)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(match)(THTensor *r_, THTensor *m1, THTensor *m2, real gain)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(max)(THTensor *values_, THLongTensor *indices_, THTensor *t, int dimension, int k/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(mean)(THTensor *r_, THTensor *t, int dimension, int keepdim)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(median)(THTensor *values_, THLongTensor *indices_, THTensor *t, int dimension, in/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(min)(THTensor *values_, THLongTensor *indices_, THTensor *t, int dimension, int k/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(mode)(THTensor *values_, THLongTensor *indices_, THTensor *t, int dimension, int /;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(mul)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(nonzero)(THLongTensor *subscript, THTensor *tensor)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(norm)(THTensor *r_, THTensor *t, real value, int dimension, int keepdim)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(ones)(THTensor *r_, THLongStorage *size)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(onesLike)(THTensor *r_, THTensor *input)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(prod)(THTensor *r_, THTensor *t, int dimension, int keepdim)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(rand)(THTensor *r_, THGenerator *_generator, THLongStorage *size)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(randn)(THTensor *r_, THGenerator *_generator, THLongStorage *size)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(randperm)(THTensor *r_, THGenerator *_generator, long n)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(range)(THTensor *r_, accreal xmin, accreal xmax, accreal step)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(remainder)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(renorm)(THTensor *res, THTensor *src, real value, int dimension, real maxnorm)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(reshape)(THTensor *r_, THTensor *t, THLongStorage *size)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(rshift)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(scatter)(THTensor *tensor, int dim, THLongTensor *index, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(scatterAdd)(THTensor *tensor, int dim, THLongTensor *index, THTensor *src)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(scatterFill)(THTensor *tensor, int dim, THLongTensor *index, real val)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(sign)(THTensor *r_, THTensor *t)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(sort)(THTensor *rt_, THLongTensor *ri_, THTensor *t, int dimension, int descendin/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(std)(THTensor *r_, THTensor *t, int dimension, int biased, int keepdim)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(sub)(THTensor *r_, THTensor *t, real value)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(sum)(THTensor *r_, THTensor *t, int dimension, int keepdim)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(topk)(THTensor *rt_, THLongTensor *ri_, THTensor *t, long k, int dim, int dir, in/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(tpow)(THTensor *r_, real value, THTensor *t)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(tril)(THTensor *r_, THTensor *t, long k)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(triu)(THTensor *r_, THTensor *t, long k)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(var)(THTensor *r_, THTensor *t, int dimension, int biased, int keepdim)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(zero)(THTensor *r_)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(zeros)(THTensor *r_, THLongStorage *size)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorMath.c	/^void THTensor_(zerosLike)(THTensor *r_, THTensor *input)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(bernoulli)(THTensor *self, THGenerator *_generator, double p)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(bernoulli_DoubleTensor)(THTensor *self, THGenerator *_generator, THDoubleTensor */;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(bernoulli_FloatTensor)(THTensor *self, THGenerator *_generator, THFloatTensor *p)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(cappedRandom)(THTensor *self, THGenerator *_generator, long max) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(cauchy)(THTensor *self, THGenerator *_generator, double median, double sigma)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(clampedRandom)(THTensor *self, THGenerator *_generator, long min, long max) {$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(exponential)(THTensor *self, THGenerator *_generator, double lambda)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(geometric)(THTensor *self, THGenerator *_generator, double p)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(getRNGState)(THGenerator *_generator, THTensor *self)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(logNormal)(THTensor *self, THGenerator *_generator, double mean, double stdv)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(multinomial)(THLongTensor *self, THGenerator *_generator, THTensor *prob_dist, in/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(multinomialAliasDraw)(THLongTensor *self, THGenerator *_generator, THLongTensor */;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(multinomialAliasSetup)(THTensor *probs, THLongTensor *J, THTensor *q)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(normal)(THTensor *self, THGenerator *_generator, double mean, double stdv)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(normal_means)(THTensor *self, THGenerator *gen, THTensor *means, double stddev)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(normal_means_stddevs)(THTensor *self, THGenerator *gen, THTensor *means, THTensor/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(normal_stddevs)(THTensor *self, THGenerator *gen, double mean, THTensor *stddevs)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(random)(THTensor *self, THGenerator *_generator)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(setRNGState)(THGenerator *_generator, THTensor *self)$/;"	f	typeref:typename:void
THTensor_	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^void THTensor_(uniform)(THTensor *self, THGenerator *_generator, double a, double b)$/;"	f	typeref:typename:void
THTensor_fastGet1d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastGet1d(/;"	d
THTensor_fastGet2d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastGet2d(/;"	d
THTensor_fastGet3d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastGet3d(/;"	d
THTensor_fastGet4d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastGet4d(/;"	d
THTensor_fastSet1d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastSet1d(/;"	d
THTensor_fastSet2d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastSet2d(/;"	d
THTensor_fastSet3d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastSet3d(/;"	d
THTensor_fastSet4d	torch7\\lib\\TH\\THTensorMacros.h	/^#define THTensor_fastSet4d(/;"	d
THVector_	torch7\\lib\\TH\\THVector.h	/^#define THVector_(/;"	d
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(adds_DEFAULT)(real *y, const real *x, const real c, const ptrdiff_t n)$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(cadd_DEFAULT)(real *z, const real *x, const real *y, const real c, const ptrdiff_/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(cdiv_DEFAULT)(real *z, const real *x, const real *y, const ptrdiff_t n)$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(cmul_DEFAULT)(real *z, const real *x, const real *y, const ptrdiff_t n)$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(copy_DEFAULT)(real *x, const real *y, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(divs_DEFAULT)(real *y, const real *x, const real c, const ptrdiff_t n)$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(fill_DEFAULT)(real *x, const real c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^void THVector_(muls_DEFAULT)(real *y, const real *x, const real c, const ptrdiff_t n)$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^TH_API void THVector_(adds)(real *r_, const real *t, const real value, const ptrdiff_t n) {$/;"	f	typeref:typename:TH_API void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(cadd)(real *z, const real *x, const real *y, const real c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(cdiv)(real *z, const real *x, const real *y, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(cmul)(real *z, const real *x, const real *y, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(copy)(real *y, const real *x, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(divs)(real *y, const real *x, const real c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(fill)(real *x, const real c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(muls)(real *y, const real *x, const real c, const ptrdiff_t n) {$/;"	f	typeref:typename:void
THVector_	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^void THVector_(vectorDispatchInit)(void)$/;"	f	typeref:typename:void
TH_ALLOCATOR_INC	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_INC$/;"	d
TH_ALLOCATOR_MAPPED_EXCLUSIVE	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_MAPPED_EXCLUSIVE /;"	d
TH_ALLOCATOR_MAPPED_FROMFD	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_MAPPED_FROMFD /;"	d
TH_ALLOCATOR_MAPPED_KEEPFD	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_MAPPED_KEEPFD /;"	d
TH_ALLOCATOR_MAPPED_NOCREATE	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_MAPPED_NOCREATE /;"	d
TH_ALLOCATOR_MAPPED_SHARED	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_MAPPED_SHARED /;"	d
TH_ALLOCATOR_MAPPED_SHAREDMEM	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_MAPPED_SHAREDMEM /;"	d
TH_ALLOCATOR_MAPPED_UNLINK	torch7\\lib\\TH\\THAllocator.h	/^#define TH_ALLOCATOR_MAPPED_UNLINK /;"	d
TH_ALLOC_ALIGNMENT	torch7\\lib\\TH\\THAllocator.c	/^#define TH_ALLOC_ALIGNMENT /;"	d	file:
TH_API	bin\\torch7\\lib\\TH\\THGeneral.h	/^#  define TH_API /;"	d
TH_API	bin\\torch7\\lib\\TH\\THGeneral.h	/^# define TH_API /;"	d
TH_API	torch7\\lib\\TH\\THGeneral.h.in	/^#  define TH_API /;"	d	file:
TH_API	torch7\\lib\\TH\\THGeneral.h.in	/^# define TH_API /;"	d	file:
TH_ATOMIC_INC	torch7\\lib\\TH\\THAtomic.h	/^#define TH_ATOMIC_INC$/;"	d
TH_ATOMIC_IPC_REFCOUNT	torch7\\lib\\TH\\THAtomic.h	/^#define TH_ATOMIC_IPC_REFCOUNT /;"	d
TH_AVX2_H	torch7\\lib\\TH\\vector\\AVX2.h	/^#define TH_AVX2_H$/;"	d
TH_AVX_H	torch7\\lib\\TH\\vector\\AVX.h	/^#define TH_AVX_H$/;"	d
TH_BLAS_INC	torch7\\lib\\TH\\THBlas.h	/^#define TH_BLAS_INC$/;"	d
TH_CONCAT_2	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_2(/;"	d
TH_CONCAT_2	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_2(/;"	d	file:
TH_CONCAT_2_EXPAND	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_2_EXPAND(/;"	d
TH_CONCAT_2_EXPAND	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_2_EXPAND(/;"	d	file:
TH_CONCAT_3	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_3(/;"	d
TH_CONCAT_3	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_3(/;"	d	file:
TH_CONCAT_3_EXPAND	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_3_EXPAND(/;"	d
TH_CONCAT_3_EXPAND	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_3_EXPAND(/;"	d	file:
TH_CONCAT_4	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_4(/;"	d
TH_CONCAT_4	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_4(/;"	d	file:
TH_CONCAT_4_EXPAND	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_4_EXPAND(/;"	d
TH_CONCAT_4_EXPAND	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_4_EXPAND(/;"	d	file:
TH_CONCAT_STRING_2	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_STRING_2(/;"	d
TH_CONCAT_STRING_2	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_STRING_2(/;"	d	file:
TH_CONCAT_STRING_2_EXPAND	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_STRING_2_EXPAND(/;"	d
TH_CONCAT_STRING_2_EXPAND	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_STRING_2_EXPAND(/;"	d	file:
TH_CONCAT_STRING_3	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_STRING_3(/;"	d
TH_CONCAT_STRING_3	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_STRING_3(/;"	d	file:
TH_CONCAT_STRING_3_EXPAND	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_STRING_3_EXPAND(/;"	d
TH_CONCAT_STRING_3_EXPAND	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_STRING_3_EXPAND(/;"	d	file:
TH_CONCAT_STRING_4	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_STRING_4(/;"	d
TH_CONCAT_STRING_4	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_STRING_4(/;"	d	file:
TH_CONCAT_STRING_4_EXPAND	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_CONCAT_STRING_4_EXPAND(/;"	d
TH_CONCAT_STRING_4_EXPAND	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_CONCAT_STRING_4_EXPAND(/;"	d	file:
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateByteType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateCharType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateDoubleType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateFloatType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateHalfType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateIntType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateLongType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_ACCREAL_TO_REAL	torch7\\lib\\TH\\THGenerateShortType.h	/^#define TH_CONVERT_ACCREAL_TO_REAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateByteType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateCharType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateDoubleType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateFloatType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateHalfType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateIntType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateLongType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_CONVERT_REAL_TO_ACCREAL	torch7\\lib\\TH\\THGenerateShortType.h	/^#define TH_CONVERT_REAL_TO_ACCREAL(/;"	d
TH_DESC_BUFF_LEN	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_DESC_BUFF_LEN /;"	d
TH_DESC_BUFF_LEN	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_DESC_BUFF_LEN /;"	d	file:
TH_DISK_FILE_INC	torch7\\lib\\TH\\THDiskFile.h	/^#define TH_DISK_FILE_INC$/;"	d
TH_EXTERNC	bin\\torch7\\lib\\TH\\THGeneral.h	/^# define TH_EXTERNC /;"	d
TH_EXTERNC	torch7\\lib\\TH\\THGeneral.h.in	/^# define TH_EXTERNC /;"	d	file:
TH_FILE_INC	torch7\\lib\\TH\\THFile.h	/^#define TH_FILE_INC$/;"	d
TH_GENERAL_INC	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_GENERAL_INC$/;"	d
TH_GENERAL_INC	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_GENERAL_INC$/;"	d	file:
TH_GENERIC_FILE	torch7\\generic\\Storage.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\generic\\Tensor.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\generic\\TensorOperator.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THBlas.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THBlas.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THLapack.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THLapack.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THStorage.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THStorage.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THStorageCopy.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THStorageCopy.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensor.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensor.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorConv.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorConv.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorCopy.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorCopy.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorLapack.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorLapack.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorMath.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorRandom.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THTensorRandom.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THVector.h	/^#define TH_GENERIC_FILE /;"	d
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THVectorDefault.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_GENERIC_FILE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^#define TH_GENERIC_FILE /;"	d	file:
TH_HALF_BITS_TO_LITERAL	torch7\\lib\\TH\\THHalf.h	/^# define TH_HALF_BITS_TO_LITERAL(/;"	d
TH_HALF_H	torch7\\lib\\TH\\THHalf.h	/^#define TH_HALF_H$/;"	d
TH_HALF_INF	torch7\\lib\\TH\\THHalf.h	/^#define TH_HALF_INF /;"	d
TH_HALF_ZERO	torch7\\lib\\TH\\THHalf.h	/^#define TH_HALF_ZERO /;"	d
TH_INC	torch7\\lib\\TH\\TH.h	/^#define TH_INC$/;"	d
TH_INDEX_BASE	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define TH_INDEX_BASE /;"	d
TH_INDEX_BASE	torch7\\lib\\TH\\THGeneral.h.in	/^#define TH_INDEX_BASE /;"	d	file:
TH_LAPACK_INC	torch7\\lib\\TH\\THLapack.h	/^#define TH_LAPACK_INC$/;"	d
TH_LOG_ADD_INC	torch7\\lib\\TH\\THLogAdd.h	/^#define TH_LOG_ADD_INC$/;"	d
TH_MATH_NAME	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TH_MATH_NAME(/;"	d	file:
TH_MEMORY_FILE_INC	torch7\\lib\\TH\\THMemoryFile.h	/^#define TH_MEMORY_FILE_INC$/;"	d
TH_OMP_OVERHEAD_THRESHOLD	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TH_OMP_OVERHEAD_THRESHOLD /;"	d	file:
TH_RANDOM_INC	torch7\\lib\\TH\\THRandom.h	/^#define TH_RANDOM_INC$/;"	d
TH_REAL_IS_BYTE	torch7\\lib\\TH\\THGenerateByteType.h	/^#define TH_REAL_IS_BYTE$/;"	d
TH_REAL_IS_CHAR	torch7\\lib\\TH\\THGenerateCharType.h	/^#define TH_REAL_IS_CHAR$/;"	d
TH_REAL_IS_DOUBLE	torch7\\lib\\TH\\THGenerateDoubleType.h	/^#define TH_REAL_IS_DOUBLE$/;"	d
TH_REAL_IS_FLOAT	torch7\\lib\\TH\\THGenerateFloatType.h	/^#define TH_REAL_IS_FLOAT$/;"	d
TH_REAL_IS_HALF	torch7\\lib\\TH\\THGenerateHalfType.h	/^#define TH_REAL_IS_HALF$/;"	d
TH_REAL_IS_INT	torch7\\lib\\TH\\THGenerateIntType.h	/^#define TH_REAL_IS_INT$/;"	d
TH_REAL_IS_LONG	torch7\\lib\\TH\\THGenerateLongType.h	/^#define TH_REAL_IS_LONG$/;"	d
TH_REAL_IS_SHORT	torch7\\lib\\TH\\THGenerateShortType.h	/^#define TH_REAL_IS_SHORT$/;"	d
TH_SIMD_INC	torch7\\lib\\TH\\generic\\simd\\simd.h	/^#define TH_SIMD_INC$/;"	d
TH_SIZE_INC	torch7\\lib\\TH\\THSize.h	/^#define TH_SIZE_INC$/;"	d
TH_STORAGE_FREEMEM	torch7\\lib\\TH\\generic\\THStorage.h	/^#define TH_STORAGE_FREEMEM /;"	d
TH_STORAGE_GET	torch7\\lib\\TH\\THStorage.h	/^#define TH_STORAGE_GET(/;"	d
TH_STORAGE_INC	torch7\\lib\\TH\\THStorage.h	/^#define TH_STORAGE_INC$/;"	d
TH_STORAGE_REFCOUNTED	torch7\\lib\\TH\\generic\\THStorage.h	/^#define TH_STORAGE_REFCOUNTED /;"	d
TH_STORAGE_RESIZABLE	torch7\\lib\\TH\\generic\\THStorage.h	/^#define TH_STORAGE_RESIZABLE /;"	d
TH_STORAGE_SET	torch7\\lib\\TH\\THStorage.h	/^#define TH_STORAGE_SET(/;"	d
TH_STORAGE_VIEW	torch7\\lib\\TH\\generic\\THStorage.h	/^#define TH_STORAGE_VIEW /;"	d
TH_TENSOR_APPLY	torch7\\lib\\TH\\THTensorApply.h	/^#define TH_TENSOR_APPLY(/;"	d
TH_TENSOR_APPLY2	torch7\\lib\\TH\\THTensorApply.h	/^#define TH_TENSOR_APPLY2(/;"	d
TH_TENSOR_APPLY2_CONTIG	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TH_TENSOR_APPLY2_CONTIG(/;"	d	file:
TH_TENSOR_APPLY2_D	torch7\\lib\\TH\\THTensorApply.h	/^#define TH_TENSOR_APPLY2_D(/;"	d
TH_TENSOR_APPLY3	torch7\\lib\\TH\\THTensorApply.h	/^#define TH_TENSOR_APPLY3(/;"	d
TH_TENSOR_APPLY3_CONTIG	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TH_TENSOR_APPLY3_CONTIG(/;"	d	file:
TH_TENSOR_APPLY3_D	torch7\\lib\\TH\\THTensorApply.h	/^#define TH_TENSOR_APPLY3_D(/;"	d
TH_TENSOR_APPLY_CONTIG	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define TH_TENSOR_APPLY_CONTIG(/;"	d	file:
TH_TENSOR_APPLY_D	torch7\\lib\\TH\\THTensorApply.h	/^#define TH_TENSOR_APPLY_D(/;"	d
TH_TENSOR_APPLY_INC	torch7\\lib\\TH\\THTensorApply.h	/^#define TH_TENSOR_APPLY_INC$/;"	d
TH_TENSOR_DIM_APPLY	torch7\\lib\\TH\\THTensorDimApply.h	/^#define TH_TENSOR_DIM_APPLY(/;"	d
TH_TENSOR_DIM_APPLY2	torch7\\lib\\TH\\THTensorDimApply.h	/^#define TH_TENSOR_DIM_APPLY2(/;"	d
TH_TENSOR_DIM_APPLY3	torch7\\lib\\TH\\THTensorDimApply.h	/^#define TH_TENSOR_DIM_APPLY3(/;"	d
TH_TENSOR_DIM_APPLY_INC	torch7\\lib\\TH\\THTensorDimApply.h	/^#define TH_TENSOR_DIM_APPLY_INC$/;"	d
TH_TENSOR_INC	torch7\\lib\\TH\\THTensor.h	/^#define TH_TENSOR_INC$/;"	d
TH_TENSOR_MACROS_INC	torch7\\lib\\TH\\THTensorMacros.h	/^#define TH_TENSOR_MACROS_INC$/;"	d
TH_TENSOR_REFCOUNTED	torch7\\lib\\TH\\generic\\THTensor.h	/^#define TH_TENSOR_REFCOUNTED /;"	d
TH_VECTOR_INC	torch7\\lib\\TH\\THVector.h	/^#define TH_VECTOR_INC$/;"	d
TH_float2half	torch7\\lib\\TH\\THHalf.c	/^THHalf TH_float2half(float f)$/;"	f	typeref:typename:THHalf
TH_float2halfbits	torch7\\lib\\TH\\THHalf.c	/^void TH_float2halfbits(float* src, unsigned short* dest)$/;"	f	typeref:typename:void
TH_frac	torch7\\lib\\TH\\THMath.h	/^static inline double TH_frac(double x) {$/;"	f	typeref:typename:double
TH_frac	torch7\\test\\test.lua	/^   local function TH_frac(x)$/;"	f
TH_fracf	torch7\\lib\\TH\\THMath.h	/^static inline float TH_fracf(float x) {$/;"	f	typeref:typename:float
TH_half2float	torch7\\lib\\TH\\THHalf.c	/^TH_API float TH_half2float(THHalf h)$/;"	f	typeref:typename:TH_API float
TH_halfbits2float	torch7\\lib\\TH\\THHalf.c	/^void TH_halfbits2float(unsigned short* src, float* res)$/;"	f	typeref:typename:void
TH_lerp	torch7\\lib\\TH\\THMath.h	/^static inline double TH_lerp(double a, double b, double weight) {$/;"	f	typeref:typename:double
TH_lerp	torch7\\test\\test.lua	/^   local function TH_lerp(a, b, weight)$/;"	f
TH_lerpf	torch7\\lib\\TH\\THMath.h	/^static inline float TH_lerpf(float a, float b, float weight) {$/;"	f	typeref:typename:float
TH_rsqrt	torch7\\lib\\TH\\THMath.h	/^static inline double TH_rsqrt(double x) {$/;"	f	typeref:typename:double
TH_rsqrt	torch7\\test\\test.lua	/^   local function TH_rsqrt(x)$/;"	f
TH_rsqrtf	torch7\\lib\\TH\\THMath.h	/^static inline float TH_rsqrtf(float x) {$/;"	f	typeref:typename:float
TH_sigmoid	torch7\\lib\\TH\\THMath.h	/^static inline double TH_sigmoid(double value) {$/;"	f	typeref:typename:double
TH_sigmoidf	torch7\\lib\\TH\\THMath.h	/^static inline float TH_sigmoidf(float value) {$/;"	f	typeref:typename:float
TH_trunc	torch7\\test\\test.lua	/^   local function TH_trunc(x)$/;"	f
THandler	dmlc-core\\include\\dmlc\\json.h	/^                                          CommonJSONSerializer<T> >::Type THandler;$/;"	t	function:dmlc::json::Handler::Read	typeref:typename:dmlc::IfThenElseType<dmlc::is_arithmetic<T>::value,NumericHandler<T>,CommonJSONSerializer<T>>::Type
THandler	dmlc-core\\include\\dmlc\\json.h	/^                                          CommonJSONSerializer<T> >::Type THandler;$/;"	t	function:dmlc::json::Handler::Write	typeref:typename:dmlc::IfThenElseType<dmlc::is_arithmetic<T>::value,NumericHandler<T>,CommonJSONSerializer<T>>::Type
THandler	nnvm\\include\\dmlc\\json.h	/^                                          CommonJSONSerializer<T> >::Type THandler;$/;"	t	function:dmlc::json::Handler::Read	typeref:typename:dmlc::IfThenElseType<dmlc::is_arithmetic<T>::value,NumericHandler<T>,CommonJSONSerializer<T>>::Type
THandler	nnvm\\include\\dmlc\\json.h	/^                                          CommonJSONSerializer<T> >::Type THandler;$/;"	t	function:dmlc::json::Handler::Write	typeref:typename:dmlc::IfThenElseType<dmlc::is_arithmetic<T>::value,NumericHandler<T>,CommonJSONSerializer<T>>::Type
TINYFLOW_BASE_H_	include\\tinyflow\\base.h	/^#define TINYFLOW_BASE_H_$/;"	d
TINYFLOW_C_API_H_	include\\tinyflow\\c_api.h	/^#define TINYFLOW_C_API_H_$/;"	d
TINYFLOW_OP_UTIL_H_	src\\op_util.h	/^#define TINYFLOW_OP_UTIL_H_$/;"	d
TINYFLOW_TORCH_UTIL_H_	src\\torch\\torch_util.h	/^#define TINYFLOW_TORCH_UTIL_H_$/;"	d
TIsBackward	nnvm\\include\\nnvm\\op_attr_types.h	/^using TIsBackward = bool;$/;"	t	namespace:nnvm	typeref:typename:bool
TK_AND	lua\\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	lua\\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	lua\\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_DBCOLON	lua\\llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DO	lua\\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	lua\\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_ELSE	lua\\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	lua\\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	lua\\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	lua\\llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EQ	lua\\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_FALSE	lua\\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FLT	lua\\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_FOR	lua\\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	lua\\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	lua\\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_GOTO	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IDIV	lua\\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_IF	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_INT	lua\\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_LE	lua\\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_LOCAL	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	lua\\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NE	lua\\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_NIL	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_OR	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	lua\\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	lua\\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_SHL	lua\\llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHR	lua\\llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_STRING	lua\\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_THEN	lua\\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	lua\\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	lua\\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	lua\\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TMS	lua\\ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon1a01e9460103
TM_ADD	lua\\ltm.h	/^  TM_ADD,$/;"	e	enum:__anon1a01e9460103
TM_BAND	lua\\ltm.h	/^  TM_BAND,$/;"	e	enum:__anon1a01e9460103
TM_BNOT	lua\\ltm.h	/^  TM_BNOT,$/;"	e	enum:__anon1a01e9460103
TM_BOR	lua\\ltm.h	/^  TM_BOR,$/;"	e	enum:__anon1a01e9460103
TM_BXOR	lua\\ltm.h	/^  TM_BXOR,$/;"	e	enum:__anon1a01e9460103
TM_CALL	lua\\ltm.h	/^  TM_CALL,$/;"	e	enum:__anon1a01e9460103
TM_CLOSE	lua\\ltm.h	/^  TM_CLOSE,$/;"	e	enum:__anon1a01e9460103
TM_CONCAT	lua\\ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon1a01e9460103
TM_DIV	lua\\ltm.h	/^  TM_DIV,$/;"	e	enum:__anon1a01e9460103
TM_EQ	lua\\ltm.h	/^  TM_EQ,  \/* last tag method with fast access *\/$/;"	e	enum:__anon1a01e9460103
TM_GC	lua\\ltm.h	/^  TM_GC,$/;"	e	enum:__anon1a01e9460103
TM_IDIV	lua\\ltm.h	/^  TM_IDIV,$/;"	e	enum:__anon1a01e9460103
TM_INDEX	lua\\ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon1a01e9460103
TM_LE	lua\\ltm.h	/^  TM_LE,$/;"	e	enum:__anon1a01e9460103
TM_LEN	lua\\ltm.h	/^  TM_LEN,$/;"	e	enum:__anon1a01e9460103
TM_LT	lua\\ltm.h	/^  TM_LT,$/;"	e	enum:__anon1a01e9460103
TM_MOD	lua\\ltm.h	/^  TM_MOD,$/;"	e	enum:__anon1a01e9460103
TM_MODE	lua\\ltm.h	/^  TM_MODE,$/;"	e	enum:__anon1a01e9460103
TM_MUL	lua\\ltm.h	/^  TM_MUL,$/;"	e	enum:__anon1a01e9460103
TM_N	lua\\ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon1a01e9460103
TM_NEWINDEX	lua\\ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon1a01e9460103
TM_POW	lua\\ltm.h	/^  TM_POW,$/;"	e	enum:__anon1a01e9460103
TM_SHL	lua\\ltm.h	/^  TM_SHL,$/;"	e	enum:__anon1a01e9460103
TM_SHR	lua\\ltm.h	/^  TM_SHR,$/;"	e	enum:__anon1a01e9460103
TM_SUB	lua\\ltm.h	/^  TM_SUB,$/;"	e	enum:__anon1a01e9460103
TM_UNM	lua\\ltm.h	/^  TM_UNM,$/;"	e	enum:__anon1a01e9460103
TORCH_API	torch7\\utils.h	/^#  define TORCH_API /;"	d
TORCH_API	torch7\\utils.h	/^# define TORCH_API /;"	d
TORCH_EXTERNC	torch7\\utils.h	/^# define TORCH_EXTERNC /;"	d
TORCH_GENERAL_INC	torch7\\general.h	/^#define TORCH_GENERAL_INC$/;"	d
TORCH_PATH	Makefile	/^TORCH_PATH=${TORCH_HOME}$/;"	m
TORCH_UTILS_INC	torch7\\utils.h	/^#define TORCH_UTILS_INC$/;"	d
TShape	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape(RandomAccessIterator begin,$/;"	f	class:nnvm::TShape
TShape	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape(Tuple<index_t>&& s) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::TShape
TShape	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape(const Tuple<index_t>& s) { \/\/ NOLINT(*)$/;"	f	class:nnvm::TShape
TShape	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape(index_t ndim) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::TShape
TShape	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape(mshadow::Shape<dim> &&s) {\/\/ NOLINT(*)$/;"	f	class:nnvm::TShape
TShape	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape(std::initializer_list<index_t> init) {$/;"	f	class:nnvm::TShape
TShape	nnvm\\include\\nnvm\\tuple.h	/^class TShape : public Tuple<index_t> {$/;"	c	namespace:nnvm
TString	lua\\lobject.h	/^typedef struct TString {$/;"	s
TString	lua\\lobject.h	/^} TString;$/;"	t	typeref:struct:TString
TValue	lua\\lobject.h	/^typedef struct TValue {$/;"	s
TValue	lua\\lobject.h	/^} TValue;$/;"	t	typeref:struct:TValue
TValuefields	lua\\lobject.h	/^#define TValuefields	/;"	d
TWIST	torch7\\lib\\TH\\THRandom.c	/^#define TWIST(/;"	d	file:
Table	lua\\lobject.h	/^typedef struct Table {$/;"	s
Table	lua\\lobject.h	/^} Table;$/;"	t	typeref:struct:Table
TaskRecord	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^    public TaskRecord(int taskId, String role) {$/;"	m	class:TaskRecord
TaskRecord	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^public class TaskRecord {$/;"	c
Tell	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual size_t Tell(void) {$/;"	f	struct:dmlc::MemoryFixedSizeStream	typeref:typename:size_t
Tell	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual size_t Tell(void) {$/;"	f	struct:dmlc::MemoryStringStream	typeref:typename:size_t
Tell	dmlc-core\\include\\dmlc\\recordio.h	/^  inline size_t Tell(void) {$/;"	f	class:dmlc::RecordIOWriter	typeref:typename:size_t
Tell	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  virtual size_t Tell(void) {$/;"	f	class:dmlc::io::HDFSStream	typeref:typename:size_t	file:
Tell	dmlc-core\\src\\io\\local_filesys.cc	/^  virtual size_t Tell(void) {$/;"	f	class:dmlc::io::FileStream	typeref:typename:size_t	file:
Tell	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual size_t Tell(void) {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:size_t	file:
Tensor	torch7\\doc\\tensor.md	/^# Tensor #$/;"	c
Tensor constructors	torch7\\doc\\tensor.md	/^## Tensor constructors ##$/;"	s
Tensor.__tostring__	torch7\\Tensor.lua	/^function Tensor.__tostring__(self)$/;"	f
Tensor.byte	torch7\\Tensor.lua	/^function Tensor.byte(self)$/;"	f
Tensor.char	torch7\\Tensor.lua	/^function Tensor.char(self)$/;"	f
Tensor.chunk	torch7\\Tensor.lua	/^function Tensor.chunk(result, tensor, nChunk, dim)$/;"	f
Tensor.double	torch7\\Tensor.lua	/^function Tensor.double(self)$/;"	f
Tensor.expand	torch7\\Tensor.lua	/^function Tensor.expand(result,tensor,...)$/;"	f
Tensor.expandAs	torch7\\Tensor.lua	/^function Tensor.expandAs(result,tensor,template)$/;"	f
Tensor.float	torch7\\Tensor.lua	/^function Tensor.float(self)$/;"	f
Tensor.half	torch7\\Tensor.lua	/^function Tensor.half(self)$/;"	f
Tensor.int	torch7\\Tensor.lua	/^function Tensor.int(self)$/;"	f
Tensor.long	torch7\\Tensor.lua	/^function Tensor.long(self)$/;"	f
Tensor.permute	torch7\\Tensor.lua	/^function Tensor.permute(tensor, ...)$/;"	f
Tensor.real	torch7\\Tensor.lua	/^function Tensor.real(self)$/;"	f
Tensor.repeatTensor	torch7\\Tensor.lua	/^function Tensor.repeatTensor(result,tensor,...)$/;"	f
Tensor.short	torch7\\Tensor.lua	/^function Tensor.short(self)$/;"	f
Tensor.split	torch7\\Tensor.lua	/^function Tensor.split(result, tensor, splitSize, dim)$/;"	f
Tensor.totable	torch7\\Tensor.lua	/^function Tensor.totable(tensor)$/;"	f
Tensor.type	torch7\\Tensor.lua	/^function Tensor.type(self,type)$/;"	f
Tensor.typeAs	torch7\\Tensor.lua	/^function Tensor.typeAs(self,tensor)$/;"	f
Tensor.view	torch7\\Tensor.lua	/^function Tensor.view(result, src, ...)$/;"	f
Tensor.viewAs	torch7\\Tensor.lua	/^function Tensor.viewAs(result, src, template)$/;"	f
Tensor__printMatrix	torch7\\Tensor.lua	/^local function Tensor__printMatrix(self, indent)$/;"	f
Tensor__printTensor	torch7\\Tensor.lua	/^local function Tensor__printTensor(self)$/;"	f
Tensor__totable	torch7\\Tensor.lua	/^         local function Tensor__totable(self)$/;"	f
TestSaveLoad	dmlc-core\\test\\unittest\\unittest_json.cc	/^inline void TestSaveLoad(T data) {$/;"	f	namespace:json	typeref:typename:void
TestSaveLoad	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^inline void TestSaveLoad(T data) {$/;"	f	typeref:typename:void
TestSuite	torch7\\doc\\tester.md	/^# TestSuite #$/;"	c
Tester	torch7\\doc\\tester.md	/^# Tester #$/;"	c
Tester:__init	torch7\\Tester.lua	/^function Tester:__init()$/;"	f
Tester:_addDebugInfo	torch7\\Tester.lua	/^function Tester:_addDebugInfo(message)$/;"	f
Tester:_assertTableEqOrNeq	torch7\\Tester.lua	/^function Tester:_assertTableEqOrNeq(ta, tb, negate, ...)$/;"	f
Tester:_assertTensorEqOrNeq	torch7\\Tester.lua	/^function Tester:_assertTensorEqOrNeq(ta, tb, negate, ...)$/;"	f
Tester:_assert_sub	torch7\\Tester.lua	/^function Tester:_assert_sub(condition, message)$/;"	f
Tester:_eqOrNeq	torch7\\Tester.lua	/^function Tester:_eqOrNeq(got, expected, negate, ...)$/;"	f
Tester:_failure	torch7\\Tester.lua	/^function Tester:_failure(message)$/;"	f
Tester:_getTests	torch7\\Tester.lua	/^function Tester:_getTests(testNames)$/;"	f
Tester:_pcall	torch7\\Tester.lua	/^function Tester:_pcall(f)$/;"	f
Tester:_report	torch7\\Tester.lua	/^function Tester:_report(tests)$/;"	f
Tester:_run	torch7\\Tester.lua	/^function Tester:_run(tests)$/;"	f
Tester:_success	torch7\\Tester.lua	/^function Tester:_success()$/;"	f
Tester:_warning	torch7\\Tester.lua	/^function Tester:_warning(message)$/;"	f
Tester:add	torch7\\Tester.lua	/^function Tester:add(f, name)$/;"	f
Tester:assert	torch7\\Tester.lua	/^function Tester:assert(condition, ...)$/;"	f
Tester:assertError	torch7\\Tester.lua	/^function Tester:assertError(f, ...)$/;"	f
Tester:assertErrorMsg	torch7\\Tester.lua	/^function Tester:assertErrorMsg(f, errmsg, ...)$/;"	f
Tester:assertErrorObj	torch7\\Tester.lua	/^function Tester:assertErrorObj(f, errcomp, ...)$/;"	f
Tester:assertErrorPattern	torch7\\Tester.lua	/^function Tester:assertErrorPattern(f, errPattern, ...)$/;"	f
Tester:assertGeneralEq	torch7\\Tester.lua	/^function Tester:assertGeneralEq(got, expected, ...)$/;"	f
Tester:assertGeneralNe	torch7\\Tester.lua	/^function Tester:assertGeneralNe(got, unexpected, ...)$/;"	f
Tester:assertNoError	torch7\\Tester.lua	/^function Tester:assertNoError(f, ...)$/;"	f
Tester:assertTableEq	torch7\\Tester.lua	/^function Tester:assertTableEq(ta, tb, ...)$/;"	f
Tester:assertTableNe	torch7\\Tester.lua	/^function Tester:assertTableNe(ta, tb, ...)$/;"	f
Tester:assertTensorEq	torch7\\Tester.lua	/^function Tester:assertTensorEq(ta, tb, ...)$/;"	f
Tester:assertTensorNe	torch7\\Tester.lua	/^function Tester:assertTensorNe(ta, tb, ...)$/;"	f
Tester:assertalmosteq	torch7\\Tester.lua	/^function Tester:assertalmosteq(a, b, ...)$/;"	f
Tester:asserteq	torch7\\Tester.lua	/^function Tester:asserteq(a, b, ...)$/;"	f
Tester:assertge	torch7\\Tester.lua	/^function Tester:assertge(a, b, ...)$/;"	f
Tester:assertgt	torch7\\Tester.lua	/^function Tester:assertgt(a, b, ...)$/;"	f
Tester:assertle	torch7\\Tester.lua	/^function Tester:assertle(a, b, ...)$/;"	f
Tester:assertlt	torch7\\Tester.lua	/^function Tester:assertlt(a, b, ...)$/;"	f
Tester:assertne	torch7\\Tester.lua	/^function Tester:assertne(a, b, ...)$/;"	f
Tester:disable	torch7\\Tester.lua	/^function Tester:disable(testNames)$/;"	f
Tester:eq	torch7\\Tester.lua	/^function Tester:eq(got, expected, ...)$/;"	f
Tester:ne	torch7\\Tester.lua	/^function Tester:ne(got, unexpected, ...)$/;"	f
Tester:run	torch7\\Tester.lua	/^function Tester:run(testNames)$/;"	f
Tester:setEarlyAbort	torch7\\Tester.lua	/^function Tester:setEarlyAbort(earlyAbort)$/;"	f
Tester:setRethrowErrors	torch7\\Tester.lua	/^function Tester:setRethrowErrors(rethrow)$/;"	f
Tester:setSummaryOnly	torch7\\Tester.lua	/^function Tester:setSummaryOnly(summaryOnly)$/;"	f
TextParserBase	dmlc-core\\src\\data\\text_parser.h	/^  explicit TextParserBase(InputSplit *source,$/;"	f	class:dmlc::data::TextParserBase
TextParserBase	dmlc-core\\src\\data\\text_parser.h	/^class TextParserBase : public ParserImpl<IndexType> {$/;"	c	namespace:dmlc::data
The Design	README.md	/^## The Design$/;"	s
ThreadLocalState	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaState* LuaState::ThreadLocalState() {$/;"	f	class:dmlc::LuaState	typeref:typename:LuaState *
ThreadLocalState	src\\torch\\torch_util.h	/^  static TorchState* ThreadLocalState() {$/;"	f	class:tinyflow::TorchState	typeref:typename:TorchState *
ThreadLocalStore	dmlc-core\\include\\dmlc\\thread_local.h	/^  ThreadLocalStore() {}$/;"	f	class:dmlc::ThreadLocalStore
ThreadLocalStore	dmlc-core\\include\\dmlc\\thread_local.h	/^class ThreadLocalStore {$/;"	c	namespace:dmlc
ThreadLocalStore	nnvm\\include\\dmlc\\thread_local.h	/^  ThreadLocalStore() {}$/;"	f	class:dmlc::ThreadLocalStore
ThreadLocalStore	nnvm\\include\\dmlc\\thread_local.h	/^class ThreadLocalStore {$/;"	c	namespace:dmlc
ThreadedInputSplit	dmlc-core\\src\\io\\threaded_input_split.h	/^  explicit ThreadedInputSplit(InputSplitBase *base)$/;"	f	class:dmlc::io::ThreadedInputSplit
ThreadedInputSplit	dmlc-core\\src\\io\\threaded_input_split.h	/^class ThreadedInputSplit : public InputSplit {$/;"	c	namespace:dmlc::io
ThreadedIter	dmlc-core\\include\\dmlc\\threadediter.h	/^  explicit ThreadedIter(size_t max_capacity = 8)$/;"	f	class:dmlc::ThreadedIter
ThreadedIter	dmlc-core\\include\\dmlc\\threadediter.h	/^class ThreadedIter : public DataIter<DType> {$/;"	c	namespace:dmlc
ThreadedParser	dmlc-core\\src\\data\\parser.h	/^  explicit ThreadedParser(ParserImpl<IndexType> *base)$/;"	f	class:dmlc::data::ThreadedParser
ThreadedParser	dmlc-core\\src\\data\\parser.h	/^class ThreadedParser : public ParserImpl<IndexType> {$/;"	c	namespace:dmlc::data
ThreadlocalAllocator	dmlc-core\\include\\dmlc\\memory.h	/^  ThreadlocalAllocator() {}$/;"	f	class:dmlc::ThreadlocalAllocator
ThreadlocalAllocator	dmlc-core\\include\\dmlc\\memory.h	/^  ThreadlocalAllocator(const ThreadlocalAllocator<U>& other) {}$/;"	f	class:dmlc::ThreadlocalAllocator
ThreadlocalAllocator	dmlc-core\\include\\dmlc\\memory.h	/^class ThreadlocalAllocator {$/;"	c	namespace:dmlc
ThreadlocalAllocator	nnvm\\include\\dmlc\\memory.h	/^  ThreadlocalAllocator() {}$/;"	f	class:dmlc::ThreadlocalAllocator
ThreadlocalAllocator	nnvm\\include\\dmlc\\memory.h	/^  ThreadlocalAllocator(const ThreadlocalAllocator<U>& other) {}$/;"	f	class:dmlc::ThreadlocalAllocator
ThreadlocalAllocator	nnvm\\include\\dmlc\\memory.h	/^class ThreadlocalAllocator {$/;"	c	namespace:dmlc
ThreadlocalSharedPtr	dmlc-core\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr() : block_(nullptr) {}$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	dmlc-core\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr(ThreadlocalSharedPtr<T>&& other)$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	dmlc-core\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr(const ThreadlocalSharedPtr<T>& other)$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	dmlc-core\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr(std::nullptr_t other) : block_(nullptr) {}  \/\/ NOLINT(*)$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	dmlc-core\\include\\dmlc\\memory.h	/^struct ThreadlocalSharedPtr {$/;"	s	namespace:dmlc
ThreadlocalSharedPtr	nnvm\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr() : block_(nullptr) {}$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	nnvm\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr(ThreadlocalSharedPtr<T>&& other)$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	nnvm\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr(const ThreadlocalSharedPtr<T>& other)$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	nnvm\\include\\dmlc\\memory.h	/^  ThreadlocalSharedPtr(std::nullptr_t other) : block_(nullptr) {}  \/\/ NOLINT(*)$/;"	f	struct:dmlc::ThreadlocalSharedPtr
ThreadlocalSharedPtr	nnvm\\include\\dmlc\\memory.h	/^struct ThreadlocalSharedPtr {$/;"	s	namespace:dmlc
TimeType	torch7\\Timer.c	/^#define TimeType /;"	d	file:
Timer	torch7\\Timer.c	/^} Timer;$/;"	t	typeref:struct:_Timer	file:
Timer	torch7\\doc\\timer.md	/^# Timer #$/;"	c
Timer Class Constructor and Methods	torch7\\doc\\timer.md	/^## Timer Class Constructor and Methods ##$/;"	s
TinyAPIThreadLocalEntry	src\\c_api.cc	/^struct TinyAPIThreadLocalEntry {$/;"	s	file:
TinyFlow: Build Your Own DL System in 2K Lines	README.md	/^# TinyFlow: Build Your Own DL System in 2K Lines$/;"	c
ToProtoString	dmlc-core\\src\\config.cc	/^string Config::ToProtoString(void) const {$/;"	f	class:dmlc::Config	typeref:typename:string
Token	dmlc-core\\src\\config.cc	/^struct Token {$/;"	s	namespace:dmlc	file:
Token	lua\\llex.h	/^typedef struct Token {$/;"	s
Token	lua\\llex.h	/^} Token;$/;"	t	typeref:struct:Token
TokenizeError	dmlc-core\\src\\config.cc	/^  explicit TokenizeError(const string& msg = "tokenize error"): msg_(msg) { }$/;"	f	class:dmlc::TokenizeError	file:
TokenizeError	dmlc-core\\src\\config.cc	/^class TokenizeError : public exception {$/;"	c	namespace:dmlc	file:
Tokenizer	dmlc-core\\src\\config.cc	/^  explicit Tokenizer(istream& is): is_(is), state_(kNone) {}  \/\/ NOLINT(*)$/;"	f	class:dmlc::Tokenizer	file:
Tokenizer	dmlc-core\\src\\config.cc	/^class Tokenizer {$/;"	c	namespace:dmlc	file:
Torch Core Project Development	torch7\\ROADMAP.md	/^## Torch Core Project Development$/;"	s
Torch Package Reference Manual	torch7\\README.md	/^# Torch Package Reference Manual #$/;"	c
Torch Package Reference Manual	torch7\\doc\\index.md	/^# Torch Package Reference Manual #$/;"	c
Torch Packages	torch7\\README.md	/^## Torch Packages ##$/;"	s
Torch Packages	torch7\\doc\\index.md	/^## Torch Packages ##$/;"	s
Torch Roadmap (August 2015 - March 2016)	torch7\\ROADMAP.md	/^# Torch Roadmap (August 2015 - March 2016)$/;"	c
Torch Tensor types	cwrap\\doc\\argumenttypes.md	/^### Torch Tensor types ###$/;"	S
Torch utility functions	torch7\\doc\\utility.md	/^# Torch utility functions #$/;"	c
TorchExecutor	src\\session.cc	/^class TorchExecutor {$/;"	c	namespace:tinyflow	file:
TorchSession	src\\session.cc	/^  explicit TorchSession(const std::string& config) {$/;"	f	class:tinyflow::TorchSession	file:
TorchSession	src\\session.cc	/^class TorchSession : public Session {$/;"	c	namespace:tinyflow	file:
TorchState	src\\torch\\torch_util.h	/^  TorchState() {$/;"	f	class:tinyflow::TorchState
TorchState	src\\torch\\torch_util.h	/^class TorchState {$/;"	c	namespace:tinyflow
TotalAllocBytes	nnvm\\src\\pass\\plan_memory.cc	/^  size_t TotalAllocBytes() const {$/;"	f	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:size_t	file:
Tree	dmlc-core\\test\\registry_test.cc	/^struct Tree {$/;"	s	namespace:tree	file:
TreeFactory	dmlc-core\\test\\registry_test.cc	/^struct TreeFactory$/;"	s	namespace:tree	file:
TryGetPathInfo	dmlc-core\\src\\io\\s3_filesys.cc	/^bool S3FileSystem::TryGetPathInfo(const URI &path_, FileInfo *out_info) {$/;"	f	class:dmlc::io::S3FileSystem	typeref:typename:bool
TryLoadCache	dmlc-core\\src\\data\\disk_row_iter.h	/^inline bool DiskRowIter<IndexType>::TryLoadCache(void) {$/;"	f	class:dmlc::data::DiskRowIter	typeref:typename:bool
Tuple	nnvm\\include\\nnvm\\tuple.h	/^  inline Tuple(RandomAccessIterator begin,$/;"	f	class:nnvm::Tuple
Tuple	nnvm\\include\\nnvm\\tuple.h	/^  inline Tuple(Tuple<ValueType>&& src) { \/\/ NOLINT(*)$/;"	f	class:nnvm::Tuple
Tuple	nnvm\\include\\nnvm\\tuple.h	/^  inline Tuple(const Tuple<ValueType>& s) {$/;"	f	class:nnvm::Tuple
Tuple	nnvm\\include\\nnvm\\tuple.h	/^  inline Tuple(std::initializer_list<ValueType> init) {$/;"	f	class:nnvm::Tuple
Tuple	nnvm\\include\\nnvm\\tuple.h	/^class Tuple {$/;"	c	namespace:nnvm
Type	dmlc-core\\include\\dmlc\\any.h	/^  struct Type {$/;"	s	class:dmlc::any
Type	dmlc-core\\include\\dmlc\\type_traits.h	/^  typedef Else Type;$/;"	t	struct:dmlc::IfThenElseType	typeref:typename:Else
Type	dmlc-core\\include\\dmlc\\type_traits.h	/^  typedef Then Type;$/;"	t	struct:dmlc::IfThenElseType	typeref:typename:Then
Type	nnvm\\include\\dmlc\\any.h	/^  struct Type {$/;"	s	class:dmlc::any
Type	nnvm\\include\\dmlc\\type_traits.h	/^  typedef Else Type;$/;"	t	struct:dmlc::IfThenElseType	typeref:typename:Else
Type	nnvm\\include\\dmlc\\type_traits.h	/^  typedef Then Type;$/;"	t	struct:dmlc::IfThenElseType	typeref:typename:Then
TypeInfo	dmlc-core\\include\\dmlc\\any.h	/^  TypeInfo() {$/;"	f	class:dmlc::any::TypeInfo
TypeInfo	dmlc-core\\include\\dmlc\\any.h	/^class any::TypeInfo$/;"	c	class:dmlc::any
TypeInfo	nnvm\\include\\dmlc\\any.h	/^  TypeInfo() {$/;"	f	class:dmlc::any::TypeInfo
TypeInfo	nnvm\\include\\dmlc\\any.h	/^class any::TypeInfo$/;"	c	class:dmlc::any
TypeOnHeap	dmlc-core\\include\\dmlc\\any.h	/^class any::TypeOnHeap {$/;"	c	class:dmlc::any
TypeOnHeap	nnvm\\include\\dmlc\\any.h	/^class any::TypeOnHeap {$/;"	c	class:dmlc::any
TypeOnStack	dmlc-core\\include\\dmlc\\any.h	/^class any::TypeOnStack {$/;"	c	class:dmlc::any
TypeOnStack	nnvm\\include\\dmlc\\any.h	/^class any::TypeOnStack {$/;"	c	class:dmlc::any
UBox	lua\\lauxlib.c	/^typedef struct UBox {$/;"	s	file:
UBox	lua\\lauxlib.c	/^} UBox;$/;"	t	typeref:struct:UBox	file:
UMASK	torch7\\lib\\TH\\THRandom.c	/^#define UMASK /;"	d	file:
UNAME	dmlc-core\\make\\dmlc.mk	/^	UNAME=$(shell uname)$/;"	m
UNAME	dmlc-core\\make\\dmlc.mk	/^	UNAME=Windows$/;"	m
UNAME_S	Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	nnvm\\Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNARY_PRIORITY	lua\\lparser.c	/^#define UNARY_PRIORITY	/;"	d	file:
UNITTEST	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^UNITTEST=$(UTEST_ROOT)\/dmlc_unittest$/;"	m
UNITTEST_OBJ	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^UNITTEST_OBJ=$(patsubst %.cc,%.o,$(UNITTEST_SRC))$/;"	m
UNITTEST_SRC	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^UNITTEST_SRC=$(wildcard $(UTEST_ROOT)\/*.cc)$/;"	m
UNROLL_SSE_CONVOLUTION	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^#define UNROLL_SSE_CONVOLUTION /;"	d	file:
UNUSED	lua\\llimits.h	/^#define UNUSED(/;"	d
UNUSED	lua\\ltests.h	/^#define UNUSED(/;"	d
UONE	lua\\lmathlib.c	/^#define UONE	/;"	d	file:
URI	dmlc-core\\src\\io\\filesys.h	/^  URI(void) {}$/;"	f	struct:dmlc::io::URI
URI	dmlc-core\\src\\io\\filesys.h	/^  explicit URI(const char *uri) {$/;"	f	struct:dmlc::io::URI
URI	dmlc-core\\src\\io\\filesys.h	/^struct URI {$/;"	s	namespace:dmlc::io
URISpec	dmlc-core\\src\\io\\uri_spec.h	/^  explicit URISpec(const std::string& uri,$/;"	f	class:dmlc::io::URISpec
URISpec	dmlc-core\\src\\io\\uri_spec.h	/^class URISpec {$/;"	c	namespace:dmlc::io
USE_AZURE	dmlc-core\\make\\config.mk	/^USE_AZURE = 0$/;"	m
USE_FUSION	Makefile	/^USE_FUSION = 0$/;"	m
USE_HDFS	dmlc-core\\make\\config.mk	/^USE_HDFS = 0$/;"	m
USE_S3	dmlc-core\\make\\config.mk	/^USE_S3 = 0$/;"	m
USE_SSE	dmlc-core\\Makefile	/^	USE_SSE = 1$/;"	m
UTEST_ROOT	dmlc-core\\test\\unittest\\dmlc_unittest.mk	/^UTEST_ROOT=test\/unittest$/;"	m
UTF8BUFFSZ	lua\\lobject.h	/^#define UTF8BUFFSZ	/;"	d
UTF8PATT	lua\\lutf8lib.c	/^#define UTF8PATT	/;"	d	file:
UValue	lua\\lobject.h	/^typedef union UValue {$/;"	u
UValue	lua\\lobject.h	/^} UValue;$/;"	t	typeref:union:UValue
Udata	lua\\lobject.h	/^typedef struct Udata {$/;"	s
Udata	lua\\lobject.h	/^} Udata;$/;"	t	typeref:struct:Udata
Udata0	lua\\lobject.h	/^typedef struct Udata0 {$/;"	s
Udata0	lua\\lobject.h	/^} Udata0;$/;"	t	typeref:struct:Udata0
UnOpr	lua\\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	lua\\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UndefinedHandler	dmlc-core\\include\\dmlc\\lua.h	/^struct UndefinedHandler {$/;"	s	namespace:dmlc::lua_stack
UndefinedSerializerFor	dmlc-core\\include\\dmlc\\serializer.h	/^struct UndefinedSerializerFor {$/;"	s	namespace:dmlc::serializer
Unix Philosophy in Learning Systems	nnvm\\docs\\overview.md	/^## Unix Philosophy in Learning Systems$/;"	s
UpVal	lua\\lobject.h	/^typedef struct UpVal {$/;"	s
UpVal	lua\\lobject.h	/^} UpVal;$/;"	t	typeref:struct:UpVal
Update	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^void Update(std::unordered_map<const Node*, NodePtr>& m_mirror) {$/;"	f	namespace:nnvm::fusion::__anonf7dc9a530110	typeref:typename:void
UpdateAttrMap	nnvm\\src\\core\\op.cc	/^void Op::UpdateAttrMap(const std::string& key,$/;"	f	class:nnvm::Op	typeref:typename:void
UpdateNodeVersion	nnvm\\src\\core\\symbolic.cc	/^inline void UpdateNodeVersion(Node *n) {$/;"	f	namespace:nnvm	typeref:typename:void
Upload	dmlc-core\\src\\io\\s3_filesys.cc	/^void WriteStream::Upload(bool force_upload_even_if_zero_bytes) {$/;"	f	class:dmlc::io::s3::WriteStream	typeref:typename:void
Upvaldesc	lua\\lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	lua\\lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
Use Parameter Module	dmlc-core\\doc\\parameter.md	/^Use Parameter Module$/;"	s
Useful Links	torch7\\README.md	/^## Useful Links ##$/;"	s
User Types	cwrap\\doc\\usertypes.md	/^## User Types ##$/;"	s
Using the issue tracker	torch7\\CONTRIBUTING.md	/^## Using the issue tracker$/;"	s
V	dmlc-core\\include\\dmlc\\lua.h	/^  using V = typename ContainerType::mapped_type;$/;"	t	struct:dmlc::lua_stack::MapHandler	typeref:typename:ContainerType::mapped_type
VCALL	lua\\lparser.h	/^  VCALL,  \/* expression is a function call; info = instruction pc *\/$/;"	e	enum:__anon029e15920103
VFALSE	lua\\lparser.h	/^  VFALSE,  \/* constant false *\/$/;"	e	enum:__anon029e15920103
VINDEXED	lua\\lparser.h	/^  VINDEXED,  \/* indexed variable;$/;"	e	enum:__anon029e15920103
VINDEXI	lua\\lparser.h	/^  VINDEXI, \/* indexed variable with constant integer;$/;"	e	enum:__anon029e15920103
VINDEXSTR	lua\\lparser.h	/^  VINDEXSTR, \/* indexed variable with literal string;$/;"	e	enum:__anon029e15920103
VINDEXUP	lua\\lparser.h	/^  VINDEXUP,  \/* indexed upvalue;$/;"	e	enum:__anon029e15920103
VJMP	lua\\lparser.h	/^  VJMP,  \/* expression is a test\/comparison;$/;"	e	enum:__anon029e15920103
VK	lua\\lparser.h	/^  VK,  \/* constant in 'k'; info = index of constant in 'k' *\/$/;"	e	enum:__anon029e15920103
VKFLT	lua\\lparser.h	/^  VKFLT,  \/* floating constant; nval = numerical float value *\/$/;"	e	enum:__anon029e15920103
VKINT	lua\\lparser.h	/^  VKINT,  \/* integer constant; nval = numerical integer value *\/$/;"	e	enum:__anon029e15920103
VLOCAL	lua\\lparser.h	/^  VLOCAL,  \/* local variable; var.idx = local register *\/$/;"	e	enum:__anon029e15920103
VLOG	dmlc-core\\include\\dmlc\\logging.h	/^#define VLOG(/;"	d
VLOG	nnvm\\include\\dmlc\\logging.h	/^#define VLOG(/;"	d
VNIL	lua\\lparser.h	/^  VNIL,  \/* constant nil *\/$/;"	e	enum:__anon029e15920103
VNONRELOC	lua\\lparser.h	/^  VNONRELOC,  \/* expression has its value in a fixed register;$/;"	e	enum:__anon029e15920103
VRELOC	lua\\lparser.h	/^  VRELOC,  \/* expression can put result in any register;$/;"	e	enum:__anon029e15920103
VSX_FUNC_NUM_TEST_ELEMENTS	torch7\\lib\\TH\\vector\\VSX.c	/^#define VSX_FUNC_NUM_TEST_ELEMENTS /;"	d	file:
VSX_PERF_NUM_TEST_ELEMENTS	torch7\\lib\\TH\\vector\\VSX.c	/^#define VSX_PERF_NUM_TEST_ELEMENTS /;"	d	file:
VTRUE	lua\\lparser.h	/^  VTRUE,  \/* constant true *\/$/;"	e	enum:__anon029e15920103
VUPVAL	lua\\lparser.h	/^  VUPVAL,  \/* upvalue variable; var.idx = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anon029e15920103
VVARARG	lua\\lparser.h	/^  VVARARG  \/* vararg expression; info = instruction pc *\/$/;"	e	enum:__anon029e15920103
VVOID	lua\\lparser.h	/^  VVOID,  \/* when 'expdesc' describes the last expression a list,$/;"	e	enum:__anon029e15920103
Value	dmlc-core\\include\\dmlc\\threadediter.h	/^  virtual const DType &Value(void) const {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:const DType &
Value	dmlc-core\\src\\data\\basic_row_iter.h	/^  virtual const RowBlock<IndexType> &Value(void) const {$/;"	f	class:dmlc::data::BasicRowIter	typeref:typename:const RowBlock<IndexType> &
Value	dmlc-core\\src\\data\\disk_row_iter.h	/^  virtual const RowBlock<IndexType> &Value(void) const {$/;"	f	class:dmlc::data::DiskRowIter	typeref:typename:const RowBlock<IndexType> &
Value	dmlc-core\\src\\data\\parser.h	/^  virtual const RowBlock<IndexType> &Value(void) const {$/;"	f	class:dmlc::data::ParserImpl	typeref:typename:const RowBlock<IndexType> &
Value	lua\\lobject.h	/^typedef union Value {$/;"	u
Value	lua\\lobject.h	/^} Value;$/;"	t	typeref:union:Value
VarState	src\\session.cc	/^struct VarState {$/;"	s	namespace:tinyflow	file:
VarStateMap	src\\session.cc	/^using VarStateMap = std::unordered_map<std::string, std::shared_ptr<VarState> >;$/;"	t	namespace:tinyflow	typeref:typename:std::unordered_map<std::string,std::shared_ptr<VarState>>	file:
Vardesc	lua\\lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	lua\\lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
Variable	nnvm\\python\\nnvm\\symbol.py	/^def Variable(name, **kwargs):$/;"	f
Variable	python\\tinyflow\\_base.py	/^def Variable(init=None, name=None):$/;"	f
VariableAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  VariableAST(std::string name)$/;"	f	class:nnvm::fusion::VariableAST
VariableAST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^class VariableAST : public AST {$/;"	c	namespace:nnvm::fusion
VariableParam	nnvm\\src\\core\\symbolic.cc	/^struct VariableParam {$/;"	s	namespace:nnvm	file:
Versioning + Packaging	torch7\\ROADMAP.md	/^## Versioning + Packaging$/;"	s
W	bin\\l.py	/^W = tf.Variable(tf.zeros([784, 10]))$/;"	v
W	example\\mnist_softmax.py	/^W = tf.Variable(tf.zeros([784, 10]))$/;"	v
W	example\\mnist_softmax_minimum.py	/^W = tf.Variable(tf.zeros([784, 10]))$/;"	v
WHITE0BIT	lua\\lgc.h	/^#define WHITE0BIT	/;"	d
WHITE1BIT	lua\\lgc.h	/^#define WHITE1BIT	/;"	d
WHITEBITS	lua\\lgc.h	/^#define WHITEBITS	/;"	d
WHOLE_ARCH	Makefile	/^	WHOLE_ARCH= --whole-archive$/;"	m
WHOLE_ARCH	Makefile	/^	WHOLE_ARCH= -all_load$/;"	m
WHOLE_ARCH	nnvm\\Makefile	/^	WHOLE_ARCH= --whole-archive$/;"	m
WHOLE_ARCH	nnvm\\Makefile	/^	WHOLE_ARCH= -all_load$/;"	m
WITH_FPIC	dmlc-core\\make\\config.mk	/^WITH_FPIC = 1$/;"	m
WITH_FPIC	dmlc-core\\make\\dmlc.mk	/^	WITH_FPIC = 1$/;"	m
WORK2MEM	lua\\lgc.c	/^#define WORK2MEM	/;"	d	file:
W_grad	example\\mnist_softmax_minimum.py	/^W_grad = tf.gradients(cross_entropy, [W])[0]$/;"	v
What is GPU kernel fusion and runtime compilation	nnvm\\plugin\\nnvm-fusion\\README.md	/^## What is GPU kernel fusion and runtime compilation$/;"	s
What is it	nnvm\\README.md	/^## What is it$/;"	s
What is it for	README.md	/^## What is it for$/;"	s
What's New	dmlc-core\\README.md	/^What's New$/;"	s
Why build learning system by parts	nnvm\\README.md	/^## Why build learning system by parts$/;"	s
Write	dmlc-core\\include\\dmlc\\io.h	/^inline void Stream::Write(const T &data) {$/;"	f	class:dmlc::Stream	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const ContainerType &array) {$/;"	f	struct:dmlc::json::ArrayHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const ContainerType &map) {$/;"	f	struct:dmlc::json::MapHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const T &data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const T &value) {$/;"	f	struct:dmlc::json::CommonJSONSerializer	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const ValueType &value) {$/;"	f	struct:dmlc::json::NumericHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const any &data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const std::string &value) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::Write(const ValueType &value) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual void Write(const void *ptr, size_t size) {$/;"	f	struct:dmlc::MemoryFixedSizeStream	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\memory_io.h	/^  virtual void Write(const void *ptr, size_t size) {$/;"	f	struct:dmlc::MemoryStringStream	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const ContainerType &data) {$/;"	f	struct:dmlc::serializer::CollectionHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const ListType &data) {$/;"	f	struct:dmlc::serializer::ListHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const T &data) {$/;"	f	struct:dmlc::serializer::Handler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const T &data) {$/;"	f	struct:dmlc::serializer::IfThenElse	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const T &data) {$/;"	f	struct:dmlc::serializer::PODHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const T &data) {$/;"	f	struct:dmlc::serializer::SaveLoadClassHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const std::basic_string<T> &vec) {$/;"	f	struct:dmlc::serializer::PODStringHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const std::pair<TA, TB> &data) {$/;"	f	struct:dmlc::serializer::PairHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const std::vector<T> &vec) {$/;"	f	struct:dmlc::serializer::ComposeVectorHandler	typeref:typename:void
Write	dmlc-core\\include\\dmlc\\serializer.h	/^  inline static void Write(Stream *strm, const std::vector<T> &vec) {$/;"	f	struct:dmlc::serializer::PODVectorHandler	typeref:typename:void
Write	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  virtual void Write(const void *ptr, size_t size) {$/;"	f	class:dmlc::io::HDFSStream	typeref:typename:void	file:
Write	dmlc-core\\src\\io\\local_filesys.cc	/^  virtual void Write(const void *ptr, size_t size) {$/;"	f	class:dmlc::io::FileStream	typeref:typename:void	file:
Write	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual void Write(const void *ptr, size_t size) {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:void	file:
Write	dmlc-core\\src\\io\\s3_filesys.cc	/^void WriteStream::Write(const void *ptr, size_t size) {$/;"	f	class:dmlc::io::s3::WriteStream	typeref:typename:void
Write	dmlc-core\\src\\io\\single_file_split.h	/^  virtual void Write(const void *ptr, size_t size) {$/;"	f	class:dmlc::io::SingleFileSplit	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const ContainerType &array) {$/;"	f	struct:dmlc::json::ArrayHandler	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const ContainerType &map) {$/;"	f	struct:dmlc::json::MapHandler	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const T &data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const T &value) {$/;"	f	struct:dmlc::json::CommonJSONSerializer	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const ValueType &value) {$/;"	f	struct:dmlc::json::NumericHandler	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const any &data) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^  inline static void Write(JSONWriter *writer, const std::string &value) {$/;"	f	struct:dmlc::json::Handler	typeref:typename:void
Write	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::Write(const ValueType &value) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
Write methods	torch7\\doc\\file.md	/^## Write methods ##$/;"	s
WriteAny	dmlc-core\\include\\dmlc\\json.h	/^  inline static void WriteAny(JSONWriter *writer, const any &data) {$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:void
WriteAny	nnvm\\include\\dmlc\\json.h	/^  inline static void WriteAny(JSONWriter *writer, const any &data) {$/;"	f	class:dmlc::json::AnyJSONManager	typeref:typename:void
WriteArrayItem	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteArrayItem(const ValueType &value) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteArrayItem	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteArrayItem(const ValueType &value) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteArraySeperator	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteArraySeperator() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteArraySeperator	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteArraySeperator() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteNoEscape	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteNoEscape(const std::string &s) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteNoEscape	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteNoEscape(const std::string &s) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteNumber	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteNumber(const ValueType &v) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteNumber	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteNumber(const ValueType &v) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteObjectKeyValue	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteObjectKeyValue(const std::string &key,$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteObjectKeyValue	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteObjectKeyValue(const std::string &key,$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteRecord	dmlc-core\\include\\dmlc\\recordio.h	/^  inline void WriteRecord(const std::string &data) {$/;"	f	class:dmlc::RecordIOWriter	typeref:typename:void
WriteRecord	dmlc-core\\src\\recordio.cc	/^void RecordIOWriter::WriteRecord(const void *buf, size_t size) {$/;"	f	class:dmlc::RecordIOWriter	typeref:typename:void
WriteSStreamCallback	dmlc-core\\src\\io\\s3_filesys.cc	/^size_t WriteSStreamCallback(char *buf, size_t size, size_t count, void *fp) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:size_t
WriteSeperator	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteSeperator() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteSeperator	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteSeperator() {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteStream	dmlc-core\\src\\io\\s3_filesys.cc	/^  WriteStream(const URI &path,$/;"	f	class:dmlc::io::s3::WriteStream	file:
WriteStream	dmlc-core\\src\\io\\s3_filesys.cc	/^class WriteStream : public Stream {$/;"	c	namespace:dmlc::io::s3	file:
WriteString	dmlc-core\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteString(const std::string &s) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteString	nnvm\\include\\dmlc\\json.h	/^inline void JSONWriter::WriteString(const std::string &s) {$/;"	f	class:dmlc::JSONWriter	typeref:typename:void
WriteStringCallback	dmlc-core\\src\\io\\s3_filesys.cc	/^size_t WriteStringCallback(char *buf, size_t size, size_t count, void *fp) {$/;"	f	namespace:dmlc::io::s3	typeref:typename:size_t
X	lua\\ltests.c	/^static struct X { int x; } x;$/;"	s	function:runC	file:
X	lua\\testes\\closure.lua	/^    X = function () return b end   -- closure with upvalue$/;"	f
X	lua\\testes\\coroutine.lua	/^    X = function (x) coroutine.yield(x, 'BB'); return 'CC' end;$/;"	f
XDIGITBIT	lua\\lctype.h	/^#define XDIGITBIT	/;"	d
XMLIter	dmlc-core\\src\\io\\s3_filesys.cc	/^  XMLIter()$/;"	f	struct:dmlc::io::s3::XMLIter	file:
XMLIter	dmlc-core\\src\\io\\s3_filesys.cc	/^  explicit XMLIter(const char *content)$/;"	f	struct:dmlc::io::s3::XMLIter	file:
XMLIter	dmlc-core\\src\\io\\s3_filesys.cc	/^struct XMLIter {$/;"	s	namespace:dmlc::io::s3	file:
Y	lua\\testes\\closure.lua	/^    Y = function () return b end   -- closure with upvalue$/;"	f
Z	lua\\lundump.c	/^  ZIO *Z;$/;"	m	struct:__anon681ca6790108	typeref:typename:ZIO *	file:
Z	lua\\testes\\calls.lua	/^Z = function (le)$/;"	f
ZIO	lua\\lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
ZeroParam	src\\op_tensor.cc	/^struct ZeroParam : public dmlc::Parameter<ZeroParam> {$/;"	s	namespace:tinyflow	file:
ZeroShape	src\\op_tensor.cc	/^inline bool ZeroShape(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
ZeroType	src\\op_tensor.cc	/^inline bool ZeroType(const NodeAttrs& attrs,$/;"	f	namespace:tinyflow	typeref:typename:bool
Zio	lua\\lzio.h	/^struct Zio {$/;"	s
[CharStorage] storage()	torch7\\doc\\memoryfile.md	/^### [CharStorage] storage() ###$/;"	S
[Generator] Generator()	torch7\\doc\\random.md	/^### [Generator] Generator() ###$/;"	S
[LongStorage] #self	torch7\\doc\\tensor.md	/^### [LongStorage] #self ###$/;"	S
[LongStorage] size()	torch7\\doc\\tensor.md	/^### [LongStorage] size() ###$/;"	S
[LongStorage] stride()	torch7\\doc\\tensor.md	/^### [LongStorage] stride() ###$/;"	S
[LongTensor] nonzero(tensor)	torch7\\doc\\tensor.md	/^### [LongTensor] nonzero(tensor) ###$/;"	S
[Storage] storage()	torch7\\doc\\tensor.md	/^### [Storage] storage() ###$/;"	S
[Tensor or string] type(type)	torch7\\doc\\tensor.md	/^### [Tensor or string] type(type) ###$/;"	S
[Tensor] [{ dim1,dim2,... }] or [{ {dim1s,dim1e}, {dim2s,dim2e} }]	torch7\\doc\\tensor.md	/^### [Tensor] [{ dim1,dim2,... }] or [{ {dim1s,dim1e}, {dim2s,dim2e} }] ###$/;"	S
[Tensor] byte(), char(), short(), int(), long(), float(), double()	torch7\\doc\\tensor.md	/^### [Tensor] byte(), char(), short(), int(), long(), float(), double() ###$/;"	S
[Tensor] clone()	torch7\\doc\\tensor.md	/^### [Tensor] clone() ###$/;"	S
[Tensor] contiguous	torch7\\doc\\tensor.md	/^### [Tensor] contiguous ###$/;"	S
[Tensor] gather(dim, index)	torch7\\doc\\tensor.md	/^### [Tensor] gather(dim, index) ###$/;"	S
[Tensor] getRNGState([gen])	torch7\\doc\\random.md	/^### [Tensor] getRNGState([gen]) ###$/;"	S
[Tensor] index(dim, index)	torch7\\doc\\tensor.md	/^### [Tensor] index(dim, index) ###$/;"	S
[Tensor] indexAdd(dim, index, tensor)	torch7\\doc\\tensor.md	/^### [Tensor] indexAdd(dim, index, tensor) ###$/;"	S
[Tensor] indexCopy(dim, index, tensor)	torch7\\doc\\tensor.md	/^### [Tensor] indexCopy(dim, index, tensor) ###$/;"	S
[Tensor] indexFill(dim, index, val)	torch7\\doc\\tensor.md	/^### [Tensor] indexFill(dim, index, val) ###$/;"	S
[Tensor] maskedCopy(mask, tensor)	torch7\\doc\\tensor.md	/^### [Tensor] maskedCopy(mask, tensor) ###$/;"	S
[Tensor] maskedFill(mask, val)	torch7\\doc\\tensor.md	/^### [Tensor] maskedFill(mask, val) ###$/;"	S
[Tensor] maskedSelect(mask)	torch7\\doc\\tensor.md	/^### [Tensor] maskedSelect(mask) ###$/;"	S
[Tensor] permute(dim1, dim2, ..., dimn)	torch7\\doc\\tensor.md	/^### [Tensor] permute(dim1, dim2, ..., dimn) ###$/;"	S
[Tensor] repeatTensor([result,] sizes)	torch7\\doc\\tensor.md	/^### [Tensor] repeatTensor([result,] sizes) ###$/;"	S
[Tensor] scatter(dim, index, src|val)	torch7\\doc\\tensor.md	/^### [Tensor] scatter(dim, index, src|val) ###$/;"	S
[Tensor] select(dim, index)	torch7\\doc\\tensor.md	/^### [Tensor] select(dim, index) ###$/;"	S
[Tensor] setRNGState([gen,] state)	torch7\\doc\\random.md	/^### [Tensor] setRNGState([gen,] state) ###$/;"	S
[Tensor] squeeze([dim])	torch7\\doc\\tensor.md	/^### [Tensor] squeeze([dim]) ###$/;"	S
[Tensor] sub(dim1s, dim1e ... [, dim4s [, dim4e]])	torch7\\doc\\tensor.md	/^### [Tensor] sub(dim1s, dim1e ... [, dim4s [, dim4e]]) ###$/;"	S
[Tensor] t()	torch7\\doc\\tensor.md	/^### [Tensor] t() ###$/;"	S
[Tensor] transpose(dim1, dim2)	torch7\\doc\\tensor.md	/^### [Tensor] transpose(dim1, dim2) ###$/;"	S
[Tensor] typeAs(tensor)	torch7\\doc\\tensor.md	/^### [Tensor] typeAs(tensor) ###$/;"	S
[Tensor] unfold(dim, size, step)	torch7\\doc\\tensor.md	/^### [Tensor] unfold(dim, size, step) ###$/;"	S
[boolean] equal([tensor1,] tensor2)	torch7\\doc\\maths.md	/^### [boolean] equal([tensor1,] tensor2) ###$/;"	S
[boolean] hasError()	torch7\\doc\\file.md	/^### [boolean] hasError() ###$/;"	S
[boolean] isAutoSpacing()	torch7\\doc\\file.md	/^### [boolean] isAutoSpacing() ###$/;"	S
[boolean] isBigEndianCPU()	torch7\\doc\\diskfile.md	/^### [boolean] isBigEndianCPU() ###$/;"	S
[boolean] isContiguous()	torch7\\doc\\tensor.md	/^### [boolean] isContiguous() ###$/;"	S
[boolean] isLittleEndianCPU()	torch7\\doc\\diskfile.md	/^### [boolean] isLittleEndianCPU() ###$/;"	S
[boolean] isQuiet()	torch7\\doc\\file.md	/^### [boolean] isQuiet() ###$/;"	S
[boolean] isReadable()	torch7\\doc\\file.md	/^### [boolean] isReadable() ###$/;"	S
[boolean] isSameSizeAs(tensor)	torch7\\doc\\tensor.md	/^### [boolean] isSameSizeAs(tensor) ###$/;"	S
[boolean] isSetTo(tensor)	torch7\\doc\\tensor.md	/^### [boolean] isSetTo(tensor) ###$/;"	S
[boolean] isSize(storage)	torch7\\doc\\tensor.md	/^### [boolean] isSize(storage) ###$/;"	S
[boolean] isTensor(object)	torch7\\doc\\tensor.md	/^### [boolean] isTensor(object) ###$/;"	S
[boolean] isTypeOf(object, typeSpec)	torch7\\doc\\utility.md	/^### [boolean] isTypeOf(object, typeSpec) ###$/;"	S
[boolean] isWritable()	torch7\\doc\\file.md	/^### [boolean] isWritable() ###$/;"	S
[boolean] torch.isequal(object1, object2)	torch7\\doc\\utility.md	/^### [boolean] torch.isequal(object1, object2) ###$/;"	S
[checkerror]	lua\\testes\\nextvar.lua	/^    [checkerror] = 6,               -- Lua function$/;"	f
[function] torch.factory(name)	torch7\\doc\\utility.md	/^### [function] torch.factory(name) ###$/;"	S
[metatable] torch.class(name, [parentName], [module])	torch7\\doc\\utility.md	/^### [metatable] torch.class(name, [parentName], [module]) ###$/;"	S
[number] #self	torch7\\doc\\storage.md	/^### [number] #self ###$/;"	S
[number] bernoulli([gen,] [p])	torch7\\doc\\random.md	/^### [number] bernoulli([gen,] [p]) ###$/;"	S
[number] cauchy([gen,] median, sigma)	torch7\\doc\\random.md	/^### [number] cauchy([gen,] median, sigma) ###$/;"	S
[number] dim()	torch7\\doc\\tensor.md	/^### [number] dim() ###$/;"	S
[number] exponential([gen,] lambda)	torch7\\doc\\random.md	/^### [number] exponential([gen,] lambda) ###$/;"	S
[number] geometric([gen,] p)	torch7\\doc\\random.md	/^### [number] geometric([gen,] p) ###$/;"	S
[number] logNormal([gen,] mean, stdv)	torch7\\doc\\random.md	/^### [number] logNormal([gen,] mean, stdv) ###$/;"	S
[number] nDimension()	torch7\\doc\\tensor.md	/^### [number] nDimension() ###$/;"	S
[number] nElement()	torch7\\doc\\tensor.md	/^### [number] nElement() ###$/;"	S
[number] normal([gen,] [mean],[stdv])	torch7\\doc\\random.md	/^### [number] normal([gen,] [mean],[stdv]) ###$/;"	S
[number] position()	torch7\\doc\\file.md	/^### [number] position() ###$/;"	S
[number] random([gen,] [a], [b])	torch7\\doc\\random.md	/^### [number] random([gen,] [a], [b]) ###$/;"	S
[number] seed([gen,])	torch7\\doc\\random.md	/^### [number] seed([gen,]) ###$/;"	S
[number] self[index]	torch7\\doc\\storage.md	/^### [number] self[index] ###$/;"	S
[number] size()	torch7\\doc\\storage.md	/^### [number] size() ###$/;"	S
[number] size(dim)	torch7\\doc\\tensor.md	/^### [number] size(dim) ###$/;"	S
[number] storageOffset()	torch7\\doc\\tensor.md	/^### [number] storageOffset() ###$/;"	S
[number] stride(dim)	torch7\\doc\\tensor.md	/^### [number] stride(dim) ###$/;"	S
[number] torch.dot(tensor1, tensor2)	torch7\\doc\\maths.md	/^### [number] torch.dot(tensor1, tensor2) ###$/;"	S
[number] torch.pointer(object)	torch7\\doc\\utility.md	/^### [number] torch.pointer(object) ###$/;"	S
[number] torch.version(object)	torch7\\doc\\utility.md	/^### [number] torch.version(object) ###$/;"	S
[number] uniform([gen,] [a],[b])	torch7\\doc\\random.md	/^### [number] uniform([gen,] [a],[b]) ###$/;"	S
[number] writeString(str)	torch7\\doc\\file.md	/^### [number] writeString(str) ###$/;"	S
[object] torch.deserialize(str [, format])	torch7\\doc\\serialization.md	/^### [object] torch.deserialize(str [, format]) ###$/;"	S
[object] torch.load(filename [, format, referenced])	torch7\\doc\\serialization.md	/^### [object] torch.load(filename [, format, referenced]) ###$/;"	S
[object] torch.setmetatable(table, classname)	torch7\\doc\\utility.md	/^### [object] torch.setmetatable(table, classname) ###$/;"	S
[print]	lua\\testes\\nextvar.lua	/^    [print] = 5,                    -- C function$/;"	f
[res] torch.abs([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.abs([res,] x) ###$/;"	S
[res] torch.acos([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.acos([res,] x) ###$/;"	S
[res] torch.add([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.add([res,] tensor, value) ###$/;"	S
[res] torch.add([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.add([res,] tensor1, tensor2) ###$/;"	S
[res] torch.add([res,] tensor1, value, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.add([res,] tensor1, value, tensor2) ###$/;"	S
[res] torch.addbmm([res,] [v1,] M, [v2,] batch1, batch2)	torch7\\doc\\maths.md	/^### [res] torch.addbmm([res,] [v1,] M, [v2,] batch1, batch2) ###$/;"	S
[res] torch.addcdiv([res,] x [,value], tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.addcdiv([res,] x [,value], tensor1, tensor2) ###$/;"	S
[res] torch.addcmul([res,] x [,value], tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.addcmul([res,] x [,value], tensor1, tensor2) ###$/;"	S
[res] torch.addmm([res,] [v1,] M, [v2,] mat1, mat2)	torch7\\doc\\maths.md	/^### [res] torch.addmm([res,] [v1,] M, [v2,] mat1, mat2) ###$/;"	S
[res] torch.addmv([res,] [v1,] vec1, [v2,] mat, vec2)	torch7\\doc\\maths.md	/^### [res] torch.addmv([res,] [v1,] vec1, [v2,] mat, vec2) ###$/;"	S
[res] torch.addr([res,] [v1,] mat, [v2,] vec1, vec2)	torch7\\doc\\maths.md	/^### [res] torch.addr([res,] [v1,] mat, [v2,] vec1, vec2) ###$/;"	S
[res] torch.asin([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.asin([res,] x) ###$/;"	S
[res] torch.atan([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.atan([res,] x) ###$/;"	S
[res] torch.atan2([res,] x, y)	torch7\\doc\\maths.md	/^### [res] torch.atan2([res,] x, y) ###$/;"	S
[res] torch.baddbmm([res,] [v1,] M, [v2,] batch1, batch2)	torch7\\doc\\maths.md	/^### [res] torch.baddbmm([res,] [v1,] M, [v2,] batch1, batch2) ###$/;"	S
[res] torch.bhistc([res,] x [,nbins, min_value, max_value])	torch7\\doc\\maths.md	/^### [res] torch.bhistc([res,] x [,nbins, min_value, max_value]) ###$/;"	S
[res] torch.bitand([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.bitand([res,] tensor, value) ###$/;"	S
[res] torch.bitor([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.bitor([res,] tensor, value) ###$/;"	S
[res] torch.bitxor([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.bitxor([res,] tensor, value) ###$/;"	S
[res] torch.bmm([res,] batch1, batch2)	torch7\\doc\\maths.md	/^### [res] torch.bmm([res,] batch1, batch2) ###$/;"	S
[res] torch.cat( [res,] x_1, x_2, [dimension] )	torch7\\doc\\maths.md	/^### [res] torch.cat( [res,] x_1, x_2, [dimension] ) ###$/;"	S
[res] torch.cat( [res,] {x_1, x_2, ...}, [dimension] )	torch7\\doc\\maths.md	/^### [res] torch.cat( [res,] {x_1, x_2, ...}, [dimension] ) ###$/;"	S
[res] torch.cbitand([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cbitand([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cbitor([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cbitor([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cbitxor([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cbitxor([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cdiv([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cdiv([res,] tensor1, tensor2) ###$/;"	S
[res] torch.ceil([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.ceil([res,] x) ###$/;"	S
[res] torch.cfmod([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cfmod([res,] tensor1, tensor2) ###$/;"	S
[res] torch.clamp([res,] tensor, min_value, max_value)	torch7\\doc\\maths.md	/^### [res] torch.clamp([res,] tensor, min_value, max_value) ###$/;"	S
[res] torch.clshift([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.clshift([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cmax([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.cmax([res,] tensor, value) ###$/;"	S
[res] torch.cmax([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cmax([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cmin([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.cmin([res,] tensor, value) ###$/;"	S
[res] torch.cmin([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cmin([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cmod([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cmod([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cmul([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cmul([res,] tensor1, tensor2) ###$/;"	S
[res] torch.conv2([res,] x, k, [, 'F' or 'V'])	torch7\\doc\\maths.md	/^### [res] torch.conv2([res,] x, k, [, 'F' or 'V']) ###$/;"	S
[res] torch.conv3([res,] x, k, [, 'F' or 'V'])	torch7\\doc\\maths.md	/^### [res] torch.conv3([res,] x, k, [, 'F' or 'V']) ###$/;"	S
[res] torch.cos([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.cos([res,] x) ###$/;"	S
[res] torch.cosh([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.cosh([res,] x) ###$/;"	S
[res] torch.cpow([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cpow([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cremainder([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.cremainder([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cross([res,] a, b [,n])	torch7\\doc\\maths.md	/^### [res] torch.cross([res,] a, b [,n]) ###$/;"	S
[res] torch.crshift([res,] tensor1, tensor2)	torch7\\doc\\maths.md	/^### [res] torch.crshift([res,] tensor1, tensor2) ###$/;"	S
[res] torch.cumprod([res,] x [,dim])	torch7\\doc\\maths.md	/^### [res] torch.cumprod([res,] x [,dim]) ###$/;"	S
[res] torch.cumsum([res,] x [,dim])	torch7\\doc\\maths.md	/^### [res] torch.cumsum([res,] x [,dim]) ###$/;"	S
[res] torch.diag([res,] x [,k])	torch7\\doc\\maths.md	/^### [res] torch.diag([res,] x [,k]) ###$/;"	S
[res] torch.div([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.div([res,] tensor, value) ###$/;"	S
[res] torch.exp([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.exp([res,] x) ###$/;"	S
[res] torch.eye([res,] n [,m])	torch7\\doc\\maths.md	/^### [res] torch.eye([res,] n [,m]) ###$/;"	S
[res] torch.floor([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.floor([res,] x) ###$/;"	S
[res] torch.fmod([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.fmod([res,] tensor, value) ###$/;"	S
[res] torch.frac([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.frac([res,] x) ###$/;"	S
[res] torch.ger([res,] vec1, vec2)	torch7\\doc\\maths.md	/^### [res] torch.ger([res,] vec1, vec2) ###$/;"	S
[res] torch.histc([res,] x [,nbins, min_value, max_value])	torch7\\doc\\maths.md	/^### [res] torch.histc([res,] x [,nbins, min_value, max_value]) ###$/;"	S
[res] torch.lerp([res,] a, b, weight)	torch7\\doc\\maths.md	/^### [res] torch.lerp([res,] a, b, weight) ###$/;"	S
[res] torch.linspace([res,] x1, x2, [,n])	torch7\\doc\\maths.md	/^### [res] torch.linspace([res,] x1, x2, [,n]) ###$/;"	S
[res] torch.log([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.log([res,] x) ###$/;"	S
[res] torch.log1p([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.log1p([res,] x) ###$/;"	S
[res] torch.logspace([res,] x1, x2, [,n])	torch7\\doc\\maths.md	/^### [res] torch.logspace([res,] x1, x2, [,n]) ###$/;"	S
[res] torch.lshift([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.lshift([res,] tensor, value) ###$/;"	S
[res] torch.mean([res,] x [,dim])	torch7\\doc\\maths.md	/^### [res] torch.mean([res,] x [,dim]) ###$/;"	S
[res] torch.mm([res,] mat1, mat2)	torch7\\doc\\maths.md	/^### [res] torch.mm([res,] mat1, mat2) ###$/;"	S
[res] torch.mod([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.mod([res,] tensor, value) ###$/;"	S
[res] torch.mul([res,] tensor1, value)	torch7\\doc\\maths.md	/^### [res] torch.mul([res,] tensor1, value) ###$/;"	S
[res] torch.multinomial([res,], p, n, [,replacement])	torch7\\doc\\maths.md	/^### [res] torch.multinomial([res,], p, n, [,replacement]) ###$/;"	S
[res] torch.multinomialAlias(output, state)	torch7\\doc\\maths.md	/^### [res] torch.multinomialAlias(output, state)$/;"	S
[res] torch.mv([res,] mat, vec)	torch7\\doc\\maths.md	/^### [res] torch.mv([res,] mat, vec) ###$/;"	S
[res] torch.ones([res,] m [,n...])	torch7\\doc\\maths.md	/^### [res] torch.ones([res,] m [,n...]) ###$/;"	S
[res] torch.pow([res,] x, n)	torch7\\doc\\maths.md	/^### [res] torch.pow([res,] x, n) ###$/;"	S
[res] torch.prod([res,] x [,n])	torch7\\doc\\maths.md	/^### [res] torch.prod([res,] x [,n]) ###$/;"	S
[res] torch.rand([res,] [gen,] m [,n...])	torch7\\doc\\maths.md	/^### [res] torch.rand([res,] [gen,] m [,n...]) ###$/;"	S
[res] torch.randn([res,] [gen,] m [,n...])	torch7\\doc\\maths.md	/^### [res] torch.randn([res,] [gen,] m [,n...]) ###$/;"	S
[res] torch.randperm([res,] [gen,] n)	torch7\\doc\\maths.md	/^### [res] torch.randperm([res,] [gen,] n) ###$/;"	S
[res] torch.range([res,] x, y [,step])	torch7\\doc\\maths.md	/^### [res] torch.range([res,] x, y [,step]) ###$/;"	S
[res] torch.remainder([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.remainder([res,] tensor, value) ###$/;"	S
[res] torch.reshape([res,] x, m [,n...])	torch7\\doc\\maths.md	/^### [res] torch.reshape([res,] x, m [,n...]) ###$/;"	S
[res] torch.round([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.round([res,] x) ###$/;"	S
[res] torch.rshift([res,] tensor, value)	torch7\\doc\\maths.md	/^### [res] torch.rshift([res,] tensor, value) ###$/;"	S
[res] torch.rsqrt([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.rsqrt([res,] x) ###$/;"	S
[res] torch.sigmoid([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.sigmoid([res,] x) ###$/;"	S
[res] torch.sign([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.sign([res,] x) ###$/;"	S
[res] torch.sin([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.sin([res,] x) ###$/;"	S
[res] torch.sinh([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.sinh([res,] x) ###$/;"	S
[res] torch.sqrt([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.sqrt([res,] x) ###$/;"	S
[res] torch.std([res,] x, [,dim] [,flag])	torch7\\doc\\maths.md	/^### [res] torch.std([res,] x, [,dim] [,flag]) ###$/;"	S
[res] torch.sum([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.sum([res,] x) ###$/;"	S
[res] torch.tan([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.tan([res,] x) ###$/;"	S
[res] torch.tanh([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.tanh([res,] x) ###$/;"	S
[res] torch.tril([res,] x [,k])	torch7\\doc\\maths.md	/^### [res] torch.tril([res,] x [,k]) ###$/;"	S
[res] torch.triu([res,] x, [,k])	torch7\\doc\\maths.md	/^### [res] torch.triu([res,] x, [,k]) ###$/;"	S
[res] torch.trunc([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.trunc([res,] x) ###$/;"	S
[res] torch.var([res,] x [,dim] [,flag])	torch7\\doc\\maths.md	/^### [res] torch.var([res,] x [,dim] [,flag]) ###$/;"	S
[res] torch.xcorr2([res,] x, k, [, 'F' or 'V'])	torch7\\doc\\maths.md	/^### [res] torch.xcorr2([res,] x, k, [, 'F' or 'V']) ###$/;"	S
[res] torch.xcorr3([res,] x, k, [, 'F' or 'V'])	torch7\\doc\\maths.md	/^### [res] torch.xcorr3([res,] x, k, [, 'F' or 'V']) ###$/;"	S
[res] torch.zeros([res,] x)	torch7\\doc\\maths.md	/^### [res] torch.zeros([res,] x) ###$/;"	S
[result] cdata(tensor, [asnumber])	torch7\\doc\\tensor.md	/^### [result] cdata(tensor, [asnumber]) ###$/;"	S
[result] chunk([result,] tensor, n, [dim])	torch7\\doc\\tensor.md	/^### [result] chunk([result,] tensor, n, [dim]) ###$/;"	S
[result] data(tensor, [asnumber])	torch7\\doc\\tensor.md	/^### [result] data(tensor, [asnumber]) ###$/;"	S
[result] expand([result,] sizes)	torch7\\doc\\tensor.md	/^### [result] expand([result,] sizes) ###$/;"	S
[result] expandAs([result,] tensor)	torch7\\doc\\tensor.md	/^### [result] expandAs([result,] tensor) ###$/;"	S
[result] split([result,] tensor, size, [dim])	torch7\\doc\\tensor.md	/^### [result] split([result,] tensor, size, [dim]) ###$/;"	S
[result] view([result,] tensor, sizes)	torch7\\doc\\tensor.md	/^### [result] view([result,] tensor, sizes) ###$/;"	S
[result] viewAs([result,] tensor, template)	torch7\\doc\\tensor.md	/^### [result] viewAs([result,] tensor, template) ###$/;"	S
[self] apply(function)	torch7\\doc\\tensor.md	/^### [self] apply(function) ###$/;"	S
[self] copy(storage)	torch7\\doc\\storage.md	/^### [self] copy(storage) ###$/;"	S
[self] copy(tensor)	torch7\\doc\\tensor.md	/^### [self] copy(tensor) ###$/;"	S
[self] fill(value)	torch7\\doc\\storage.md	/^### [self] fill(value) ###$/;"	S
[self] fill(value)	torch7\\doc\\tensor.md	/^### [self] fill(value) ###$/;"	S
[self] map(tensor, function(xs, xt))	torch7\\doc\\tensor.md	/^### [self] map(tensor, function(xs, xt)) ###$/;"	S
[self] map2(tensor1, tensor2, function(x, xt1, xt2))	torch7\\doc\\tensor.md	/^### [self] map2(tensor1, tensor2, function(x, xt1, xt2)) ###$/;"	S
[self] narrow(dim, index, size)	torch7\\doc\\tensor.md	/^### [self] narrow(dim, index, size) ###$/;"	S
[self] reset()	torch7\\doc\\timer.md	/^### [self] reset() ###$/;"	S
[self] resize(size)	torch7\\doc\\storage.md	/^### [self] resize(size) ###$/;"	S
[self] resize(sizes)	torch7\\doc\\tensor.md	/^### [self] resize(sizes) ###$/;"	S
[self] resize(sz1 [,sz2 [,sz3 [,sz4]]]])	torch7\\doc\\tensor.md	/^### [self] resize(sz1 [,sz2 [,sz3 [,sz4]]]]) ###$/;"	S
[self] resizeAs(tensor)	torch7\\doc\\tensor.md	/^### [self] resizeAs(tensor) ###$/;"	S
[self] resume()	torch7\\doc\\timer.md	/^### [self] resume() ###$/;"	S
[self] set(storage, [storageOffset, sizes, [strides]])	torch7\\doc\\tensor.md	/^### [self] set(storage, [storageOffset, sizes, [strides]]) ###$/;"	S
[self] set(storage, [storageOffset, sz1 [, st1 ... [, sz4 [, st4]]]])	torch7\\doc\\tensor.md	/^### [self] set(storage, [storageOffset, sz1 [, st1 ... [, sz4 [, st4]]]]) ###$/;"	S
[self] set(tensor)	torch7\\doc\\tensor.md	/^### [self] set(tensor) ###$/;"	S
[self] stop()	torch7\\doc\\timer.md	/^### [self] stop() ###$/;"	S
[self] string(str)	torch7\\doc\\storage.md	/^### [self] string(str) ###$/;"	S
[self] zero()	torch7\\doc\\tensor.md	/^### [self] zero() ###$/;"	S
[state] torch.multinomialAliasSetup(probs)	torch7\\doc\\maths.md	/^### [state] torch.multinomialAliasSetup(probs) ###$/;"	S
[str] torch.serialize(object [, format])	torch7\\doc\\serialization.md	/^### [str] torch.serialize(object [, format]) ###$/;"	S
[string] readString(format)	torch7\\doc\\file.md	/^### [string] readString(format) ###$/;"	S
[string] string()	torch7\\doc\\storage.md	/^### [string] string() ###$/;"	S
[string] string(prefix, params, ignore)	torch7\\doc\\cmdline.md	/^### [string] string(prefix, params, ignore) ###$/;"	S
[string] torch.getdefaulttensortype()	torch7\\doc\\utility.md	/^### [string] torch.getdefaulttensortype() ###$/;"	S
[string] torch.type(object)	torch7\\doc\\utility.md	/^### [string] torch.type(object) ###$/;"	S
[string] torch.typename(object)	torch7\\doc\\utility.md	/^### [string] torch.typename(object) ###$/;"	S
[table] parse(arg)	torch7\\doc\\cmdline.md	/^### [table] parse(arg) ###$/;"	S
[table] time()	torch7\\doc\\timer.md	/^### [table] time() ###$/;"	S
[table] torch.getconstructortable(string)	torch7\\doc\\utility.md	/^### [table] torch.getconstructortable(string) ###$/;"	S
[table] torch.getenv(function or userdata)	torch7\\doc\\utility.md	/^### [table] torch.getenv(function or userdata) ###$/;"	S
[table] torch.getmetatable(string)	torch7\\doc\\utility.md	/^### [table] torch.getmetatable(string) ###$/;"	S
[table] torch.newmetatable(name, parentName, constructor)	torch7\\doc\\utility.md	/^### [table] torch.newmetatable(name, parentName, constructor) ###$/;"	S
[table] torch.totable(object)	torch7\\doc\\utility.md	/^### [table] torch.totable(object) ###$/;"	S
[userdata] torch.id(object)	torch7\\doc\\utility.md	/^### [userdata] torch.id(object) ###$/;"	S
[userdata] torch.typename2id(string)	torch7\\doc\\utility.md	/^### [userdata] torch.typename2id(string) ###$/;"	S
[x, lu] torch.gesv([resb, resa,] B, A)	torch7\\doc\\maths.md	/^### [x, lu] torch.gesv([resb, resa,] B, A) ###$/;"	S
[x] torch.trtrs([resb, resa,] b, a [, 'U' or 'L'] [, 'N' or 'T'] [, 'N' or 'U'])	torch7\\doc\\maths.md	/^### [x] torch.trtrs([resb, resa,] b, a [, 'U' or 'L'] [, 'N' or 'T'] [, 'N' or 'U']) ###$/;"	S
_	example\\cifar_resnet.py	/^        loss, _ = sess.run([cross_entropy, train_step], feed_dict={x: batch_xs, label:batch_ys})$/;"	v
_	example\\mnist_lenet.py	/^        loss, _ = sess.run([cross_entropy, train_step], feed_dict={x: batch_xs, label:batch_ys})$/;"	v
_	example\\mnist_mlp_auto_shape_inference.py	/^        loss, _ = sess.run([cross_entropy, train_step], feed_dict={x: batch_xs, label:batch_ys})$/;"	v
_	lua\\testes\\coroutine.lua	/^    local <toclose> _ = setmetatable({}, {__close = function () X = true end})$/;"	f
_	lua\\testes\\locals.lua	/^    local <toclose> _ = func2close(function () X = false end)$/;"	f
_	lua\\testes\\locals.lua	/^    local <toclose> _ = func2close(function () Y = 10 end)$/;"	f
_	torch7\\generic\\Storage.c	/^static const struct luaL_Reg torch_Storage_(_) [] = {$/;"	v	typeref:typename:const struct luaL_Reg torch_Storage_ ()[]	file:
_	torch7\\generic\\Tensor.c	/^static const struct luaL_Reg torch_Tensor_(_) [] = {$/;"	v	typeref:typename:const struct luaL_Reg torch_Tensor_ ()[]	file:
_	torch7\\generic\\TensorOperator.c	/^static const struct luaL_Reg torch_TensorOperator_(_) [] = {$/;"	v	typeref:typename:const struct luaL_Reg torch_TensorOperator_ ()[]	file:
_,	torch7\\test\\test.lua	/^   expected:map2(a, b, function(_, a, b) return TH_lerp(a, b, w) end)$/;"	f
_,	torch7\\test\\test.lua	/^  expected_c:map(a, function(_, a) return math.max(a, v) end)$/;"	f
_,	torch7\\test\\test.lua	/^  expected_c:map(a, function(_, a) return math.min(a, v) end)$/;"	f
_,	torch7\\test\\test.lua	/^  expected_c:map2(a, b, function(_, a, b) return math.max(a, b) end)$/;"	f
_,	torch7\\test\\test.lua	/^  expected_c:map2(a, b, function(_, a, b) return math.min(a, b) end)$/;"	f
_CRT_SECURE_NO_WARNINGS	lua\\lprefix.h	/^#define _CRT_SECURE_NO_WARNINGS /;"	d
_CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939	bin\\torch7\\TensorMath.c	/^#define _CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939$/;"	d	file:
_CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939	bin\\torch7\\random.c	/^#define _CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939$/;"	d	file:
_ENV	lua\\testes\\events.lua	/^_ENV = setmetatable({}, {__index=function (_,k) return _g[k] end})$/;"	f
_ENV	lua\\testes\\locals.lua	/^local _ENV = (function (...) return ... end)(_G, dummy)   -- {$/;"	f
_FILE_OFFSET_BITS	lua\\lprefix.h	/^#define _FILE_OFFSET_BITS /;"	d
_G.f	lua\\testes\\coroutine.lua	/^            _G.f = function () a=a+1; return a end$/;"	f
_Group	nnvm\\python\\nnvm\\graph.py	/^from .symbol import Symbol, Group as _Group$/;"	x
_HELPER	dmlc-core\\scripts\\lint.py	/^_HELPER = LintHelper()$/;"	v
_HELPER	dmlc-core\\scripts\\lint3.py	/^_HELPER = LintHelper()$/;"	v
_LARGEFILE_SOURCE	lua\\lprefix.h	/^#define _LARGEFILE_SOURCE /;"	d
_LIB	nnvm\\python\\nnvm\\_base.py	/^_LIB = _load_lib()$/;"	v
_MERSENNE_STATE_M	torch7\\lib\\TH\\THRandom.h	/^#define _MERSENNE_STATE_M /;"	d
_MERSENNE_STATE_N	torch7\\lib\\TH\\THRandom.h	/^#define _MERSENNE_STATE_N /;"	d
_Number	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^from numbers import Number as _Number$/;"	x
_Number	nnvm\\python\\nnvm\\symbol.py	/^from numbers import Number as _Number$/;"	x
_THArgCheck	torch7\\lib\\TH\\THGeneral.c	/^void _THArgCheck(const char *file, int line, int condition, int argNumber, const char *fmt, ...)$/;"	f	typeref:typename:void
_THAssertionFailed	torch7\\lib\\TH\\THGeneral.c	/^void _THAssertionFailed(const char *file, const int line, const char *exp, const char *fmt, ...)/;"	f	typeref:typename:void
_THError	torch7\\lib\\TH\\THGeneral.c	/^void _THError(const char *file, const int line, const char *fmt, ...)$/;"	f	typeref:typename:void
_THMATH_H	torch7\\lib\\TH\\THMath.h	/^#define _THMATH_H$/;"	d
_THSizeDesc	torch7\\lib\\TH\\THGeneral.c	/^TH_API THDescBuff _THSizeDesc(const long *size, const long ndim) {$/;"	f	typeref:typename:TH_API THDescBuff
_Timer	torch7\\Timer.c	/^typedef struct _Timer$/;"	s	file:
_X	lua\\testes\\coroutine.lua	/^_X = coroutine.wrap(function ()$/;"	f
_XOPEN_SOURCE	lua\\lprefix.h	/^#define _XOPEN_SOURCE /;"	d
__DICT__	dmlc-core\\include\\dmlc\\parameter.h	/^  inline std::map<std::string, std::string> __DICT__() const {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::map<std::string,std::string>
__DICT__	nnvm\\include\\dmlc\\parameter.h	/^  inline std::map<std::string, std::string> __DICT__() const {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::map<std::string,std::string>
__DOC__	dmlc-core\\include\\dmlc\\parameter.h	/^  inline static std::string __DOC__() {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::string
__DOC__	nnvm\\include\\dmlc\\parameter.h	/^  inline static std::string __DOC__() {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::string
__FIELDS__	dmlc-core\\include\\dmlc\\parameter.h	/^  inline static std::vector<ParamFieldInfo> __FIELDS__() {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::vector<ParamFieldInfo>
__FIELDS__	nnvm\\include\\dmlc\\parameter.h	/^  inline static std::vector<ParamFieldInfo> __FIELDS__() {$/;"	f	struct:dmlc::Parameter	typeref:typename:std::vector<ParamFieldInfo>
__REGISTER_OR_GET__	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &__REGISTER_OR_GET__(const std::string& name) {$/;"	f	class:dmlc::Registry	typeref:typename:EntryType &
__REGISTER_OR_GET__	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &__REGISTER_OR_GET__(const std::string& name) {$/;"	f	class:dmlc::Registry	typeref:typename:EntryType &
__REGISTER__	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &__REGISTER__(const std::string& name) {$/;"	f	class:dmlc::Registry	typeref:typename:EntryType &
__REGISTER__	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &__REGISTER__(const std::string& name) {$/;"	f	class:dmlc::Registry	typeref:typename:EntryType &
__THHalf	torch7\\lib\\TH\\THHalf.h	/^} __THHalf;$/;"	t	typeref:struct:__thalign__
__THHalf2	torch7\\lib\\TH\\THHalf.h	/^} __THHalf2;$/;"	t	typeref:struct:__thalign__
__TH_TENSOR_APPLYX_PREAMBLE	torch7\\lib\\TH\\THTensorApply.h	/^#define __TH_TENSOR_APPLYX_PREAMBLE(/;"	d
__TH_TENSOR_APPLYX_UPDATE_COUNTERS	torch7\\lib\\TH\\THTensorApply.h	/^#define  __TH_TENSOR_APPLYX_UPDATE_COUNTERS(/;"	d
__add	lua\\testes\\coroutine.lua	/^  __add = function(a,b) coroutine.yield(nil, "add");$/;"	f
__add__	nnvm\\python\\nnvm\\symbol.py	/^    def __add__(self, other):$/;"	m	class:Symbol
__all__	nnvm\\python\\nnvm\\_base.py	/^__all__ = ['NNNetError']$/;"	v
__all__	python\\tinyflow\\_base.py	/^__all__ = ["float32", "placeholder", "Variable", "group",$/;"	v
__anon00294e480110	dmlc-core\\src\\io\\azure_filesys.cc	/^namespace {$/;"	n	namespace:dmlc::io	file:
__anon029e158d0108	lua\\lparser.c	/^static const struct {$/;"	s	file:
__anon029e15920103	lua\\lparser.h	/^typedef enum {$/;"	g
__anon029e1592020a	lua\\lparser.h	/^  union {$/;"	u	struct:expdesc
__anon029e15920308	lua\\lparser.h	/^    struct {  \/* for indexed variables *\/$/;"	s	union:expdesc::__anon029e1592020a
__anon029e15920408	lua\\lparser.h	/^    struct {  \/* for local variables and upvalues *\/$/;"	s	union:expdesc::__anon029e1592020a
__anon029e15920508	lua\\lparser.h	/^  struct {  \/* list of active local variables *\/$/;"	s	struct:Dyndata
__anon0d7734b40110	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^namespace {$/;"	n	namespace:nnvm::fusion	file:
__anon18f4afeb0102	dmlc-core\\include\\dmlc\\lua.h	/^  this->PRun_([this, lua_code, &ret](lua_State* L) {$/;"	f	function:dmlc::LuaState::Eval	file:
__anon18f4afeb0202	dmlc-core\\include\\dmlc\\lua.h	/^  this->PRun_([this, &value, &ret](lua_State* L) {$/;"	f	function:dmlc::LuaState::Convert	file:
__anon18f4afeb0302	dmlc-core\\include\\dmlc\\lua.h	/^  this->PRun_([this, &key, &ret](lua_State* L) {$/;"	f	function:dmlc::LuaState::operator []	file:
__anon18f4afeb0402	dmlc-core\\include\\dmlc\\lua.h	/^  this->PRun_([this, &key, &value](lua_State* L) {$/;"	f	function:dmlc::LuaState::SetGlobalField	file:
__anon18f4afeb0502	dmlc-core\\include\\dmlc\\lua.h	/^    state_->PRun_([this, &other](lua_State* L) {$/;"	f	function:dmlc::LuaRef::LuaRef	file:
__anon18f4afeb0602	dmlc-core\\include\\dmlc\\lua.h	/^    state_->PRun_([this](lua_State* L) {$/;"	f	function:dmlc::LuaRef::~LuaRef	file:
__anon18f4afeb0702	dmlc-core\\include\\dmlc\\lua.h	/^    r.state_->PRun_([&os, &r](lua_State* L) {$/;"	f	function:dmlc::operator <<	file:
__anon18f4afeb0802	dmlc-core\\include\\dmlc\\lua.h	/^  state_->PRun_([&ret, this](lua_State* L) {$/;"	f	function:dmlc::LuaRef::Get	file:
__anon18f4afeb0902	dmlc-core\\include\\dmlc\\lua.h	/^  state_->PRun_([&ret, this](lua_State* L) {$/;"	f	function:dmlc::LuaRef::GetUDataPtr	file:
__anon18f4afeb0a02	dmlc-core\\include\\dmlc\\lua.h	/^  state_->PRun_([this, nargs, &targ, &ret](lua_State* L) {$/;"	f	function:dmlc::LuaRef::operator ()	file:
__anon18f4afeb0b02	dmlc-core\\include\\dmlc\\lua.h	/^  state_->PRun_([this, &key, &value](lua_State* L) {$/;"	f	function:dmlc::LuaRef::SetField	file:
__anon18f4afeb0c02	dmlc-core\\include\\dmlc\\lua.h	/^  state_->PRun_([this, &key, &ret](lua_State* L) {$/;"	f	function:dmlc::LuaRef::operator []	file:
__anon18f4afeb0d02	dmlc-core\\include\\dmlc\\lua.h	/^  state_->PRun_([this, index, &ret](lua_State* L) {$/;"	f	function:dmlc::LuaRef::operator []	file:
__anon1a01e9460103	lua\\ltm.h	/^typedef enum {$/;"	g
__anon235b49ae0110	nnvm\\src\\pass\\plan_memory.cc	/^namespace {$/;"	n	namespace:nnvm::pass	file:
__anon27cc8e370102	dmlc-core\\src\\io\\cached_input_split.h	/^  iter_preproc_->Init([this](InputSplitBase::Chunk **dptr) {$/;"	f	function:dmlc::io::CachedInputSplit::InitPreprocIter	file:
__anon27cc8e370202	dmlc-core\\src\\io\\cached_input_split.h	/^  iter_cached_.Init([this](InputSplitBase::Chunk **dptr) {$/;"	f	function:dmlc::io::CachedInputSplit::InitCachedIter	file:
__anon27cc8e370302	dmlc-core\\src\\io\\cached_input_split.h	/^    [this]() { fi_->Seek(0); });$/;"	f	function:dmlc::io::CachedInputSplit::InitCachedIter	file:
__anon29b0c9d70102	src\\op_nn.cc	/^.set_num_outputs([] (const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70202	src\\op_nn.cc	/^.set_num_inputs([] (const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70302	src\\op_nn.cc	/^.set_num_inputs([](const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70402	src\\op_nn.cc	/^.set_attr<FListInputNames>("FListInputNames", [](const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70502	src\\op_nn.cc	/^.set_num_inputs([](const NodeAttrs& attrs){$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70602	src\\op_nn.cc	/^.set_attr<FListInputNames>("FListInputNames", [](const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70702	src\\op_nn.cc	/^.set_attr<FListInputNames>("FListInputNames", [](const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70802	src\\op_nn.cc	/^                      std::vector<TShape> *oshape) {$/;"	f	namespace:tinyflow	file:
__anon29b0c9d70902	src\\op_nn.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon2da983320103	lua\\lopcodes.h	/^typedef enum {$/;"	g
__anon305116100110	nnvm\\src\\pass\\infer_shape_type.cc	/^namespace {$/;"	n	namespace:nnvm::pass	file:
__anon305116100202	nnvm\\src\\pass\\infer_shape_type.cc	/^  auto infer_step = [&](uint32_t nid, bool last_iter) {$/;"	f	function:nnvm::pass::__anon305116100110::InferAttr	file:
__anon305116100302	nnvm\\src\\pass\\infer_shape_type.cc	/^.set_body([](Graph ret) {$/;"	f	namespace:nnvm::pass::__anon305116100110	file:
__anon305116100402	nnvm\\src\\pass\\infer_shape_type.cc	/^        [](const TShape& s) { return s.ndim() == 0; },$/;"	f	function:nnvm::pass::__anon305116100110::__anon305116100302	file:
__anon305116100502	nnvm\\src\\pass\\infer_shape_type.cc	/^.set_body([](Graph ret) {$/;"	f	namespace:nnvm::pass::__anon305116100110	file:
__anon305116100602	nnvm\\src\\pass\\infer_shape_type.cc	/^        [](const int t) { return t == -1; },$/;"	f	function:nnvm::pass::__anon305116100110::__anon305116100502	file:
__anon3a912f9f0102	nnvm\\src\\core\\symbolic.cc	/^                 [](decltype(*kwargs.begin())& kv) { return kv.first; });$/;"	f	function:nnvm::GetKeys	file:
__anon3a912f9f0202	nnvm\\src\\core\\symbolic.cc	/^  DFSVisit(this->outputs, [&old_new](const NodePtr& node) {$/;"	f	function:nnvm::Symbol::Copy	file:
__anon3a912f9f0302	nnvm\\src\\core\\symbolic.cc	/^    DFSVisit(this->outputs, [&os](const NodePtr& node) {$/;"	f	function:nnvm::Symbol::Print	file:
__anon3a912f9f0402	nnvm\\src\\core\\symbolic.cc	/^    DFSVisit(this->outputs, [&ret](const NodePtr &node) {$/;"	f	function:nnvm::Symbol::ListInputs	file:
__anon3a912f9f0502	nnvm\\src\\core\\symbolic.cc	/^    DFSVisit(this->outputs, [&ret, &mutable_set, &vlist](const NodePtr &node) {$/;"	f	function:nnvm::Symbol::ListInputs	file:
__anon3a912f9f0602	nnvm\\src\\core\\symbolic.cc	/^        (const NodePtr &node) {$/;"	f	function:nnvm::Symbol::Compose	file:
__anon3a912f9f0702	nnvm\\src\\core\\symbolic.cc	/^          (const NodePtr &node) {$/;"	f	function:nnvm::Symbol::Compose	file:
__anon3a912f9f0802	nnvm\\src\\core\\symbolic.cc	/^  DFSVisit(this->outputs, [&ret](const NodePtr& node) {$/;"	f	function:nnvm::Symbol::GetInternals	file:
__anon3a912f9f0902	nnvm\\src\\core\\symbolic.cc	/^    DFSVisit(this->outputs, [&ret](const NodePtr& n) {$/;"	f	function:nnvm::Symbol::ListAttrs	file:
__anon3ab5c72f0102	nnvm\\src\\core\\graph.cc	/^             (const NodePtr& n) {$/;"	f	function:nnvm::IndexedGraph::IndexedGraph	file:
__anon3bd1912a010a	lua\\lauxlib.h	/^  union {$/;"	u	struct:luaL_Buffer
__anon464e917c0102	dmlc-core\\src\\data\\disk_row_iter.h	/^  iter_.Init([fi](RowBlockContainer<IndexType> **dptr) {$/;"	f	function:dmlc::data::DiskRowIter::TryLoadCache	file:
__anon464e917c0202	dmlc-core\\src\\data\\disk_row_iter.h	/^    [fi]() { fi->Seek(0); });$/;"	f	function:dmlc::data::DiskRowIter::TryLoadCache	file:
__anon4faed11c010a	lua\\lobject.h	/^  union {$/;"	u	struct:TString
__anon4faed11c020a	lua\\lobject.h	/^  union {LUAI_MAXALIGN;} bindata;$/;"	u	struct:Udata0
__anon4faed11c030a	lua\\lobject.h	/^  union {$/;"	u	struct:UpVal
__anon4faed11c0408	lua\\lobject.h	/^    struct {  \/* (when open) *\/$/;"	s	union:UpVal::__anon4faed11c030a
__anon56d777e10102	src\\session.cc	/^  auto ret = [&rtc, input_luaref, output_luaref]() {$/;"	f	function:tinyflow::TorchExecutor::GenerateRTCClosure	file:
__anon59ab1eae010a	lua\\llex.h	/^typedef union {$/;"	u
__anon5e84429c0102	src\\op_special.cc	/^.set_attr<FMutateInputs>("FMutateInputs", [](const NodeAttrs& attrs) {$/;"	f	namespace:tinyflow	file:
__anon6413dcf40102	dmlc-core\\src\\data\\parser.h	/^    iter_.Init([base](std::vector<RowBlockContainer<IndexType> > **dptr) {$/;"	f	function:dmlc::data::ThreadedParser::ThreadedParser	file:
__anon6413dcf40202	dmlc-core\\src\\data\\parser.h	/^      }, [base]() {base->BeforeFirst();});$/;"	f	function:dmlc::data::ThreadedParser::ThreadedParser	file:
__anon681ca6790108	lua\\lundump.c	/^typedef struct {$/;"	s	file:
__anon6f7595180108	torch7\\lib\\TH\\THGeneral.h.in	/^typedef struct {$/;"	s	file:
__anon79b1c1a10108	lua\\lmathlib.c	/^typedef struct {$/;"	s	file:
__anon7d7958700108	lua\\lstrlib.c	/^  struct {$/;"	s	struct:MatchState	file:
__anon7d795870020a	lua\\lstrlib.c	/^static const union {$/;"	u	file:
__anon7d795870030a	lua\\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	u	struct:cD	file:
__anon7d8240f60108	lua\\ldump.c	/^typedef struct {$/;"	s	file:
__anon8695ec700102	nnvm\\include\\nnvm\\op.h	/^    UpdateAttrMap(key, [key](any* pmap) {$/;"	f	function:nnvm::Op::GetAttr	file:
__anon8695ec700202	nnvm\\include\\nnvm\\op.h	/^                [this, attr_name, value, plevel](any* pmap) {$/;"	f	function:nnvm::Op::set_attr	file:
__anon8695ec700302	nnvm\\include\\nnvm\\op.h	/^  auto trigger = [attr_name, value, plevel](Op* op) {$/;"	f	function:nnvm::OpGroup::set_attr	file:
__anon89c51c3f0110	nnvm\\src\\pass\\place_device.cc	/^namespace {$/;"	n	namespace:nnvm::pass	file:
__anon97b43bd60102	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd60202	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60302	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60402	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60502	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60602	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60702	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60802	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60902	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60a02	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:tinyflow	file:
__anon97b43bd60b02	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd60c02	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd60d02	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd60e02	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd60f02	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd61002	src\\op_tensor.cc	/^                      std::vector<TShape> *oshape) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd61102	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd61202	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon97b43bd61302	src\\op_tensor.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:tinyflow	file:
__anon9c9547230102	nnvm\\include\\nnvm\\graph.h	/^                 [](const NodeEntry& e)->GNode {$/;"	f	function:nnvm::DFSVisit	typeref:typename:GNode	file:
__anon9c9547230202	nnvm\\include\\nnvm\\graph.h	/^      [fvisit](GNode n) { fvisit(*n); },  \/\/ FVisit$/;"	f	function:nnvm::DFSVisit	file:
__anon9c9547230302	nnvm\\include\\nnvm\\graph.h	/^      [](GNode n)->Node* { return n->get(); },  \/\/ HashFunc$/;"	f	function:nnvm::DFSVisit	typeref:typename:Node *	file:
__anon9c9547230402	nnvm\\include\\nnvm\\graph.h	/^      [](GNode n)->uint32_t {  \/\/ InDegree$/;"	f	function:nnvm::DFSVisit	typeref:typename:uint32_t	file:
__anon9c9547230502	nnvm\\include\\nnvm\\graph.h	/^      [](GNode n, uint32_t index)->GNode {  \/\/ GetInput$/;"	f	function:nnvm::DFSVisit	typeref:typename:GNode	file:
__anon9d7cd7c00102	dmlc-core\\src\\io\\threaded_input_split.h	/^    iter_.Init([this](InputSplitBase::Chunk **dptr) {$/;"	f	function:dmlc::io::ThreadedInputSplit::ThreadedInputSplit	file:
__anon9d7cd7c00202	dmlc-core\\src\\io\\threaded_input_split.h	/^      [base]() { base->BeforeFirst(); });$/;"	f	function:dmlc::io::ThreadedInputSplit::ThreadedInputSplit	file:
__anona099834f0108	lua\\liolib.c	/^typedef struct {$/;"	s	file:
__anona60d04f90110	nnvm\\src\\pass\\gradient.cc	/^namespace {$/;"	n	namespace:nnvm::pass	file:
__anona60d04f90202	nnvm\\src\\pass\\gradient.cc	/^  DFSVisit(ys, [&](const NodePtr& node) {$/;"	f	function:nnvm::pass::__anona60d04f90110::Gradient	file:
__anonad48b566010a	lua\\lstate.h	/^  union {$/;"	u	struct:CallInfo
__anonad48b5660208	lua\\lstate.h	/^    struct {  \/* only for Lua functions *\/$/;"	s	union:CallInfo::__anonad48b566010a
__anonad48b5660308	lua\\lstate.h	/^    struct {  \/* only for C functions *\/$/;"	s	union:CallInfo::__anonad48b566010a
__anonad48b566040a	lua\\lstate.h	/^  union {$/;"	u	struct:CallInfo
__anonad48b5660508	lua\\lstate.h	/^    struct {  \/* info about transfered values (for call\/return hooks) *\/$/;"	s	union:CallInfo::__anonad48b566040a
__anonbd0434de0102	dmlc-core\\include\\dmlc\\threadediter.h	/^    consumer_cond_.wait(lock, [this]() {$/;"	f	function:dmlc::ThreadedIter::BeforeFirst	file:
__anonbd0434de0202	dmlc-core\\include\\dmlc\\threadediter.h	/^  auto next = [producer](DType **dptr) {$/;"	f	function:dmlc::ThreadedIter::Init	file:
__anonbd0434de0302	dmlc-core\\include\\dmlc\\threadediter.h	/^  auto beforefirst = [producer]() {$/;"	f	function:dmlc::ThreadedIter::Init	file:
__anonbd0434de0402	dmlc-core\\include\\dmlc\\threadediter.h	/^  auto producer_fun = [this, next, beforefirst] () {$/;"	f	function:dmlc::ThreadedIter::Init	file:
__anonbd0434de0502	dmlc-core\\include\\dmlc\\threadediter.h	/^        producer_cond_.wait(lock, [this]() {$/;"	f	function:dmlc::ThreadedIter::Init::__anonbd0434de0402	file:
__anonbd0434de0602	dmlc-core\\include\\dmlc\\threadediter.h	/^  consumer_cond_.wait(lock, [this]() {$/;"	f	function:dmlc::ThreadedIter::Next	file:
__anonc309bbd30110	nnvm\\src\\pass\\saveload_json.cc	/^namespace {$/;"	n	namespace:nnvm::pass	file:
__anonc309bbd30202	nnvm\\src\\pass\\saveload_json.cc	/^  DFSVisit(src.outputs, [&node2index, &jgraph](const NodePtr& n) {$/;"	f	function:nnvm::pass::__anonc309bbd30110::SaveJSON	file:
__anonc9df4ec80108	bin\\torch7\\lib\\TH\\THGeneral.h	/^typedef struct {$/;"	s
__anoncf22d2710108	torch7\\lib\\TH\\THAllocator.c	/^typedef struct {$/;"	s	file:
__anond2f29df40102	dmlc-core\\include\\dmlc\\concurrency.h	/^    cv_.wait(lock, [this] {$/;"	f	function:dmlc::ConcurrentBlockingQueue::Pop	file:
__anond2f29df40202	dmlc-core\\include\\dmlc\\concurrency.h	/^    cv_.wait(lock, [this] {$/;"	f	function:dmlc::ConcurrentBlockingQueue::Pop	file:
__anond88b85530108	lua\\ltests.c	/^  struct {$/;"	s	union:Header	file:
__anond8a43d940102	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940202	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940302	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940402	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940502	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940602	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940702	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940802	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940902	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anond8a43d940a02	src\\rtc\\op_fusion.cc	/^    const std::vector<ASTPtr>& inputs) {$/;"	f	namespace:tinyflow	file:
__anonddcb2e480110	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^namespace {$/;"	n	namespace:nnvm::fusion	file:
__anondf45c76c0102	nnvm\\example\\src\\operator.cc	/^    [](NodeAttrs* attrs) {$/;"	f	namespace:myproject	file:
__anondf45c76c0202	nnvm\\example\\src\\operator.cc	/^                       std::vector<TShape> *oshape) {$/;"	f	namespace:myproject	file:
__anondf45c76c0302	nnvm\\example\\src\\operator.cc	/^    [](NodeAttrs* attrs) {$/;"	f	namespace:myproject	file:
__anondf45c76c0402	nnvm\\example\\src\\operator.cc	/^                     std::vector<int> *otype) {$/;"	f	namespace:myproject	file:
__anondf45c76c0502	nnvm\\example\\src\\operator.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:myproject	file:
__anondf45c76c0602	nnvm\\example\\src\\operator.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:myproject	file:
__anondf45c76c0702	nnvm\\example\\src\\operator.cc	/^                    const std::vector<NodeEntry>& ograds){$/;"	f	namespace:myproject	file:
__anondf45c76c0802	nnvm\\example\\src\\operator.cc	/^.set_attr<FListInputNames>("FListInputNames", [](const NodeAttrs& attrs) {$/;"	f	namespace:myproject	file:
__anondf45c76c0902	nnvm\\example\\src\\operator.cc	/^.set_attr<FMutateInputs>("FMutateInputs", [](const NodeAttrs& attrs) {$/;"	f	namespace:myproject	file:
__anondf45c76c0a02	nnvm\\example\\src\\operator.cc	/^                    const std::vector<NodeEntry>& ograds) {$/;"	f	namespace:myproject	file:
__anonf7dc9a530110	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^namespace {$/;"	n	namespace:nnvm::fusion	file:
__anonf7dc9a530202	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^  auto remap = [&](const NodePtr& n) {$/;"	f	function:nnvm::fusion::__anonf7dc9a530110::Remap	file:
__anonf7dc9a530302	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^  DFSVisit(src.outputs, [&](const NodePtr& node) {$/;"	f	function:nnvm::fusion::__anonf7dc9a530110::Fusion	file:
__anonfe8061970110	nnvm\\src\\pass\\order_mutation.cc	/^namespace {$/;"	n	namespace:nnvm::pass	file:
__anonfe8061970202	nnvm\\src\\pass\\order_mutation.cc	/^  DFSVisit(src.outputs, [&version_hist](const NodePtr& n) {$/;"	f	function:nnvm::pass::__anonfe8061970110::OrderMutation	file:
__anonfe8061970302	nnvm\\src\\pass\\order_mutation.cc	/^  auto prepare = [&version_hist, &old_new] (const NodePtr& n) {$/;"	f	function:nnvm::pass::__anonfe8061970110::OrderMutation	file:
__anonfe8061970402	nnvm\\src\\pass\\order_mutation.cc	/^  auto comparator = [](const NodeEntry& a, const NodeEntry &b) {$/;"	f	function:nnvm::pass::__anonfe8061970110::OrderMutation	file:
__band	lua\\testes\\coroutine.lua	/^  __band = function(a,b)$/;"	f
__bnot	lua\\testes\\coroutine.lua	/^  __bnot = function(a,b) coroutine.yield(nil, "bnot"); return ~val(a) end,$/;"	f
__bor	lua\\testes\\coroutine.lua	/^  __bor = function(a,b) coroutine.yield(nil, "bor");$/;"	f
__builtin__	nnvm\\python\\nnvm\\libinfo.py	/^    import builtins as __builtin__$/;"	I
__builtin__	python\\tinyflow\\_base.py	/^    import builtins as __builtin__$/;"	I
__bxor	lua\\testes\\coroutine.lua	/^  __bxor = function(a,b) coroutine.yield(nil, "bxor");$/;"	f
__call	lua\\testes\\events.lua	/^  __call = function (t, ...)$/;"	f
__call__	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^    def __call__(self, *args, **kwargs):$/;"	m	class:SymbolBase
__concat	lua\\testes\\coroutine.lua	/^  __concat = function(a,b)$/;"	f
__copy__	nnvm\\python\\nnvm\\symbol.py	/^    def __copy__(self):$/;"	m	class:Symbol
__cpuid	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^#define __cpuid(/;"	d	file:
__dealloc__	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^    def __dealloc__(self):$/;"	m	class:SymbolBase
__deepcopy__	nnvm\\python\\nnvm\\symbol.py	/^    def __deepcopy__(self, _=None):$/;"	m	class:Symbol
__del__	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def __del__(self):$/;"	m	class:RabitTracker
__del__	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^    def __del__(self):$/;"	m	class:SymbolBase
__del__	nnvm\\python\\nnvm\\graph.py	/^    def __del__(self):$/;"	m	class:Graph
__del__	python\\tinyflow\\_session.py	/^    def __del__(self):$/;"	m	class:Session
__div	lua\\testes\\coroutine.lua	/^  __div = function(a,b) coroutine.yield(nil, "div"); return val(a) \/ val(b) end,$/;"	f
__div__	nnvm\\python\\nnvm\\symbol.py	/^    def __div__(self, other):$/;"	m	class:Symbol
__enter__	nnvm\\python\\nnvm\\attribute.py	/^    def __enter__(self):$/;"	m	class:AttrScope
__enter__	nnvm\\python\\nnvm\\name.py	/^    def __enter__(self):$/;"	m	class:NameManager
__eq	lua\\testes\\coroutine.lua	/^  __eq = function(a,b) coroutine.yield(nil, "eq"); return val(a) == val(b) end,$/;"	f
__exit__	nnvm\\python\\nnvm\\attribute.py	/^    def __exit__(self, ptype, value, trace):$/;"	m	class:AttrScope
__exit__	nnvm\\python\\nnvm\\name.py	/^    def __exit__(self, ptype, value, trace):$/;"	m	class:NameManager
__get_cpuid	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^static __inline int __get_cpuid (unsigned int __level, unsigned int *__eax,$/;"	f	typeref:typename:int	file:
__getitem__	nnvm\\python\\nnvm\\symbol.py	/^    def __getitem__(self, index):$/;"	m	class:Symbol
__idiv	lua\\testes\\coroutine.lua	/^  __idiv = function(a,b) coroutine.yield(nil, "idiv");$/;"	f
__index	lua\\testes\\big.lua	/^  __index = function (t, n) coroutine.yield('g'); return _G[n] end,$/;"	f
__index	lua\\testes\\coroutine.lua	/^  __index = function (t,k) coroutine.yield(nil, "idx"); return t.k[k] end,$/;"	f
__index	lua\\testes\\nextvar.lua	/^    __index = function (_,k) return k + 1 end,$/;"	f
__index	lua\\testes\\nextvar.lua	/^setmetatable(a, { __index = function (t,k)$/;"	f
__index	lua\\testes\\sort.lua	/^                __index = function (_,k) pos1 = k end,$/;"	f
__index	lua\\testes\\sort.lua	/^        __index = function (_,k) return k * 10 end,$/;"	f
__init__	dmlc-core\\scripts\\lint.py	/^    def __init__(self):$/;"	m	class:LintHelper
__init__	dmlc-core\\scripts\\lint3.py	/^    def __init__(self):$/;"	m	class:LintHelper
__init__	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def __init__(self, hostIP, cmd, port=9091, port_end=9999, envs=None):$/;"	m	class:PSTracker
__init__	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def __init__(self, hostIP, nslave, port=9091, port_end=9999):$/;"	m	class:RabitTracker
__init__	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def __init__(self, sock):$/;"	m	class:ExSocket
__init__	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def __init__(self, sock, s_addr):$/;"	m	class:SlaveEntry
__init__	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^    def __init__(self, handle):$/;"	m	class:SymbolBase
__init__	nnvm\\python\\nnvm\\attribute.py	/^    def __init__(self, **kwargs):$/;"	m	class:AttrScope
__init__	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^    def __init__(self, handle):$/;"	m	class:SymbolBase
__init__	nnvm\\python\\nnvm\\graph.py	/^    def __init__(self, handle):$/;"	m	class:Graph
__init__	nnvm\\python\\nnvm\\name.py	/^    def __init__(self):$/;"	m	class:NameManager
__init__	nnvm\\python\\nnvm\\name.py	/^    def __init__(self, prefix):$/;"	m	class:Prefix
__init__	python\\tinyflow\\_session.py	/^    def __init__(self, config='cpu'):$/;"	m	class:Session
__init__	python\\tinyflow\\datasets.py	/^    def __init__(self, X, Y):$/;"	m	class:ArrayPacker
__init__	python\\tinyflow\\train.py	/^    def __init__(self, learning_rate, name="GradientDescent"):$/;"	m	class:GradientDescentOptimizer
__init__	python\\tinyflow\\train.py	/^    def __init__(self, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-04, name='Adam'):$/;"	m	class:AdamOptimizer
__le	lua\\testes\\coroutine.lua	/^    __le = function (a,b)$/;"	f
__le	lua\\testes\\coroutine.lua	/^  __le = function(a,b) coroutine.yield(nil, "le"); return a - b <= 0 end,$/;"	f
__len	lua\\testes\\events.lua	/^      __len = function (x) return math.floor(x) end}$/;"	f
__len	lua\\testes\\nextvar.lua	/^    __len = function () return #t end,$/;"	f
__len	lua\\testes\\nextvar.lua	/^    __len = function (_) return 5 end})$/;"	f
__lt	lua\\testes\\coroutine.lua	/^    __lt = function (a,b)$/;"	f
__lt	lua\\testes\\coroutine.lua	/^  __lt = function(a,b) coroutine.yield(nil, "lt"); return val(a) < val(b) end,$/;"	f
__mod	lua\\testes\\api.lua	/^      __mod = function (a,b) return setmetatable({a[1] % b[1]}, mt) end,$/;"	f
__mod	lua\\testes\\coroutine.lua	/^  __mod = function(a,b) coroutine.yield(nil, "mod"); return val(a) % val(b) end,$/;"	f
__mul	lua\\testes\\coroutine.lua	/^  __mul = function(a,b) coroutine.yield(nil, "mul"); return val(a) * val(b) end,$/;"	f
__mul__	nnvm\\python\\nnvm\\symbol.py	/^    def __mul__(self, other):$/;"	m	class:Symbol
__neg__	nnvm\\python\\nnvm\\symbol.py	/^    def __neg__(self):$/;"	m	class:Symbol
__newindex	lua\\testes\\big.lua	/^  __newindex = function (t, n, v) coroutine.yield('s'); _G[n] = v end,$/;"	f
__newindex	lua\\testes\\coroutine.lua	/^  __newindex = function (t,k,v) coroutine.yield(nil, "nidx"); t.k[k] = v end,$/;"	f
__newindex	lua\\testes\\nextvar.lua	/^    __newindex = function (t,k,v) count = count + 1; rawset(t,k,v) end})$/;"	f
__newindex	lua\\testes\\sort.lua	/^                __newindex = function (_,k) pos2 = k; error() end, })$/;"	f
__newindex	lua\\testes\\sort.lua	/^        __newindex = function (t,k,v)$/;"	f
__pow	lua\\testes\\coroutine.lua	/^  __pow = function(a,b) coroutine.yield(nil, "pow"); return val(a) ^ val(b) end,$/;"	f
__pow__	nnvm\\python\\nnvm\\symbol.py	/^    def __pow__(self, other):$/;"	m	class:Symbol
__radd__	nnvm\\python\\nnvm\\symbol.py	/^    def __radd__(self, other):$/;"	m	class:Symbol
__rdiv__	nnvm\\python\\nnvm\\symbol.py	/^    def __rdiv__(self, other):$/;"	m	class:Symbol
__rmul__	nnvm\\python\\nnvm\\symbol.py	/^    def __rmul__(self, other):$/;"	m	class:Symbol
__rpow__	nnvm\\python\\nnvm\\symbol.py	/^    def __rpow__(self, other):$/;"	m	class:Symbol
__rsub__	nnvm\\python\\nnvm\\symbol.py	/^    def __rsub__(self, other):$/;"	m	class:Symbol
__rtruediv__	nnvm\\python\\nnvm\\symbol.py	/^    def __rtruediv__(self, other):$/;"	m	class:Symbol
__shl	lua\\testes\\coroutine.lua	/^  __shl = function(a,b) coroutine.yield(nil, "shl");$/;"	f
__shr	lua\\testes\\coroutine.lua	/^  __shr = function(a,b) coroutine.yield(nil, "shr");$/;"	f
__slots__	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^    __slots__ = ["handle"]$/;"	v	class:SymbolBase	file:
__slots__	nnvm\\python\\nnvm\\symbol.py	/^    __slots__ = []$/;"	v	class:Symbol	file:
__sub	lua\\testes\\coroutine.lua	/^  __sub = function(a,b) coroutine.yield(nil, "sub"); return val(a) - val(b) end,$/;"	f
__sub__	nnvm\\python\\nnvm\\symbol.py	/^    def __sub__(self, other):$/;"	m	class:Symbol
__thalign__	torch7\\lib\\TH\\THHalf.h	/^#define __thalign__(/;"	d
__thalign__	torch7\\lib\\TH\\THHalf.h	/^typedef struct __thalign__(2){$/;"	s
__thalign__	torch7\\lib\\TH\\THHalf.h	/^typedef struct __thalign__(4) {$/;"	s
__thread	torch7\\lib\\TH\\THGeneral.c	/^#define __thread /;"	d	file:
__thread	torch7\\lib\\TH\\THGeneral.c	/^#define __thread$/;"	d	file:
__tostring	lua\\testes\\events.lua	/^                    __tostring=function(x) return x.name end})$/;"	f
__truediv__	nnvm\\python\\nnvm\\symbol.py	/^    def __truediv__(self, other):$/;"	m	class:Symbol
__uniform__	torch7\\lib\\TH\\THRandom.c	/^static double __uniform__(THGenerator *_generator)$/;"	f	typeref:typename:double	file:
__unm	lua\\testes\\api.lua	/^      __unm = function (a) return setmetatable({a[1]* 2}, mt) end}$/;"	f
__unm	lua\\testes\\coroutine.lua	/^  __unm = function(a,b) coroutine.yield(nil, "unm"); return -val(a) end,$/;"	f
__version__	nnvm\\python\\nnvm\\__init__.py	/^__version__ = _base.__version__$/;"	v
__version__	nnvm\\python\\nnvm\\_base.py	/^__version__ = libinfo.__version__$/;"	v
__version__	nnvm\\python\\nnvm\\libinfo.py	/^__version__ = "0.7.0"$/;"	v
_abs	nnvm\\python\\nnvm\\__init__.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^from __future__ import absolute_import as _abs$/;"	x
_abs	nnvm\\python\\nnvm\\graph.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	nnvm\\python\\nnvm\\name.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	nnvm\\python\\nnvm\\symbol.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	python\\tinyflow\\__init__.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	python\\tinyflow\\_base.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	python\\tinyflow\\_ops.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	python\\tinyflow\\_session.py	/^from __future__ import absolute_import as _abs$/;"	x
_abs	python\\tinyflow\\_util.py	/^from __future__ import absolute_import as _abs$/;"	x
_add_control_deps	nnvm\\python\\nnvm\\symbol.py	/^    def _add_control_deps(self, deps):$/;"	m	class:Symbol
_all_variable_inits	python\\tinyflow\\_base.py	/^_all_variable_inits = []$/;"	v
_check_call	nnvm\\python\\nnvm\\symbol.py	/^from ._base import _LIB, check_call as _check_call$/;"	x
_compose	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^    def _compose(self, *args, **kwargs):$/;"	m	class:SymbolBase
_ctypes	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^import ctypes as _ctypes$/;"	I
_ctypes	nnvm\\python\\nnvm\\symbol.py	/^import ctypes as _ctypes$/;"	I
_ctypes	python\\tinyflow\\_base.py	/^import ctypes as _ctypes$/;"	I
_ctypes	python\\tinyflow\\_session.py	/^import ctypes as _ctypes$/;"	I
_get_list_copt	nnvm\\python\\nnvm\\symbol.py	/^    def _get_list_copt(self, option):$/;"	m	class:Symbol
_get_numpy	python\\tinyflow\\_session.py	/^def _get_numpy(cptr, dtype, shape):$/;"	f
_init_symbol_module	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^def _init_symbol_module(symbol_class, root_namespace):$/;"	f
_init_symbol_module	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^def _init_symbol_module(symbol_class, root_namespace):$/;"	f
_internal	nnvm\\python\\nnvm\\symbol.py	/^from . import _symbol_internal as _internal$/;"	x
_load_lib	nnvm\\python\\nnvm\\_base.py	/^def _load_lib():$/;"	f
_make_atomic_symbol_function	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^def _make_atomic_symbol_function(handle, name):$/;"	f
_make_atomic_symbol_function	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^cdef _make_atomic_symbol_function(OpHandle handle, string name):$/;"	f
_map_alloc	torch7\\lib\\TH\\THAllocator.c	/^static void *_map_alloc(void* ctx_, ptrdiff_t size)$/;"	f	typeref:typename:void *	file:
_os	nnvm\\python\\nnvm\\symbol.py	/^import os as _os$/;"	I
_print_summary_map	dmlc-core\\scripts\\lint.py	/^    def _print_summary_map(strm, result_map, ftype):$/;"	m	class:LintHelper
_print_summary_map	dmlc-core\\scripts\\lint3.py	/^    def _print_summary_map(strm, result_map, ftype):$/;"	m	class:LintHelper
_set_attr	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^    def _set_attr(self, **kwargs):$/;"	m	class:SymbolBase
_set_attr	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^    def _set_attr(self, **kwargs):$/;"	m	class:SymbolBase
_set_json_attr	nnvm\\python\\nnvm\\graph.py	/^    def _set_json_attr(self, key, value, type_name=None):$/;"	m	class:Graph
_set_symbol_class	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^def _set_symbol_class(cls):$/;"	f
_set_symbol_class	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^cdef _set_symbol_class(cls):$/;"	f
_set_symbol_list_attr	nnvm\\python\\nnvm\\graph.py	/^    def _set_symbol_list_attr(self, key, value):$/;"	m	class:Graph
_stringify	torch7\\lib\\TH\\generic\\THTensor.c	/^#define _stringify(/;"	d	file:
_sym	python\\tinyflow\\nn.py	/^from nnvm import symbol as _sym$/;"	x
_sym	python\\tinyflow\\train.py	/^from nnvm import symbol as _sym$/;"	x
_symbol_cls	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^_symbol_cls = SymbolBase$/;"	v
_symbol_cls	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^_symbol_cls = SymbolBase$/;"	v
_sys	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^import sys as _sys$/;"	I
_sys	nnvm\\python\\nnvm\\symbol.py	/^import sys as _sys$/;"	I
a	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  int a;$/;"	m	struct:Param	typeref:typename:int	file:
a	lua\\makefile	/^a:	$(ALL_A)$/;"	t
a	lua\\testes\\api.lua	/^  a = require'debug'; assert(type(a.getlocal) == "function")$/;"	f
a	lua\\testes\\api.lua	/^  a = require'math'; assert(type(a.sin) == "function")$/;"	f
a	lua\\testes\\api.lua	/^  a = require'table'; assert(type(a.insert) == "function")$/;"	f
a	lua\\testes\\api.lua	/^  a = {__gc = function () end}$/;"	f
a	lua\\testes\\api.lua	/^  local a = coroutine.wrap(function ()$/;"	f
a	lua\\testes\\api.lua	/^a = setmetatable({x="u"}, {__concat = function (a,b) return a.x..'.'..b.x end})$/;"	f
a	lua\\testes\\api.lua	/^a = to("tocfunction", math.deg)$/;"	f
a	lua\\testes\\calls.lua	/^      local function a (f)$/;"	f
a	lua\\testes\\calls.lua	/^     local a = function () x = 'hi' end; \\$/;"	f
a	lua\\testes\\calls.lua	/^a = assert(load(function () return nil end))$/;"	f
a	lua\\testes\\closure.lua	/^  local a = function (x)  return math.sin(_ENV[x])  end$/;"	f
a	lua\\testes\\coroutine.lua	/^a = function(a) coroutine.wrap(a)(a) end$/;"	f
a	lua\\testes\\db.lua	/^a = "function f () end"$/;"	f
a	lua\\testes\\errors.lua	/^assert(doit("function a (, ...) end"))$/;"	f
a	lua\\testes\\errors.lua	/^assert(doit("function a (... , ...) end"))$/;"	f
a	lua\\testes\\gc.lua	/^  a = coroutine.create(function () end)   -- create 1 new coroutine$/;"	f
a	lua\\testes\\gc.lua	/^  a = function () end   -- create 1 new closure$/;"	f
a	lua\\testes\\goto.lua	/^    local <toclose> a = setmetatable({}, {__close = function () X = true end})$/;"	f
a	lua\\testes\\sort.lua	/^a = setmetatable({}, {__len = function () return maxI end})$/;"	f
a	lua\\testes\\sort.lua	/^local a = setmetatable({}, {__len = function () return -1 end})$/;"	f
a.b.c.f1	lua\\testes\\calls.lua	/^function a.b.c.f1 (x) return x+1 end$/;"	f
a.y	lua\\testes\\calls.lua	/^function a.y (x) return x+self end$/;"	f
a:deep	lua\\testes\\calls.lua	/^function a:deep (n) if n>0 then return self:deep(n-1) else return 101 end end$/;"	f
a:test	lua\\testes\\gc.lua	/^  function a:test ()$/;"	f
a:x	lua\\testes\\calls.lua	/^function a:x (x) return x+self.i end$/;"	f
a["t"].x	lua\\testes\\calls.lua	/^a["t"].x = function (self, a,b) return self.i+a+b end$/;"	f
a[i]	lua\\testes\\closure.lua	/^      a[i] = function () B.g = B.g+1; y = y+x; return y+A end$/;"	f
a[i]	lua\\testes\\closure.lua	/^    a[i] = function (x) local t = y; y = x; return t end$/;"	f
a[i]	lua\\testes\\closure.lua	/^  a[i] = function () i = x+1; return x end$/;"	f
a[i]	lua\\testes\\closure.lua	/^  a[i] = {set = function(x) i=x end, get = function () return i end}$/;"	f
a[i]	lua\\testes\\closure.lua	/^  a[i] = {set = function(x, y) i=x; k=y end,$/;"	f
abortDiagnosis	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private String abortDiagnosis = "";$/;"	f	class:ApplicationMaster	file:
abortJob	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void abortJob(String msg) {$/;"	m	class:ApplicationMaster	file:
abortRequested	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^    public boolean abortRequested = false;$/;"	f	class:TaskRecord
absentkey	lua\\ltable.c	/^static const TValue absentkey = {ABSTKEYCONSTANT};$/;"	v	typeref:typename:const TValue	file:
abslineinfo	lua\\lobject.h	/^  AbsLineInfo *abslineinfo;  \/* idem *\/$/;"	m	struct:Proto	typeref:typename:AbsLineInfo *
accept_slaves	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def accept_slaves(self, nslave):$/;"	m	class:RabitTracker
accreal	torch7\\lib\\TH\\THGenerateByteType.h	/^#define accreal /;"	d
accreal	torch7\\lib\\TH\\THGenerateCharType.h	/^#define accreal /;"	d
accreal	torch7\\lib\\TH\\THGenerateDoubleType.h	/^#define accreal /;"	d
accreal	torch7\\lib\\TH\\THGenerateFloatType.h	/^#define accreal /;"	d
accreal	torch7\\lib\\TH\\THGenerateHalfType.h	/^#define accreal /;"	d
accreal	torch7\\lib\\TH\\THGenerateIntType.h	/^#define accreal /;"	d
accreal	torch7\\lib\\TH\\THGenerateLongType.h	/^#define accreal /;"	d
accreal	torch7\\lib\\TH\\THGenerateShortType.h	/^#define accreal /;"	d
accuracy	example\\cifar_resnet.py	/^accuracy = tf.reduce_mean(correct_prediction)$/;"	v
accuracy	example\\mnist_lenet.py	/^accuracy = tf.reduce_mean(correct_prediction)$/;"	v
accuracy	example\\mnist_mlp_auto_shape_inference.py	/^accuracy = tf.reduce_mean(correct_prediction)$/;"	v
accuracy	example\\mnist_softmax.py	/^accuracy = tf.reduce_mean(correct_prediction)$/;"	v
accuracy	example\\mnist_softmax_minimum.py	/^accuracy = tf.reduce_mean(correct_prediction)$/;"	v
act	dmlc-core\\test\\parameter_test.cc	/^  int act;$/;"	m	struct:Param	typeref:typename:int	file:
activation	dmlc-core\\example\\parameter.cc	/^  int activation;$/;"	m	struct:MyParam	typeref:typename:int	file:
actvar	lua\\lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anon029e15920508
add(f, 'name')	torch7\\doc\\tester.md	/^### add(f, 'name') ###$/;"	S
addSection	torch7\\Tester.lua	/^   local function addSection(text)$/;"	f
addTestVariations	torch7\\test\\test_qr.lua	/^local function addTestVariations(tests, name, func, opts)$/;"	f
addTime([name] [,format])	torch7\\doc\\cmdline.md	/^### addTime([name] [,format]) ###$/;"	S
add_alias	nnvm\\src\\core\\op.cc	/^Op& Op::add_alias(const std::string& alias) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::Op	typeref:typename:Op &
add_argument	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &add_argument(const std::string &name,$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
add_argument	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &add_argument(const std::string &name,$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
add_argument	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::add_argument(const std::string &name,$/;"	f	class:nnvm::Op	typeref:typename:Op &
add_arguments	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &add_arguments(const std::vector<ParamFieldInfo> &args) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
add_arguments	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &add_arguments(const std::vector<ParamFieldInfo> &args) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
add_arguments	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::add_arguments(const std::vector<ParamFieldInfo> &args) {$/;"	f	class:nnvm::Op	typeref:typename:Op &
add_enum	dmlc-core\\include\\dmlc\\parameter.h	/^  inline FieldEntry<int> &add_enum(const std::string &key, int value) {$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntry<int> &
add_enum	nnvm\\include\\dmlc\\parameter.h	/^  inline FieldEntry<int> &add_enum(const std::string &key, int value) {$/;"	f	class:dmlc::parameter::FieldEntry	typeref:typename:FieldEntry<int> &
add_s	lua\\lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	typeref:typename:void	file:
add_value	lua\\lstrlib.c	/^static int add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	typeref:typename:int	file:
addbuff	lua\\lstate.c	/^#define addbuff(/;"	d	file:
adddigit	lua\\lstrlib.c	/^static lua_Number adddigit (char *buff, int n, lua_Number x) {$/;"	f	typeref:typename:lua_Number	file:
addfield	lua\\ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, lua_Integer i) {$/;"	f	typeref:typename:void	file:
additems	lua\\testes\\locals.lua	/^  local function additems ()$/;"	f
addk	lua\\lcode.c	/^static int addk (FuncState *fs, TValue *key, TValue *v) {$/;"	f	typeref:typename:int	file:
addlenmod	lua\\lstrlib.c	/^static void addlenmod (char *form, const char *lenmod) {$/;"	f	typeref:typename:void	file:
addliteral	lua\\lstrlib.c	/^static void addliteral (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	typeref:typename:void	file:
addnum2buff	lua\\lobject.c	/^static void addnum2buff (BuffFS *buff, TValue *num) {$/;"	f	typeref:typename:void	file:
addprototype	lua\\lparser.c	/^static Proto *addprototype (LexState *ls) {$/;"	f	typeref:typename:Proto *	file:
addquoted	lua\\lstrlib.c	/^static void addquoted (luaL_Buffer *b, const char *s, size_t len) {$/;"	f	typeref:typename:void	file:
addr	dmlc-core\\include\\dmlc\\json.h	/^    void *addr;$/;"	m	struct:dmlc::JSONObjectReadHelper::Entry	typeref:typename:void *
addr	nnvm\\include\\dmlc\\json.h	/^    void *addr;$/;"	m	struct:dmlc::JSONObjectReadHelper::Entry	typeref:typename:void *
addreturn	lua\\lua.c	/^static int addreturn (lua_State *L) {$/;"	f	typeref:typename:int	file:
adds_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(adds_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
addsize	lua\\lobject.c	/^#define addsize(/;"	d	file:
addstr	lua\\lobject.c	/^#define addstr(/;"	d	file:
addstr2buff	lua\\lobject.c	/^static void addstr2buff (BuffFS *buff, const char *str, size_t slen) {$/;"	f	typeref:typename:void	file:
addtoclib	lua\\loadlib.c	/^static void addtoclib (lua_State *L, const char *path, void *plib) {$/;"	f	typeref:typename:void	file:
adjust_assign	lua\\lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	typeref:typename:void	file:
adjustlocalvars	lua\\lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	typeref:typename:void	file:
adjustresults	lua\\lapi.h	/^#define adjustresults(/;"	d
aliasMultinomial	torch7\\test\\test_aliasMultinomial.lua	/^local function aliasMultinomial()$/;"	f
align_bytes_	dmlc-core\\src\\io\\input_split_base.h	/^  size_t align_bytes_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:size_t
alignof	dmlc-core\\include\\dmlc\\base.h	/^#define alignof /;"	d
alignof	nnvm\\include\\dmlc\\base.h	/^#define alignof /;"	d
alimit	lua\\lobject.h	/^  unsigned int alimit;  \/* "limit" of 'array' array *\/$/;"	m	struct:Table	typeref:typename:unsigned int
all	Makefile	/^all: lib\/libtinyflow.so$/;"	t
all	dmlc-core\\Makefile	/^all: $(ALIB) test$/;"	t
all	lua\\makefile	/^all:	$(ALL_T)$/;"	t
all	lua\\testes\\coroutine.lua	/^function all (a, n, k)$/;"	f
all	lua\\testes\\libs\\makefile	/^all: lib1.so lib11.so lib2.so lib21.so lib2-v2.so$/;"	t
all	nnvm\\Makefile	/^all: lib\/libnnvm.a lib\/libnnvm_example.so$/;"	t
allgc	lua\\lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
alloc_count	lua\\ltests.c	/^static int alloc_count (lua_State *L) {$/;"	f	typeref:typename:int	file:
allocate	dmlc-core\\include\\dmlc\\memory.h	/^  inline T* allocate(size_t n) {$/;"	f	class:dmlc::ThreadlocalAllocator	typeref:typename:T *
allocate	dmlc-core\\include\\dmlc\\memory.h	/^  inline void* allocate() {$/;"	f	class:dmlc::MemoryPool	typeref:typename:void *
allocate	nnvm\\include\\dmlc\\memory.h	/^  inline T* allocate(size_t n) {$/;"	f	class:dmlc::ThreadlocalAllocator	typeref:typename:T *
allocate	nnvm\\include\\dmlc\\memory.h	/^  inline void* allocate() {$/;"	f	class:dmlc::MemoryPool	typeref:typename:void *
allocated_	dmlc-core\\include\\dmlc\\memory.h	/^  std::vector<std::unique_ptr<Page> > allocated_;$/;"	m	class:dmlc::MemoryPool	typeref:typename:std::vector<std::unique_ptr<Page>>
allocated_	nnvm\\include\\dmlc\\memory.h	/^  std::vector<std::unique_ptr<Page> > allocated_;$/;"	m	class:dmlc::MemoryPool	typeref:typename:std::vector<std::unique_ptr<Page>>
allocator	torch7\\lib\\TH\\generic\\THStorage.h	/^    THAllocator *allocator;$/;"	m	struct:THStorage	typeref:typename:THAllocator *
allocatorContext	torch7\\lib\\TH\\generic\\THStorage.h	/^    void *allocatorContext;$/;"	m	struct:THStorage	typeref:typename:void *
allocsizenode	lua\\ltable.h	/^#define allocsizenode(/;"	d
allowhook	lua\\lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State	typeref:typename:lu_byte
allweak	lua\\lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
also	torch7\\Tester.lua	/^clarity.) This function also sanitizes them (ensures they are non-nil, etc).$/;"	f
anan	lua\\testes\\math.lua	/^  local function anan (x) assert(isNaN(x)) end   -- assert Not a Number$/;"	f
anotherfunc	lua\\testes\\libs\\lib1.c	/^LUAMOD_API int anotherfunc (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
any	dmlc-core\\include\\dmlc\\any.h	/^class any {$/;"	c	namespace:dmlc
any	dmlc-core\\include\\dmlc\\any.h	/^inline any::any(T&& other) {$/;"	f	class:dmlc::any
any	dmlc-core\\include\\dmlc\\any.h	/^inline any::any(any&& other) {$/;"	f	class:dmlc::any
any	dmlc-core\\include\\dmlc\\any.h	/^inline any::any(const any& other) {$/;"	f	class:dmlc::any
any	nnvm\\include\\dmlc\\any.h	/^class any {$/;"	c	namespace:dmlc
any	nnvm\\include\\dmlc\\any.h	/^inline any::any(T&& other) {$/;"	f	class:dmlc::any
any	nnvm\\include\\dmlc\\any.h	/^inline any::any(any&& other) {$/;"	f	class:dmlc::any
any	nnvm\\include\\dmlc\\any.h	/^inline any::any(const any& other) {$/;"	f	class:dmlc::any
api_check	lua\\llimits.h	/^#define api_check(/;"	d
api_checknelems	lua\\lapi.h	/^#define api_checknelems(/;"	d
api_incr_top	lua\\lapi.h	/^#define api_incr_top(/;"	d
apico	lua\\testes\\coroutine.lua	/^local function apico (...)$/;"	f
appArgs	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private String appArgs = "";$/;"	f	class:Client	file:
appCp	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private String appCp = null;$/;"	f	class:Client	file:
appHostName	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private String appHostName = "";$/;"	f	class:ApplicationMaster	file:
appId	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^        private ApplicationId appId;$/;"	f	class:Client.CtrlCHandler	file:
appPriority	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int appPriority = 0;$/;"	f	class:ApplicationMaster	file:
appTrackerPort	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int appTrackerPort = 0;$/;"	f	class:ApplicationMaster	file:
appTrackerUrl	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private String appTrackerUrl = "";$/;"	f	class:ApplicationMaster	file:
applehelp	dmlc-core\\doc\\Makefile	/^applehelp:$/;"	t
apply	nnvm\\python\\nnvm\\graph.py	/^    def apply(self, passes):$/;"	m	class:Graph
applyHeapDelta	torch7\\lib\\TH\\THGeneral.c	/^static ptrdiff_t applyHeapDelta() {$/;"	f	typeref:typename:ptrdiff_t	file:
areOrdered	torch7\\test\\test.lua	/^    areOrdered = function(a, b) return a <= b end$/;"	f
areOrdered	torch7\\test\\test.lua	/^    areOrdered = function(a, b) return a >= b end$/;"	f
arg_nodes	nnvm\\src\\pass\\saveload_json.cc	/^  std::vector<uint32_t> arg_nodes;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONGraph	typeref:typename:std::vector<uint32_t>	file:
argmax	python\\tinyflow\\_ops.py	/^def argmax(x, axis):$/;"	f
args	dmlc-core\\src\\io\\uri_spec.h	/^  std::map<std::string, std::string> args;$/;"	m	class:dmlc::io::URISpec	typeref:typename:std::map<std::string,std::string>
args_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  std::vector<ASTPtr> args_;$/;"	m	class:nnvm::fusion::CallAST	typeref:typename:std::vector<ASTPtr>
arguments	dmlc-core\\include\\dmlc\\registry.h	/^  std::vector<ParamFieldInfo> arguments;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::vector<ParamFieldInfo>
arguments	nnvm\\include\\dmlc\\registry.h	/^  std::vector<ParamFieldInfo> arguments;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::vector<ParamFieldInfo>
arguments	nnvm\\include\\nnvm\\op.h	/^  std::vector<ParamFieldInfo> arguments;$/;"	m	class:nnvm::Op	typeref:typename:std::vector<ParamFieldInfo>
arith	lua\\lstrlib.c	/^static int arith (lua_State *L, int op, const char *mtname) {$/;"	f	typeref:typename:int	file:
arith_add	lua\\lstrlib.c	/^static int arith_add (lua_State *L) {$/;"	f	typeref:typename:int	file:
arith_div	lua\\lstrlib.c	/^static int arith_div (lua_State *L) {$/;"	f	typeref:typename:int	file:
arith_idiv	lua\\lstrlib.c	/^static int arith_idiv (lua_State *L) {$/;"	f	typeref:typename:int	file:
arith_mod	lua\\lstrlib.c	/^static int arith_mod (lua_State *L) {$/;"	f	typeref:typename:int	file:
arith_mul	lua\\lstrlib.c	/^static int arith_mul (lua_State *L) {$/;"	f	typeref:typename:int	file:
arith_pow	lua\\lstrlib.c	/^static int arith_pow (lua_State *L) {$/;"	f	typeref:typename:int	file:
arith_sub	lua\\lstrlib.c	/^static int arith_sub (lua_State *L) {$/;"	f	typeref:typename:int	file:
arith_unm	lua\\lstrlib.c	/^static int arith_unm (lua_State *L) {$/;"	f	typeref:typename:int	file:
arr	lua\\lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anon029e15920508	typeref:typename:Vardesc *
arr	lua\\lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist	typeref:typename:Labeldesc *
array	lua\\lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table	typeref:typename:TValue *
array_view	dmlc-core\\include\\dmlc\\array_view.h	/^  array_view(const ValueType* begin, const ValueType* end) {$/;"	f	class:dmlc::array_view
array_view	dmlc-core\\include\\dmlc\\array_view.h	/^  array_view(const std::array<ValueType, size>& other) {  \/\/ NOLINT(*)$/;"	f	class:dmlc::array_view
array_view	dmlc-core\\include\\dmlc\\array_view.h	/^  array_view(const std::vector<ValueType>& other) {  \/\/ NOLINT(*)$/;"	f	class:dmlc::array_view
array_view	dmlc-core\\include\\dmlc\\array_view.h	/^class array_view {$/;"	c	namespace:dmlc
array_view	nnvm\\include\\dmlc\\array_view.h	/^  array_view(array_view<ValueType>&& other) { \/\/ NOLINT(*)$/;"	f	class:dmlc::array_view
array_view	nnvm\\include\\dmlc\\array_view.h	/^  array_view(const ValueType* begin, const ValueType* end) {$/;"	f	class:dmlc::array_view
array_view	nnvm\\include\\dmlc\\array_view.h	/^  array_view(const std::array<ValueType, size>& other) {  \/\/ NOLINT(*)$/;"	f	class:dmlc::array_view
array_view	nnvm\\include\\dmlc\\array_view.h	/^  array_view(const std::vector<ValueType>& other) {  \/\/ NOLINT(*)$/;"	f	class:dmlc::array_view
array_view	nnvm\\include\\dmlc\\array_view.h	/^class array_view {$/;"	c	namespace:dmlc
arrayindex	lua\\ltable.c	/^static unsigned int arrayindex (lua_Integer k) {$/;"	f	typeref:typename:unsigned int	file:
ascii() [default]	torch7\\doc\\file.md	/^### ascii() [default] ###$/;"	S
assert(condition [, message])	torch7\\doc\\tester.md	/^### assert(condition [, message]) ###$/;"	S
assertError(f [, message])	torch7\\doc\\tester.md	/^### assertError(f [, message]) ###$/;"	S
assertErrorMsg(f, errmsg [, message])	torch7\\doc\\tester.md	/^### assertErrorMsg(f, errmsg [, message]) ###$/;"	S
assertErrorObj(f, errcomp [, message])	torch7\\doc\\tester.md	/^### assertErrorObj(f, errcomp [, message]) ###$/;"	S
assertErrorPattern(f, errPattern [, message])	torch7\\doc\\tester.md	/^### assertErrorPattern(f, errPattern [, message]) ###$/;"	S
assertGeneralEq(got, expected [, tolerance] [, message])	torch7\\doc\\tester.md	/^### assertGeneralEq(got, expected [, tolerance] [, message]) ###$/;"	S
assertGeneralNe(got, unexpected  [, tolerance] [, message])	torch7\\doc\\tester.md	/^### assertGeneralNe(got, unexpected  [, tolerance] [, message]) ###$/;"	S
assertIsOrdered	torch7\\test\\test.lua	/^local function assertIsOrdered(order, x, mxx, ixx, task)$/;"	f
assertNoError(f [, message])	torch7\\doc\\tester.md	/^### assertNoError(f [, message]) ###$/;"	S
assertTableEq(ta, tb [, tolerance] [, message])	torch7\\doc\\tester.md	/^### assertTableEq(ta, tb [, tolerance] [, message]) ###$/;"	S
assertTableNe(ta, tb [, tolerance] [, message])	torch7\\doc\\tester.md	/^### assertTableNe(ta, tb [, tolerance] [, message]) ###$/;"	S
assertTensorEq(ta, tb [, tolerance] [, message])	torch7\\doc\\tester.md	/^### assertTensorEq(ta, tb [, tolerance] [, message]) ###$/;"	S
assertTensorNe(ta, tb [, tolerance] [, message])	torch7\\doc\\tester.md	/^### assertTensorNe(ta, tb [, tolerance] [, message]) ###$/;"	S
assertalmosteq(a, b [, tolerance] [, message])	torch7\\doc\\tester.md	/^### assertalmosteq(a, b [, tolerance] [, message]) ###$/;"	S
asserteq(a, b [, message])	torch7\\doc\\tester.md	/^### asserteq(a, b [, message]) ###$/;"	S
assertge(a, b [, message])	torch7\\doc\\tester.md	/^### assertge(a, b [, message]) ###$/;"	S
assertgt(a, b [, message])	torch7\\doc\\tester.md	/^### assertgt(a, b [, message]) ###$/;"	S
assertle(a, b [, message])	torch7\\doc\\tester.md	/^### assertle(a, b [, message]) ###$/;"	S
assertlt(a, b [, message])	torch7\\doc\\tester.md	/^### assertlt(a, b [, message]) ###$/;"	S
assertne(a, b [, message])	torch7\\doc\\tester.md	/^### assertne(a, b [, message]) ###$/;"	S
assign	nnvm\\include\\nnvm\\tuple.h	/^  inline void assign(RandomAccessIterator begin,$/;"	f	class:nnvm::Tuple	typeref:typename:void
assign_rank	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def assign_rank(self, rank, wait_conn, tree_map, parent_map, ring_map):$/;"	m	class:SlaveEntry
assign_var_nids_	src\\session.cc	/^  std::vector<uint32_t> assign_var_nids_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<uint32_t>	file:
at_end_	dmlc-core\\src\\io\\s3_filesys.cc	/^  bool at_end_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:bool	file:
at_head_	dmlc-core\\src\\data\\basic_row_iter.h	/^  bool at_head_;$/;"	m	class:dmlc::data::BasicRowIter	typeref:typename:bool
atof	dmlc-core\\src\\data\\strtonum.h	/^inline float atof(const char *nptr) {$/;"	f	namespace:dmlc::data	typeref:typename:float
atol	dmlc-core\\src\\data\\strtonum.h	/^inline long atol(const char* p) {  \/\/ NOLINT(*)$/;"	f	namespace:dmlc::data	typeref:typename:long
atomic	lua\\lgc.c	/^static lu_mem atomic (lua_State *L) {$/;"	f	typeref:typename:lu_mem	file:
atomic2gen	lua\\lgc.c	/^static void atomic2gen (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
attemptCounter	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^    public int attemptCounter = 0;$/;"	f	class:TaskRecord
attr	nnvm\\python\\nnvm\\symbol.py	/^    def attr(self, key):$/;"	m	class:Symbol
attr	nnvm\\src\\core\\op.cc	/^  std::unordered_map<std::string, std::unique_ptr<any> > attr;$/;"	m	struct:nnvm::OpManager	typeref:typename:std::unordered_map<std::string,std::unique_ptr<any>>	file:
attr_name_	nnvm\\include\\nnvm\\op.h	/^  std::string attr_name_;$/;"	m	class:nnvm::OpMap	typeref:typename:std::string
attr_parser	nnvm\\include\\nnvm\\op.h	/^  std::function<void(NodeAttrs* attrs)> attr_parser = nullptr;$/;"	m	class:nnvm::Op	typeref:typename:std::function<void (NodeAttrs * attrs)>
attriblocalstat	lua\\lparser.c	/^static void attriblocalstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
attrs	nnvm\\include\\nnvm\\graph.h	/^  std::unordered_map<std::string, std::shared_ptr<any> > attrs;$/;"	m	class:nnvm::Graph	typeref:typename:std::unordered_map<std::string,std::shared_ptr<any>>
attrs	nnvm\\include\\nnvm\\node.h	/^  NodeAttrs attrs;$/;"	m	class:nnvm::Node	typeref:typename:NodeAttrs
attrs	nnvm\\src\\pass\\saveload_json.cc	/^  std::unordered_map<std::string, std::shared_ptr<any> > attrs;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONGraph	typeref:typename:std::unordered_map<std::string,std::shared_ptr<any>>	file:
author	dmlc-core\\doc\\conf.py	/^author = u'dmlc-core developers'$/;"	v
autoSpacing() [default]	torch7\\doc\\file.md	/^### autoSpacing() [default] ###$/;"	S
aux	lua\\testes\\db.lua	/^  local function aux ()$/;"	f
aux	lua\\testes\\errors.lua	/^      local aux = function () return f(x-1) end$/;"	f
aux	lua\\testes\\heavy.lua	/^  local function aux ()$/;"	f
aux	lua\\testes\\math.lua	/^  local function aux (x1, x2)     -- test random for small intervals$/;"	f
aux	lua\\testes\\math.lua	/^  local function aux(p1, p2)       -- test random for large intervals$/;"	f
aux_close	lua\\liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
aux_getn	lua\\ltablib.c	/^#define aux_getn(/;"	d	file:
aux_lines	lua\\liolib.c	/^static void aux_lines (lua_State *L, int toclose) {$/;"	f	typeref:typename:void	file:
aux_upvalue	lua\\lapi.c	/^static const char *aux_upvalue (TValue *fi, int n, TValue **val,$/;"	f	typeref:typename:const char *	file:
auxgetinfo	lua\\ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	typeref:typename:int	file:
auxgetstr	lua\\lapi.c	/^static int auxgetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	typeref:typename:int	file:
auxresume	lua\\lcorolib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	typeref:typename:int	file:
auxsetstr	lua\\lapi.c	/^static void auxsetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	typeref:typename:void	file:
auxsort	lua\\ltablib.c	/^static void auxsort (lua_State *L, IdxT lo, IdxT up,$/;"	f	typeref:typename:void	file:
auxstatus	lua\\lcorolib.c	/^static int auxstatus (lua_State *L, lua_State *co) {$/;"	f	typeref:typename:int	file:
auxupvalue	lua\\ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	typeref:typename:int	file:
aws_access_id_	dmlc-core\\src\\io\\s3_filesys.h	/^  std::string aws_access_id_;$/;"	m	class:dmlc::io::S3FileSystem	typeref:typename:std::string
aws_id_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string aws_id_, aws_key_;$/;"	m	class:dmlc::io::s3::ReadStream	typeref:typename:std::string	file:
aws_id_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string aws_id_, aws_key_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:std::string	file:
aws_key_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string aws_id_, aws_key_;$/;"	m	class:dmlc::io::s3::ReadStream	typeref:typename:std::string	file:
aws_key_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string aws_id_, aws_key_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:std::string	file:
aws_secret_key_	dmlc-core\\src\\io\\s3_filesys.h	/^  std::string aws_secret_key_;$/;"	m	class:dmlc::io::S3FileSystem	typeref:typename:std::string
azure_account_	dmlc-core\\src\\io\\azure_filesys.h	/^  std::string azure_account_;$/;"	m	class:dmlc::io::AzureFileSystem	typeref:typename:std::string
azure_filesys.o	dmlc-core\\Makefile	/^azure_filesys.o: src\/io\/azure_filesys.cc$/;"	t
azure_key_	dmlc-core\\src\\io\\azure_filesys.h	/^  std::string azure_key_;$/;"	m	class:dmlc::io::AzureFileSystem	typeref:typename:std::string
b	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  int b;$/;"	m	struct:Param	typeref:typename:int	file:
b	lua\\lauxlib.h	/^    char b[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	union:luaL_Buffer::__anon3bd1912a010a	typeref:typename:char[]
b	lua\\lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer	typeref:typename:char *
b	lua\\ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	typeref:typename:luai_jmpbuf	file:
b	lua\\lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value	typeref:typename:int
b	lua\\testes\\api.lua	/^  local a, b = string.gsub("alo alo", "(a)", function (x) return x..'b' end)$/;"	f
b	lua\\testes\\api.lua	/^b = testamem("doing nothing", function () return 10 end)$/;"	f
b	lua\\testes\\api.lua	/^local b = {__lt = function (a,b) return a[1] < b[1] end}$/;"	f
b	lua\\testes\\big.lua	/^local a, b = pcall(rep, longs)   -- call that function$/;"	f
b	lua\\testes\\calls.lua	/^  a, b = (function () return foo() end)()$/;"	f
b	lua\\testes\\closure.lua	/^    b = function (op, y)$/;"	f
b:xxx	lua\\testes\\verybig.lua	/^function b:xxx (a,b) return a+b end$/;"	f
b_str2int	lua\\lbaselib.c	/^static const char *b_str2int (const char *s, int base, lua_Integer *pn) {$/;"	f	typeref:typename:const char *	file:
bad_fn	torch7\\test\\test_Tester.lua	/^local function bad_fn() error("muahaha!") end$/;"	f
badexit	lua\\ltests.c	/^static void badexit (const char *fmt, const char *s) {$/;"	f	typeref:typename:void	file:
bar	lua\\testes\\locals.lua	/^  local function bar ()$/;"	f
base_	dmlc-core\\src\\data\\parser.h	/^  Parser<IndexType> *base_;$/;"	m	class:dmlc::data::ThreadedParser	typeref:typename:Parser<IndexType> *
base_	dmlc-core\\src\\io\\cached_input_split.h	/^  InputSplitBase *base_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:InputSplitBase *
base_	dmlc-core\\src\\io\\threaded_input_split.h	/^  InputSplitBase *base_;$/;"	m	class:dmlc::io::ThreadedInputSplit	typeref:typename:InputSplitBase *
base_ci	lua\\lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State	typeref:typename:CallInfo
base_funcs	lua\\lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
basehookcount	lua\\lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State	typeref:typename:int
batch_size	example\\cifar_resnet.py	/^batch_size = 100$/;"	v
batch_xs	example\\cifar_resnet.py	/^        batch_xs, batch_ys = cifar.train.next_batch(batch_size)$/;"	v
batch_xs	example\\mnist_lenet.py	/^        batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
batch_xs	example\\mnist_mlp_auto_shape_inference.py	/^        batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
batch_xs	example\\mnist_softmax.py	/^    batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
batch_xs	example\\mnist_softmax_minimum.py	/^    batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
batch_ys	example\\cifar_resnet.py	/^        batch_xs, batch_ys = cifar.train.next_batch(batch_size)$/;"	v
batch_ys	example\\mnist_lenet.py	/^        batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
batch_ys	example\\mnist_mlp_auto_shape_inference.py	/^        batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
batch_ys	example\\mnist_softmax.py	/^    batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
batch_ys	example\\mnist_softmax_minimum.py	/^    batch_xs, batch_ys = mnist.train.next_batch(100)$/;"	v
baz	torch7\\test\\test_writeObject.lua	/^       baz = function(a) torch.somefunc() end$/;"	f
beautify	bin\\lua\\cwrap\\cinterface.lua	/^local function beautify(txt)$/;"	f
beautify	cwrap\\cinterface.lua	/^local function beautify(txt)$/;"	f
begin	dmlc-core\\include\\dmlc\\array_view.h	/^  inline const ValueType* begin() const {$/;"	f	class:dmlc::array_view	typeref:typename:const ValueType *
begin	dmlc-core\\src\\config.cc	/^Config::ConfigIterator Config::begin() const {$/;"	f	class:dmlc::Config	typeref:typename:Config::ConfigIterator
begin	dmlc-core\\src\\io\\input_split_base.h	/^    char *begin;$/;"	m	struct:dmlc::io::InputSplitBase::Chunk	typeref:typename:char *
begin	nnvm\\include\\dmlc\\array_view.h	/^  inline const ValueType* begin() const {$/;"	f	class:dmlc::array_view	typeref:typename:const ValueType *
begin	nnvm\\include\\nnvm\\tuple.h	/^  inline ValueType *begin() {$/;"	f	class:nnvm::Tuple	typeref:typename:ValueType *
begin	nnvm\\include\\nnvm\\tuple.h	/^  inline const ValueType *begin() const {$/;"	f	class:nnvm::Tuple	typeref:typename:const ValueType *
begin_	dmlc-core\\include\\dmlc\\array_view.h	/^  const ValueType* begin_{nullptr};$/;"	m	class:dmlc::array_view	typeref:typename:const ValueType *
begin_	dmlc-core\\include\\dmlc\\parameter.h	/^  DType begin_, end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:DType
begin_	nnvm\\include\\dmlc\\array_view.h	/^  const ValueType* begin_{nullptr};$/;"	m	class:dmlc::array_view	typeref:typename:const ValueType *
begin_	nnvm\\include\\dmlc\\parameter.h	/^  DType begin_, end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:DType
bigEndianEncoding()	torch7\\doc\\diskfile.md	/^### bigEndianEncoding() ###$/;"	S
big_endian	torch7\\lib\\TH\\THDiskFile.c	/^      int big_endian = !THDiskFile_isLittleEndianCPU();$/;"	v	typeref:typename:int
binary()	torch7\\doc\\file.md	/^### binary() ###$/;"	S
bindata	lua\\lobject.h	/^  union {LUAI_MAXALIGN;} bindata;$/;"	m	struct:Udata0	typeref:union:Udata0::__anon4faed11c020a
binsearch	lua\\ltable.c	/^static unsigned int binsearch (const TValue *array, unsigned int i,$/;"	f	typeref:typename:unsigned int	file:
bit	bin\\lua\\cwrap\\cinterface.lua	/^local function bit(p)$/;"	f
bit	cwrap\\cinterface.lua	/^local function bit(p)$/;"	f
bit.arshift	lua\\testes\\bitwise.lua	/^function bit.arshift (a, b)$/;"	f
bit.band	lua\\testes\\bitwise.lua	/^function bit.band (x, y, z, ...)$/;"	f
bit.bnot	lua\\testes\\bitwise.lua	/^function bit.bnot (a)$/;"	f
bit.bor	lua\\testes\\bitwise.lua	/^function bit.bor (x, y, z, ...)$/;"	f
bit.btest	lua\\testes\\bitwise.lua	/^function bit.btest (...)$/;"	f
bit.bxor	lua\\testes\\bitwise.lua	/^function bit.bxor (x, y, z, ...)$/;"	f
bit.extract	lua\\testes\\bitwise.lua	/^function bit.extract (a, f, w)$/;"	f
bit.lrotate	lua\\testes\\bitwise.lua	/^function bit.lrotate (a ,b)$/;"	f
bit.lshift	lua\\testes\\bitwise.lua	/^function bit.lshift (a, b)$/;"	f
bit.replace	lua\\testes\\bitwise.lua	/^function bit.replace (a, v, f, w)$/;"	f
bit.rrotate	lua\\testes\\bitwise.lua	/^function bit.rrotate (a, b)$/;"	f
bit.rshift	lua\\testes\\bitwise.lua	/^function bit.rshift (a, b)$/;"	f
bit2mask	lua\\lgc.h	/^#define bit2mask(/;"	d
bitmask	lua\\lgc.h	/^#define bitmask(/;"	d
bl	lua\\lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:BlockCnt *
black2gray	lua\\lgc.c	/^#define black2gray(/;"	d	file:
blackList	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private Collection<String> blackList = new java.util.HashSet();$/;"	f	class:ApplicationMaster	file:
blen	lua\\lobject.c	/^  int blen;  \/* length of partial string in 'space' *\/$/;"	m	struct:BuffFS	typeref:typename:int	file:
blob	src\\session.cc	/^  TBlob blob;$/;"	m	struct:tinyflow::VarState	typeref:typename:TBlob	file:
block	lua\\lparser.c	/^static void block (LexState *ls) {$/;"	f	typeref:typename:void	file:
block_	dmlc-core\\include\\dmlc\\memory.h	/^  RefBlock *block_;$/;"	m	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:RefBlock *
block_	dmlc-core\\src\\data\\parser.h	/^  RowBlock<IndexType> block_;$/;"	m	class:dmlc::data::ParserImpl	typeref:typename:RowBlock<IndexType>
block_	nnvm\\include\\dmlc\\memory.h	/^  RefBlock *block_;$/;"	m	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:RefBlock *
block_follow	lua\\lparser.c	/^static int block_follow (LexState *ls, int withuntil) {$/;"	f	typeref:typename:int	file:
body	dmlc-core\\include\\dmlc\\registry.h	/^  FunctionType body;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:FunctionType
body	lua\\lparser.c	/^static void body (LexState *ls, expdesc *e, int ismethod, int line) {$/;"	f	typeref:typename:void	file:
body	nnvm\\include\\dmlc\\registry.h	/^  FunctionType body;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:FunctionType
boolK	lua\\lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	typeref:typename:int	file:
box	lua\\lauxlib.c	/^  void *box;$/;"	m	struct:UBox	typeref:typename:void *	file:
boxgc	lua\\lauxlib.c	/^static int boxgc (lua_State *L) {$/;"	f	typeref:typename:int	file:
boxmt	lua\\lauxlib.c	/^static const luaL_Reg boxmt[] = {  \/* box metamethods *\/$/;"	v	typeref:typename:const luaL_Reg[]	file:
bracket	torch7\\Tester.lua	/^   local function bracket(str)$/;"	f
breakstat	lua\\lparser.c	/^static void breakstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
breathe_default_project	dmlc-core\\doc\\conf.py	/^breathe_default_project = 'dmlc-core'$/;"	v
breathe_projects	dmlc-core\\doc\\conf.py	/^breathe_projects = {'dmlc-core' : 'doxygen\/xml\/'}$/;"	v
bsize	lua\\lauxlib.c	/^  size_t bsize;$/;"	m	struct:UBox	typeref:typename:size_t	file:
buf	dmlc-core\\src\\config.cc	/^  std::string buf;$/;"	m	struct:dmlc::Token	typeref:typename:std::string	file:
buf_	dmlc-core\\include\\dmlc\\io.h	/^  InBuf buf_;$/;"	m	class:dmlc::istream	typeref:typename:InBuf
buf_	dmlc-core\\include\\dmlc\\io.h	/^  OutBuf buf_;$/;"	m	class:dmlc::ostream	typeref:typename:OutBuf
buff	lua\\lauxlib.c	/^  char buff[BUFSIZ];  \/* area for reading file *\/$/;"	m	struct:LoadF	typeref:typename:char[]	file:
buff	lua\\ldo.c	/^  Mbuffer buff;  \/* dynamic structure used by the scanner *\/$/;"	m	struct:SParser	typeref:typename:Mbuffer	file:
buff	lua\\liolib.c	/^  char buff[L_MAXLENNUM + 1];  \/* +1 for ending '\\0' *\/$/;"	m	struct:__anona099834f0108	typeref:typename:char[]	file:
buff	lua\\llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState	typeref:typename:Mbuffer *
buff	lua\\lstrlib.c	/^  char buff[5 * sizeof(lua_Number)];  \/* enough for any float type *\/$/;"	m	union:Ftypes	typeref:typename:char[]	file:
buffer	lua\\lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer	typeref:typename:char *
buffer	torch7\\lib\\TH\\THDiskFile.c	/^      int32_t *buffer = THAlloc(8*n);$/;"	v	typeref:typename:int32_t *
buffer_	dmlc-core\\include\\dmlc\\io.h	/^    std::vector<char> buffer_;$/;"	m	class:dmlc::istream::InBuf	typeref:typename:std::vector<char>
buffer_	dmlc-core\\include\\dmlc\\io.h	/^    std::vector<char> buffer_;$/;"	m	class:dmlc::ostream::OutBuf	typeref:typename:std::vector<char>
buffer_	dmlc-core\\include\\dmlc\\logging.h	/^  char buffer_[9];$/;"	m	class:dmlc::DateLogger	typeref:typename:char[9]
buffer_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string buffer_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:std::string	file:
buffer_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string buffer_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:std::string	file:
buffer_	dmlc-core\\src\\io\\single_file_split.h	/^  std::string buffer_;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:std::string
buffer_	nnvm\\include\\dmlc\\logging.h	/^  char buffer_[9];$/;"	m	class:dmlc::DateLogger	typeref:typename:char[9]
buffer_size_	dmlc-core\\include\\dmlc\\memory_io.h	/^  size_t buffer_size_;$/;"	m	struct:dmlc::MemoryFixedSizeStream	typeref:typename:size_t
buffer_size_	dmlc-core\\src\\io\\cached_input_split.h	/^  size_t buffer_size_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:size_t
buffer_size_	dmlc-core\\src\\io\\input_split_base.h	/^  size_t buffer_size_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:size_t
buffer_size_	dmlc-core\\src\\io\\single_file_split.h	/^  size_t buffer_size_;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:size_t
buffer_size_	dmlc-core\\src\\io\\threaded_input_split.h	/^  size_t buffer_size_;$/;"	m	class:dmlc::io::ThreadedInputSplit	typeref:typename:size_t
buffonstack	lua\\lauxlib.c	/^#define buffonstack(/;"	d	file:
buffsize	lua\\lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer	typeref:typename:size_t
build/plugin/%.o	nnvm\\Makefile	/^build\/plugin\/%.o: plugin\/%.cc$/;"	t
build/src/%.o	Makefile	/^build\/src\/%.o: src\/%.cc$/;"	t
build/src/%.o	nnvm\\Makefile	/^build\/src\/%.o: src\/%.cc$/;"	t
build/src/%_gpu.o	Makefile	/^build\/src\/%_gpu.o: src\/%.cu$/;"	t
buildop	lua\\ltests.c	/^static char *buildop (Proto *p, int pc, char *buff) {$/;"	f	typeref:typename:char *	file:
bvalue	lua\\lobject.h	/^#define bvalue(/;"	d
bvalueraw	lua\\lobject.h	/^#define bvalueraw(/;"	d
byteoffset	lua\\lutf8lib.c	/^static int byteoffset (lua_State *L) {$/;"	f	typeref:typename:int	file:
bytes_out	dmlc-core\\include\\dmlc\\io.h	/^    inline size_t bytes_out() const { return bytes_out_; }$/;"	f	class:dmlc::ostream::OutBuf	typeref:typename:size_t
bytes_out_	dmlc-core\\include\\dmlc\\io.h	/^    size_t bytes_out_;$/;"	m	class:dmlc::ostream::OutBuf	typeref:typename:size_t
bytes_read	dmlc-core\\include\\dmlc\\io.h	/^    inline size_t bytes_read(void) const {$/;"	f	class:dmlc::istream::InBuf	typeref:typename:size_t
bytes_read	dmlc-core\\include\\dmlc\\io.h	/^  inline size_t bytes_read(void) const {$/;"	f	class:dmlc::istream	typeref:typename:size_t
bytes_read_	dmlc-core\\include\\dmlc\\io.h	/^    size_t bytes_read_;$/;"	m	class:dmlc::istream::InBuf	typeref:typename:size_t
bytes_read_	dmlc-core\\src\\data\\text_parser.h	/^  size_t bytes_read_;$/;"	m	class:dmlc::data::TextParserBase	typeref:typename:size_t
bytes_written	dmlc-core\\include\\dmlc\\io.h	/^  inline size_t bytes_written(void) const {$/;"	f	class:dmlc::ostream	typeref:typename:size_t
c	lua\\liolib.c	/^  int c;  \/* current character (look ahead) *\/$/;"	m	struct:__anona099834f0108	typeref:typename:int	file:
c	lua\\lobject.h	/^  CClosure c;$/;"	m	union:Closure	typeref:typename:CClosure
c	lua\\lstate.h	/^    } c;$/;"	m	union:CallInfo::__anonad48b566010a	typeref:struct:CallInfo::__anonad48b566010a::__anonad48b5660308
c	lua\\lstrlib.c	/^  char c;$/;"	m	struct:cD	typeref:typename:char	file:
c	lua\\testes\\calls.lua	/^  local c = string.dump(function () local a = 1; local b = 3; return a+b*3 end)$/;"	f
c	lua\\testes\\coroutine.lua	/^    c = coroutine.create(function (a, ...)$/;"	f
c	lua\\testes\\coroutine.lua	/^    local c = coroutine.create(function () T.testC("yield 1", 10, 20) end)$/;"	f
c	lua\\testes\\errors.lua	/^a, b, c = xpcall(string.find, function (x) return {} end, true, "al")$/;"	f
c	torch7\\lib\\TH\\THDiskFile.c	/^      int c = fgetc(dfself->handle);$/;"	v	typeref:typename:int
c12	lua\\testes\\vararg.lua	/^function c12 (...)$/;"	f
cD	lua\\lstrlib.c	/^struct cD {$/;"	s	file:
c_array	nnvm\\python\\nnvm\\_base.py	/^def c_array(ctype, values):$/;"	f
c_str	nnvm\\python\\nnvm\\_base.py	/^def c_str(string):$/;"	f
cacheFileArg	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private String cacheFileArg = "";$/;"	f	class:Client	file:
cacheFiles	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private Map<String, String> cacheFiles = new java.util.HashMap<String, String>();$/;"	f	class:Client	file:
cache_file	dmlc-core\\src\\io\\uri_spec.h	/^  std::string cache_file;$/;"	m	class:dmlc::io::URISpec	typeref:typename:std::string
cache_file_	dmlc-core\\src\\data\\disk_row_iter.h	/^  std::string cache_file_;$/;"	m	class:dmlc::data::DiskRowIter	typeref:typename:std::string
cache_file_	dmlc-core\\src\\io\\cached_input_split.h	/^  std::string cache_file_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:std::string
cached_execs_	src\\session.cc	/^  std::unordered_map<uint64_t, ExecEntry> cached_execs_;$/;"	m	class:tinyflow::TorchSession	typeref:typename:std::unordered_map<uint64_t,ExecEntry>	file:
cached_symbol	src\\session.cc	/^    nnvm::Symbol cached_symbol;$/;"	m	struct:tinyflow::TorchSession::ExecEntry	typeref:typename:nnvm::Symbol	file:
cadd_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(cadd_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
call	lua\\testes\\vararg.lua	/^local call = function (f, args) return f(table.unpack(args, 1, args.n)) end$/;"	f
callallpendingfinalizers	lua\\lgc.c	/^static void callallpendingfinalizers (lua_State *L) {$/;"	f	typeref:typename:void	file:
callbinTM	lua\\ltm.c	/^static int callbinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:int	file:
callclose	lua\\lfunc.c	/^static void callclose (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
callclosemth	lua\\lfunc.c	/^static int callclosemth (lua_State *L, TValue *uv, StkId level, int status) {$/;"	f	typeref:typename:int	file:
callee_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  std::string callee_;$/;"	m	class:nnvm::fusion::CallAST	typeref:typename:std::string
callpfs	lua\\testes\\strings.lua	/^  local function callpfs (op, fmt, n)$/;"	f
callstatus	lua\\lstate.h	/^  unsigned short callstatus;$/;"	m	struct:CallInfo	typeref:typename:unsigned short
cannotload	lua\\testes\\calls.lua	/^function cannotload (msg, a,b)$/;"	f
canonicalize	torch7\\test\\test_qr.lua	/^  local function canonicalize(q, r)$/;"	f
capture	lua\\lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon7d7958700108[]	file:
capture_to_close	lua\\lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	typeref:typename:int	file:
carg	bin\\lua\\cwrap\\types.lua	/^      carg = function(arg)$/;"	f
carg	bin\\lua\\cwrap\\types.lua	/^   carg = function(arg)$/;"	f
carg	cwrap\\types.lua	/^      carg = function(arg)$/;"	f
carg	cwrap\\types.lua	/^   carg = function(arg)$/;"	f
carg	torch7\\torchcwrap.lua	/^      carg = function(arg)$/;"	f
carg	torch7\\torchcwrap.lua	/^   carg = function(arg)$/;"	f
carg	torch7\\torchcwrap.lua	/^   carg = function(arg, idx)$/;"	f
carg	torch7\\torchcwrap.lua	/^  carg = function(arg)$/;"	f
carg(arg)	cwrap\\doc\\usertypes.md	/^### carg(arg) ###$/;"	S
cast	lua\\llimits.h	/^#define cast(/;"	d
cast_byte	lua\\llimits.h	/^#define cast_byte(/;"	d
cast_char	lua\\llimits.h	/^#define cast_char(/;"	d
cast_charp	lua\\llimits.h	/^#define cast_charp(/;"	d
cast_func	lua\\loadlib.c	/^#define cast_func(/;"	d	file:
cast_int	lua\\llimits.h	/^#define cast_int(/;"	d
cast_num	lua\\llimits.h	/^#define cast_num(/;"	d
cast_sizet	lua\\llimits.h	/^#define cast_sizet(/;"	d
cast_u	lua\\lstate.h	/^#define cast_u(/;"	d
cast_uchar	lua\\llimits.h	/^#define cast_uchar(/;"	d
cast_uint	lua\\llimits.h	/^#define cast_uint(/;"	d
cast_void	lua\\llimits.h	/^#define cast_void(/;"	d
cast_voidp	lua\\llimits.h	/^#define cast_voidp(/;"	d
cdatamt	torch7\\lib\\luaT\\luaT.c	/^static const char cdatamt[] = ""$/;"	v	typeref:typename:const char[]	file:
cdataname	torch7\\lib\\luaT\\luaT.c	/^static const char cdataname[] = ""$/;"	v	typeref:typename:const char[]	file:
cdiv_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(cdiv_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
cend_	dmlc-core\\src\\io\\s3_filesys.cc	/^  const char *cend_;$/;"	m	struct:dmlc::io::s3::XMLIter	typeref:typename:const char *	file:
change_graph	nnvm\\include\\nnvm\\pass.h	/^  bool change_graph{false};$/;"	m	struct:nnvm::PassFunctionReg	typeref:typename:bool
changeage	lua\\lgc.h	/^#define changeage(/;"	d
changedline	lua\\ldebug.c	/^static int changedline (const Proto *p, int oldpc, int newpc) {$/;"	f	typeref:typename:int	file:
changes	dmlc-core\\doc\\Makefile	/^changes:$/;"	t
changewhite	lua\\lgc.h	/^#define changewhite(/;"	d
check	bin\\lua\\cwrap\\types.lua	/^      check = function(arg, idx)$/;"	f
check	bin\\lua\\cwrap\\types.lua	/^   check = function(arg, idx)$/;"	f
check	cwrap\\types.lua	/^      check = function(arg, idx)$/;"	f
check	cwrap\\types.lua	/^   check = function(arg, idx)$/;"	f
check	lua\\lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
check	lua\\testes\\api.lua	/^  local function check (n)$/;"	f
check	lua\\testes\\code.lua	/^function check (f, ...)$/;"	f
check	lua\\testes\\nextvar.lua	/^local function check (t, na, nh)$/;"	f
check	lua\\testes\\sort.lua	/^function check (a, f)$/;"	f
check	lua\\testes\\sort.lua	/^local function check (t)$/;"	f
check	lua\\testes\\strings.lua	/^local function check (fmt, msg)$/;"	f
check	lua\\testes\\utf8.lua	/^  local function check (s, p)$/;"	f
check	lua\\testes\\utf8.lua	/^local function check (s, t, nonstrict)$/;"	f
check	torch7\\Tester.lua	/^local check = {} -- helper functions, defined at the bottom of the file$/;"	f
check	torch7\\torchcwrap.lua	/^      check = function(arg, idx)$/;"	f
check	torch7\\torchcwrap.lua	/^   check = function(arg, idx)$/;"	f
check	torch7\\torchcwrap.lua	/^  check = function(arg, idx)$/;"	f
check(arg, idx)	cwrap\\doc\\usertypes.md	/^### check(arg, idx) ###$/;"	S
check.areEq	torch7\\Tester.lua	/^function check.areEq(got, expected, tolerance, negate)$/;"	f
check.areSameFormatTensorsEq	torch7\\Tester.lua	/^function check.areSameFormatTensorsEq(ta, tb, tolerance, negate, storage)$/;"	f
check.areStoragesEq	torch7\\Tester.lua	/^function check.areStoragesEq(sa, sb, tolerance, negate)$/;"	f
check.areTablesEq	torch7\\Tester.lua	/^function check.areTablesEq(t1, t2, tolerance, negate)$/;"	f
check.areTensorsEq	torch7\\Tester.lua	/^function check.areTensorsEq(ta, tb, tolerance, negate, ignoreTensorDims)$/;"	f
check3	lua\\testes\\api.lua	/^function check3(p, ...)$/;"	f
checkArgument	torch7\\FFInterface.lua	/^local function checkArgument(condition, fn, ud, msg, level)$/;"	f
checkArgumentType	torch7\\FFInterface.lua	/^local function checkArgumentType(expected, actual, fn, ud, level)$/;"	f
checkCPUFeatures	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^static unsigned int checkCPUFeatures() {$/;"	f	typeref:typename:unsigned int	file:
checkCclosure	lua\\ltests.c	/^static void checkCclosure (global_State *g, CClosure *cl) {$/;"	f	typeref:typename:void	file:
checkF	lua\\testes\\code.lua	/^local function checkF (func, val)$/;"	f
checkGC	lua\\lvm.c	/^#define checkGC(/;"	d	file:
checkHeader	lua\\lundump.c	/^static void checkHeader (LoadState *S) {$/;"	f	typeref:typename:void	file:
checkI	lua\\testes\\code.lua	/^local function checkI (func, val)$/;"	f
checkK	lua\\testes\\code.lua	/^local function checkK (func, val)$/;"	f
checkKlist	lua\\testes\\code.lua	/^local function checkKlist (func, list)$/;"	f
checkLclosure	lua\\ltests.c	/^static void checkLclosure (global_State *g, LClosure *cl) {$/;"	f	typeref:typename:void	file:
checkPartialAssign	torch7\\test\\test.lua	/^    local function checkPartialAssign(index)$/;"	f
checkPsdCholesky	torch7\\test\\test.lua	/^  local function checkPsdCholesky(a, uplo, inplace)$/;"	f
checkQ	lua\\testes\\strings.lua	/^  local function checkQ (v)$/;"	f
checkQM	torch7\\test\\test_qr.lua	/^local function checkQM(testOpts, mat1, mat2)$/;"	f
checkQR	torch7\\test\\test_qr.lua	/^local function checkQR(testOpts, a, q, r)$/;"	f
checkQRWithExpected	torch7\\test\\test_qr.lua	/^local function checkQRWithExpected(testOpts, a, expected_q, expected_r)$/;"	f
checkR	lua\\testes\\code.lua	/^function checkR (f, p, r, ...)$/;"	f
checkSizes	lua\\lgc.c	/^static void checkSizes (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
check_call	nnvm\\python\\nnvm\\_base.py	/^def check_call(ret):$/;"	f
check_capture	lua\\lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	typeref:typename:int	file:
check_condition	lua\\lparser.c	/^#define check_condition(/;"	d	file:
check_conflict	lua\\lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	typeref:typename:void	file:
check_ewise	tests\\python\\test_ops.py	/^def check_ewise(ufunc):$/;"	f
check_ewise_rscalar	tests\\python\\test_ops.py	/^def check_ewise_rscalar(ufunc):$/;"	f
check_ewise_scalar	tests\\python\\test_ops.py	/^def check_ewise_scalar(ufunc):$/;"	f
check_exp	lua\\llimits.h	/^#define check_exp(/;"	d
check_match	lua\\lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	typeref:typename:void	file:
check_next1	lua\\llex.c	/^static int check_next1 (LexState *ls, int c) {$/;"	f	typeref:typename:int	file:
check_next2	lua\\llex.c	/^static int check_next2 (LexState *ls, const char *set) {$/;"	f	typeref:typename:int	file:
check_readonly	lua\\lparser.c	/^static void check_readonly (LexState *ls, expdesc *e) {$/;"	f	typeref:typename:void	file:
check_type	dmlc-core\\include\\dmlc\\any.h	/^inline void any::check_type() const {$/;"	f	class:dmlc::any	typeref:typename:void
check_type	nnvm\\include\\dmlc\\any.h	/^inline void any::check_type() const {$/;"	f	class:dmlc::any	typeref:typename:void
checkargs	lua\\testes\\bwcoercion.lua	/^local function checkargs (x, y, mtname)$/;"	f
checkcap	lua\\testes\\events.lua	/^local function checkcap (t)$/;"	f
checkclib	lua\\loadlib.c	/^static void *checkclib (lua_State *L, const char *path) {$/;"	f	typeref:typename:void *	file:
checkcompt	lua\\testes\\math.lua	/^local function checkcompt (msg, code)$/;"	f
checkconsistency	lua\\lgc.c	/^#define checkconsistency(/;"	d	file:
checkdeep	lua\\testes\\db.lua	/^  local function checkdeep (total, start)$/;"	f
checkequal	lua\\testes\\code.lua	/^function checkequal (a, b)$/;"	f
checkerr	lua\\testes\\api.lua	/^local function checkerr (msg, f, ...)$/;"	f
checkerr	lua\\testes\\errors.lua	/^local function checkerr (msg, f, ...)$/;"	f
checkerr	lua\\testes\\files.lua	/^local function checkerr (msg, f, ...)$/;"	f
checkerrnopro	lua\\testes\\api.lua	/^function checkerrnopro (code, msg)$/;"	f
checkerror	lua\\testes\\cstack.lua	/^local function checkerror (msg, f, ...)$/;"	f
checkerror	lua\\testes\\math.lua	/^local function checkerror (msg, f, ...)$/;"	f
checkerror	lua\\testes\\nextvar.lua	/^local function checkerror (msg, f, ...)$/;"	f
checkerror	lua\\testes\\pm.lua	/^local function checkerror (msg, f, ...)$/;"	f
checkerror	lua\\testes\\sort.lua	/^local function checkerror (msg, f, ...)$/;"	f
checkerror	lua\\testes\\strings.lua	/^local function checkerror (msg, f, ...)$/;"	f
checkerror	lua\\testes\\tpack.lua	/^function checkerror (msg, f, ...)$/;"	f
checkerror	lua\\testes\\utf8.lua	/^local function checkerror (msg, f, ...)$/;"	f
checkfield	lua\\ltablib.c	/^static int checkfield (lua_State *L, const char *key, int n) {$/;"	f	typeref:typename:int	file:
checkfield	lua\\testes\\bitwise.lua	/^local function checkfield (f, w)$/;"	f
checkfinalmem	lua\\ltests.c	/^static void checkfinalmem (void) {$/;"	f	typeref:typename:void	file:
checkfloat	lua\\testes\\nextvar.lua	/^  local function checkfloat (i)$/;"	f
checkfor	lua\\testes\\nextvar.lua	/^  local function checkfor (from, to, step, t)$/;"	f
checkgraylist	lua\\ltests.c	/^static void checkgraylist (global_State *g, GCObject *o) {$/;"	f	typeref:typename:void	file:
checkgrays	lua\\ltests.c	/^static void checkgrays (global_State *g) {$/;"	f	typeref:typename:void	file:
checkint	lua\\testes\\nextvar.lua	/^  local function checkint (i)$/;"	f
checklimit	lua\\lparser.c	/^static void checklimit (FuncState *fs, int v, int l, const char *what) {$/;"	f	typeref:typename:void	file:
checklist	lua\\ltests.c	/^static void checklist (global_State *g, int maybedead, int tof,$/;"	f	typeref:typename:void	file:
checkliteral	lua\\lundump.c	/^static void checkliteral (LoadState *S, const char *s, const char *msg) {$/;"	f	typeref:typename:void	file:
checkliveness	lua\\lobject.h	/^#define checkliveness(/;"	d
checkload	lua\\loadlib.c	/^static int checkload (lua_State *L, int stat, const char *filename) {$/;"	f	typeref:typename:int	file:
checkload	lua\\testes\\constructs.lua	/^local function checkload (s, msg)$/;"	f
checkmessage	lua\\testes\\errors.lua	/^local function checkmessage (prog, msg)$/;"	f
checkmode	lua\\ldo.c	/^static void checkmode (lua_State *L, const char *mode, const char *x) {$/;"	f	typeref:typename:void	file:
checkmove	lua\\testes\\sort.lua	/^  local function checkmove (f, e, t, x, y)$/;"	f
checknext	lua\\lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
checknext	lua\\testes\\nextvar.lua	/^local function checknext (a)$/;"	f
checkobject	lua\\ltests.c	/^static void checkobject (global_State *g, GCObject *o, int maybedead,$/;"	f	typeref:typename:void	file:
checkobjref	lua\\ltests.c	/^#define checkobjref(/;"	d	file:
checkopm	lua\\lopcodes.h	/^#define checkopm(/;"	d
checkoption	lua\\loslib.c	/^static const char *checkoption (lua_State *L, const char *conv,$/;"	f	typeref:typename:const char *	file:
checkout	lua\\testes\\main.lua	/^local function checkout (s)$/;"	f
checkpanic	lua\\ltests.c	/^static int checkpanic (lua_State *L) {$/;"	f	typeref:typename:int	file:
checkprogout	lua\\testes\\main.lua	/^local function checkprogout (s)$/;"	f
checkproto	lua\\ltests.c	/^static void checkproto (global_State *g, Proto *f) {$/;"	f	typeref:typename:void	file:
checkrefs	lua\\ltests.c	/^static void checkrefs (global_State *g, GCObject *o) {$/;"	f	typeref:typename:void	file:
checkrepeated	lua\\lparser.c	/^static void checkrepeated (LexState *ls, TString *name) {$/;"	f	typeref:typename:void	file:
checkresults	lua\\lapi.c	/^#define checkresults(/;"	d	file:
checksize	lua\\lundump.c	/^#define checksize(/;"	d	file:
checksize	lua\\testes\\errors.lua	/^local function checksize (source)$/;"	f
checkstack	lua\\ldblib.c	/^static void checkstack (lua_State *L, lua_State *L1, int n) {$/;"	f	typeref:typename:void	file:
checkstack	lua\\ltests.c	/^static void checkstack (global_State *g, lua_State *L1) {$/;"	f	typeref:typename:void	file:
checkstackGC	lua\\ldo.h	/^#define checkstackGC(/;"	d
checkstackmessage	lua\\testes\\errors.lua	/^  local function checkstackmessage (m)$/;"	f
checkstackp	lua\\ldo.h	/^#define checkstackp(/;"	d
checksyntax	lua\\testes\\errors.lua	/^local function checksyntax (prog, extra, token, line)$/;"	f
checksyntax	lua\\testes\\utf8.lua	/^local function checksyntax (s, t)$/;"	f
checktab	lua\\ltablib.c	/^static void checktab (lua_State *L, int arg, int what) {$/;"	f	typeref:typename:void	file:
checktable	lua\\ltests.c	/^static void checktable (global_State *g, Table *h) {$/;"	f	typeref:typename:void	file:
checktag	lua\\lobject.h	/^#define checktag(/;"	d
checktraceback	lua\\testes\\db.lua	/^local function checktraceback (co, p, level)$/;"	f
checktype	lua\\lobject.h	/^#define checktype(/;"	d
checkudata	lua\\ltests.c	/^static void checkudata (global_State *g, Udata *u) {$/;"	f	typeref:typename:void	file:
checkupval	lua\\ldblib.c	/^static int checkupval (lua_State *L, int argf, int argnup) {$/;"	f	typeref:typename:int	file:
checkvalref	lua\\ltests.c	/^static void checkvalref (global_State *g, GCObject *f, const TValue *t) {$/;"	f	typeref:typename:void	file:
chgfltvalue	lua\\lobject.h	/^#define chgfltvalue(/;"	d
chgivalue	lua\\lobject.h	/^#define chgivalue(/;"	d
choosePivot	lua\\ltablib.c	/^static IdxT choosePivot (IdxT lo, IdxT up, unsigned int rnd) {$/;"	f	typeref:typename:IdxT	file:
chunk_begin_	dmlc-core\\src\\io\\single_file_split.h	/^  char *chunk_begin_;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:char *
chunk_end_	dmlc-core\\src\\io\\single_file_split.h	/^  char *chunk_end_;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:char *
ci	lua\\lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State	typeref:typename:CallInfo *
ci_func	lua\\ldebug.c	/^#define ci_func(/;"	d	file:
cifar	example\\cifar_resnet.py	/^cifar = get_cifar10()$/;"	v
cl	lua\\lstate.h	/^  union Closure cl;$/;"	m	union:GCUnion	typeref:union:Closure
clCvalue	lua\\lobject.h	/^#define clCvalue(/;"	d
clLvalue	lua\\lobject.h	/^#define clLvalue(/;"	d
classend	lua\\lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	typeref:typename:const char *	file:
clean	Makefile	/^clean:$/;"	t
clean	dmlc-core\\Makefile	/^clean:$/;"	t
clean	dmlc-core\\doc\\Makefile	/^clean:$/;"	t
clean	lua\\makefile	/^clean:$/;"	t
clean	nnvm\\Makefile	/^clean:$/;"	t
clear	dmlc-core\\include\\dmlc\\any.h	/^inline void any::clear() {$/;"	f	class:dmlc::any	typeref:typename:void
clear	nnvm\\include\\dmlc\\any.h	/^inline void any::clear() {$/;"	f	class:dmlc::any	typeref:typename:void
clearError()	torch7\\doc\\file.md	/^### clearError() ###$/;"	S
clearbuff	lua\\lobject.c	/^static void clearbuff (BuffFS *buff) {$/;"	f	typeref:typename:void	file:
clearbykeys	lua\\lgc.c	/^static void clearbykeys (global_State *g, GCObject *l) {$/;"	f	typeref:typename:void	file:
clearbyvalues	lua\\lgc.c	/^static void clearbyvalues (global_State *g, GCObject *l, GCObject *f) {$/;"	f	typeref:typename:void	file:
clearhistory()	cwrap\\doc\\highlevelinterface.md	/^### clearhistory() ###$/;"	S
clearkey	lua\\lgc.c	/^static void clearkey (Node *n) {$/;"	f	typeref:typename:void	file:
clone	torch7\\test\\test_writeObject.lua	/^   local ok, clone = pcall(function() file2:seek(1) return file2:readObject()  end)$/;"	f
close	lua\\lparser.h	/^  lu_byte close;  \/* goto that escapes upvalues *\/$/;"	m	struct:Labeldesc	typeref:typename:lu_byte
close	lua\\testes\\api.lua	/^  function close (b)$/;"	f
close	lua\\testes\\locals.lua	/^  close = setmetatable({}, {__close = function ()$/;"	f
close	lua\\testes\\locals.lua	/^  local close = func2close(function (self, msg)$/;"	f
close	torch7\\lib\\TH\\THFilePrivate.h	/^    void (*close)(THFile *self);$/;"	m	struct:THFileVTable	typeref:typename:void (*)(THFile * self)
close()	torch7\\doc\\file.md	/^### close() ###$/;"	S
close_func	lua\\lparser.c	/^static void close_func (LexState *ls) {$/;"	f	typeref:typename:void	file:
close_state	lua\\lstate.c	/^static void close_state (lua_State *L) {$/;"	f	typeref:typename:void	file:
closed_	dmlc-core\\src\\io\\s3_filesys.cc	/^  bool closed_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:bool	file:
closef	lua\\lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream	typeref:typename:lua_CFunction
closelistfield	lua\\lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
closescope	lua\\testes\\locals.lua	/^  local closescope = func2close(function () stack(10); X = true end)$/;"	f
closestate	lua\\ltests.c	/^static int closestate (lua_State *L) {$/;"	f	typeref:typename:int	file:
closure	torch7\\test\\test_writeObject.lua	/^  local function closure()$/;"	f
closure	torch7\\test\\test_writeObject.lua	/^  local function closure(str)$/;"	f
clvalue	lua\\lobject.h	/^#define clvalue(/;"	d
cmul_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(cmul_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
cname	torch7\\TensorMath.lua	/^   local function cname(name)$/;"	f
co	lua\\testes\\coroutine.lua	/^    co = coroutine.create(function()$/;"	f
co	lua\\testes\\coroutine.lua	/^  co = coroutine.create(function ()$/;"	f
co	lua\\testes\\coroutine.lua	/^  co = coroutine.create(function()$/;"	f
co	lua\\testes\\coroutine.lua	/^  co = coroutine.wrap(function ()$/;"	f
co	lua\\testes\\coroutine.lua	/^  local co = coroutine.create(function ()$/;"	f
co	lua\\testes\\coroutine.lua	/^  local co = coroutine.wrap(function ()$/;"	f
co	lua\\testes\\coroutine.lua	/^  local co = coroutine.wrap(function (c)$/;"	f
co	lua\\testes\\coroutine.lua	/^co = coroutine.wrap(function () return f(nil) end)$/;"	f
co	lua\\testes\\coroutine.lua	/^co = coroutine.wrap(function ()$/;"	f
co	lua\\testes\\coroutine.lua	/^co = coroutine.wrap(function (...) return$/;"	f
co	lua\\testes\\coroutine.lua	/^co = coroutine.wrap(function()$/;"	f
co	lua\\testes\\coroutine.lua	/^local co = coroutine.wrap(function ()$/;"	f
co	lua\\testes\\db.lua	/^co = coroutine.create(function (x) f(x) end)$/;"	f
co	lua\\testes\\db.lua	/^co = coroutine.create(function (x)$/;"	f
co	lua\\testes\\locals.lua	/^  co = coroutine.wrap(function ()$/;"	f
co	lua\\testes\\locals.lua	/^  local co = coroutine.wrap(function ()$/;"	f
co	lua\\testes\\locals.lua	/^co = coroutine.wrap(function()$/;"	f
co1	lua\\testes\\coroutine.lua	/^co1 = coroutine.create(function () return co2() end)$/;"	f
co2	lua\\testes\\coroutine.lua	/^co2 = coroutine.wrap(function ()$/;"	f
co_func	lua\\testes\\coroutine.lua	/^function co_func (current_co)$/;"	f
co_funcs	lua\\lcorolib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
code	lua\\lobject.h	/^  Instruction *code;  \/* opcodes *\/$/;"	m	struct:Proto	typeref:typename:Instruction *
codeABRK	lua\\lcode.c	/^static void codeABRK (FuncState *fs, OpCode o, int a, int b,$/;"	f	typeref:typename:void	file:
codeNresults	lua\\lapi.h	/^#define codeNresults(/;"	d
code_loadbool	lua\\lcode.c	/^static int code_loadbool (FuncState *fs, int A, int b, int jump) {$/;"	f	typeref:typename:int	file:
codearith	lua\\lcode.c	/^static void codearith (FuncState *fs, OpCode op,$/;"	f	typeref:typename:void	file:
codebinexpval	lua\\lcode.c	/^static void codebinexpval (FuncState *fs, OpCode op,$/;"	f	typeref:typename:void	file:
codebini	lua\\lcode.c	/^static void codebini (FuncState *fs, OpCode op,$/;"	f	typeref:typename:void	file:
codebitwise	lua\\lcode.c	/^static void codebitwise (FuncState *fs, BinOpr opr,$/;"	f	typeref:typename:void	file:
codeclosure	lua\\lparser.c	/^static void codeclosure (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
codecommutative	lua\\lcode.c	/^static void codecommutative (FuncState *fs, OpCode op,$/;"	f	typeref:typename:void	file:
codeconcat	lua\\lcode.c	/^static void codeconcat (FuncState *fs, expdesc *e1, expdesc *e2, int line) {$/;"	f	typeref:typename:void	file:
codeeq	lua\\lcode.c	/^static void codeeq (FuncState *fs, BinOpr opr, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void	file:
codeextraarg	lua\\lcode.c	/^static int codeextraarg (FuncState *fs, int a) {$/;"	f	typeref:typename:int	file:
codename	lua\\lparser.c	/^static void codename (LexState *ls, expdesc *e) {$/;"	f	typeref:typename:void	file:
codenot	lua\\lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
codeorder	lua\\lcode.c	/^static void codeorder (FuncState *fs, OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void	file:
codepoint	lua\\lutf8lib.c	/^static int codepoint (lua_State *L) {$/;"	f	typeref:typename:int	file:
codesJ	lua\\lcode.c	/^static int codesJ (FuncState *fs, OpCode o, int sj, int k) {$/;"	f	typeref:typename:int	file:
codeshift	lua\\lcode.c	/^static void codeshift (FuncState *fs, OpCode op,$/;"	f	typeref:typename:void	file:
codestring	lua\\lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	typeref:typename:void	file:
codeunexpval	lua\\lcode.c	/^static void codeunexpval (FuncState *fs, OpCode op, expdesc *e, int line) {$/;"	f	typeref:typename:void	file:
collectargs	lua\\lua.c	/^static int collectargs (char **argv, int *first) {$/;"	f	typeref:typename:int	file:
collectlocals	lua\\testes\\db.lua	/^local function collectlocals (level)$/;"	f
collectvalidlines	lua\\ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	typeref:typename:void	file:
coloured	torch7\\Tester.lua	/^   coloured = function(str)$/;"	f
coloured	torch7\\Tester.lua	/^   coloured = function(str, colour)$/;"	f
command	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private String command = "";$/;"	f	class:ApplicationMaster	file:
commonlocalstat	lua\\lparser.c	/^static void commonlocalstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
compare	torch7\\test\\test.lua	/^   local function compare(t, k, dim, dir, msg)$/;"	f
compareTensors	torch7\\test\\test.lua	/^   local function compareTensors(t, res1, ind1, res2, ind2, dim, msg)$/;"	f
compile	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^char* RTC::compile(const std::string& name, const std::string& code) {$/;"	f	class:nnvm::fusion::RTC	typeref:typename:char *
computesizes	lua\\ltable.c	/^static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {$/;"	f	typeref:typename:unsigned int	file:
cond	lua\\lparser.c	/^static int cond (LexState *ls) {$/;"	f	typeref:typename:int	file:
condchangemem	lua\\llimits.h	/^#define condchangemem(/;"	d
condjump	lua\\lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C, int k) {$/;"	f	typeref:typename:int	file:
condmovestack	lua\\llimits.h	/^#define condmovestack(/;"	d
conf	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private Configuration conf = new YarnConfiguration();$/;"	f	class:ApplicationMaster	file:
conf	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private YarnConfiguration conf = new YarnConfiguration();$/;"	f	class:Client	file:
config	dmlc-core\\Makefile	/^		config = config.mk$/;"	m
config	dmlc-core\\Makefile	/^		config = make\/config.mk$/;"	m
config	nnvm\\Makefile	/^	config = config.mk$/;"	m
config	nnvm\\Makefile	/^	config = make\/config.mk$/;"	m
config.o	dmlc-core\\Makefile	/^config.o: src\/config.cc$/;"	t
config_	dmlc-core\\include\\dmlc\\config.h	/^    const Config* config_;$/;"	m	class:dmlc::Config::ConfigIterator	typeref:typename:const Config *
config_cython	nnvm\\python\\setup.py	/^def config_cython():$/;"	f
config_logger	dmlc-core\\tracker\\dmlc_tracker\\submit.py	/^def config_logger(args):$/;"	f
config_map_	dmlc-core\\include\\dmlc\\config.h	/^  std::map<std::string, ConfigValue> config_map_;$/;"	m	class:dmlc::Config	typeref:typename:std::map<std::string,ConfigValue>
consecutive	torch7\\test\\test.lua	/^local function consecutive(size, start)$/;"	f
const	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define const$/;"	d	file:
const char *luaT_classrootname(const char *tname)	torch7\\lib\\luaT\\README.md	/^### const char *luaT_classrootname(const char *tname) ###$/;"	S
const char* luaT_getfieldcheckstring(lua_State *L, int ud, const char *field)	torch7\\lib\\luaT\\README.md	/^## const char* luaT_getfieldcheckstring(lua_State *L, int ud, const char *field) ##$/;"	s
const char* luaT_newlocalmetatable(lua_State *L, const char *tname, const char *parenttname, lua_CFunction constructor, lua_CFunction destructor, lua_CFunction factory, int moduleidx)	torch7\\lib\\luaT\\README.md	/^### const char* luaT_newlocalmetatable(lua_State *L, const char *tname, const char *parenttname,/;"	S
const char* luaT_newmetatable(lua_State *L, const char *tname, const char *parenttname, lua_CFunction constructor, lua_CFunction destructor, lua_CFunction factory)	torch7\\lib\\luaT\\README.md	/^### const char* luaT_newmetatable(lua_State *L, const char *tname, const char *parenttname, lua_/;"	S
const char* luaT_typename(lua_State *L, int ud)	torch7\\lib\\luaT\\README.md	/^### const char* luaT_typename(lua_State *L, int ud) ###$/;"	S
const char* luaT_typenameid(lua_State *L, const char *tname)	torch7\\lib\\luaT\\README.md	/^### const char* luaT_typenameid(lua_State *L, const char *tname) ###$/;"	S
const_list_	dmlc-core\\include\\dmlc\\registry.h	/^  std::vector<const EntryType*> const_list_;$/;"	m	class:dmlc::Registry	typeref:typename:std::vector<const EntryType * >
const_list_	nnvm\\include\\dmlc\\registry.h	/^  std::vector<const EntryType*> const_list_;$/;"	m	class:dmlc::Registry	typeref:typename:std::vector<const EntryType * >
const_ptr	dmlc-core\\include\\dmlc\\memory.h	/^  typedef const T* const_ptr;$/;"	t	class:dmlc::ThreadlocalAllocator	typeref:typename:const T *
const_ptr	nnvm\\include\\dmlc\\memory.h	/^  typedef const T* const_ptr;$/;"	t	class:dmlc::ThreadlocalAllocator	typeref:typename:const T *
constexpr	dmlc-core\\include\\dmlc\\base.h	/^#define constexpr /;"	d
constexpr	nnvm\\include\\dmlc\\base.h	/^#define constexpr /;"	d
constfolding	lua\\lcode.c	/^static int constfolding (FuncState *fs, int op, expdesc *e1,$/;"	f	typeref:typename:int	file:
construct	dmlc-core\\include\\dmlc\\any.h	/^inline void any::construct(any&& other) {$/;"	f	class:dmlc::any	typeref:typename:void
construct	dmlc-core\\include\\dmlc\\any.h	/^inline void any::construct(const any& other) {$/;"	f	class:dmlc::any	typeref:typename:void
construct	nnvm\\include\\dmlc\\any.h	/^inline void any::construct(any&& other) {$/;"	f	class:dmlc::any	typeref:typename:void
construct	nnvm\\include\\dmlc\\any.h	/^inline void any::construct(const any& other) {$/;"	f	class:dmlc::any	typeref:typename:void
constructor	lua\\lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	typeref:typename:void	file:
constructor	torch7\\init.lua	/^   local function constructor(...)$/;"	f
consumer_cond_	dmlc-core\\include\\dmlc\\threadediter.h	/^  std::condition_variable consumer_cond_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:std::condition_variable
container	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^    public Container container = null;$/;"	f	class:TaskRecord
containerRequest	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^    public ContainerRequest containerRequest = null;$/;"	f	class:TaskRecord
content_	dmlc-core\\src\\io\\s3_filesys.cc	/^  const char *content_;$/;"	m	struct:dmlc::io::s3::XMLIter	typeref:typename:const char *	file:
control_deps	nnvm\\include\\nnvm\\graph.h	/^    array_view<uint32_t> control_deps;$/;"	m	struct:nnvm::IndexedGraph::Node	typeref:typename:array_view<uint32_t>
control_deps	nnvm\\include\\nnvm\\node.h	/^  std::vector<NodePtr> control_deps;$/;"	m	class:nnvm::Node	typeref:typename:std::vector<NodePtr>
control_deps	nnvm\\src\\pass\\saveload_json.cc	/^  std::vector<uint32_t> control_deps;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONNode	typeref:typename:std::vector<uint32_t>	file:
control_deps_	nnvm\\include\\nnvm\\graph.h	/^  std::vector<uint32_t> control_deps_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::vector<uint32_t>
controlstruct	lua\\testes\\heavy.lua	/^function controlstruct ()$/;"	f
conv1	example\\cifar_resnet.py	/^conv1 = tf.nn.conv2d(x, num_filter=16, ksize=[1, 5, 5, 1], padding='SAME')$/;"	v
conv1	example\\mnist_lenet.py	/^conv1 = tf.nn.conv2d(x, num_filter=20, ksize=[1, 5, 5, 1], name="conv1", no_bias=False)$/;"	v
conv2	example\\cifar_resnet.py	/^conv2 = tf.nn.conv2d(pool1, num_filter=16, ksize=[1, 5, 5, 1])$/;"	v
conv2	example\\mnist_lenet.py	/^conv2 = tf.nn.conv2d(pool1, num_filter=50, ksize=[1, 5, 5, 1], name="conv2", no_bias=False)$/;"	v
conv2d	python\\tinyflow\\nn.py	/^def conv2d(data, weight=None,$/;"	f
conv_factory	example\\cifar_resnet.py	/^def conv_factory(x, filter_size, in_filters, out_filters):$/;"	f
convergeephemerons	lua\\lgc.c	/^static void convergeephemerons (global_State *g) {$/;"	f	typeref:typename:void	file:
convert	lua\\testes\\main.lua	/^local function convert (p)$/;"	f
convolve_5x5	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^void convolve_5x5(float* output, float* input, float* kernel, long outRows, long outCols, long i/;"	f	typeref:typename:void
convolve_5x5_16x16_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_16x16_avx(float* output, float* image, float* weight, long count, long outputS/;"	f	typeref:typename:void
convolve_5x5_16x16_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_16x16_sse(float* output, float* image, float* weight, long count, long outputS/;"	f	typeref:typename:void
convolve_5x5_1_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_1_avx(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_1_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_1_sse(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_2_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_2_avx(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_2_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_2_sse(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_32x32_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_32x32_avx(float* output, float* image, float* weight, long count, long outputS/;"	f	typeref:typename:void
convolve_5x5_32x32_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_32x32_sse(float* output, float* image, float* weight, long count, long outputS/;"	f	typeref:typename:void
convolve_5x5_4_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_4_avx(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_4_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_4_sse(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_5_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_5_avx(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_64x64_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_64x64_avx(float* output, float* image, float* weight, long count, long outputS/;"	f	typeref:typename:void
convolve_5x5_64x64_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_64x64_sse(float* output, float* image, float* weight, long count, long outputS/;"	f	typeref:typename:void
convolve_5x5_6_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_6_avx(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_6_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_6_sse(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_7_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_7_avx(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_8_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_8_avx(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_8_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_8_sse(float* output, float* image, float* weight, long count, long outputStrid/;"	f	typeref:typename:void
convolve_5x5_8x8_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_8x8_avx(float* output, float* image, float* weight, long count, long outputStr/;"	f	typeref:typename:void
convolve_5x5_8x8_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_8x8_sse(float* output, float* image, float* weight, long count, long outputStr/;"	f	typeref:typename:void
convolve_5x5_avx	torch7\\lib\\TH\\generic\\simd\\convolve5x5_avx.c	/^void convolve_5x5_avx(float* output, float* input, float* kernel, long outRows, long outCols, lo/;"	f	typeref:typename:void
convolve_5x5_sse	torch7\\lib\\TH\\generic\\simd\\convolve5x5_sse.c	/^void convolve_5x5_sse(float* output, float* input, float* kernel, long outRows, long outCols, lo/;"	f	typeref:typename:void
copy2buff	lua\\lvm.c	/^static void copy2buff (StkId top, int n, char *buff) {$/;"	f	typeref:typename:void	file:
copy_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(copy_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
copyright	dmlc-core\\doc\\conf.py	/^copyright = u'2015, dmlc-core developers'$/;"	v
copywithendian	lua\\lstrlib.c	/^static void copywithendian (volatile char *dest, volatile const char *src,$/;"	f	typeref:typename:void	file:
coresume	lua\\ltests.c	/^static int coresume (lua_State *L) {$/;"	f	typeref:typename:int	file:
correct_prediction	example\\cifar_resnet.py	/^correct_prediction = tf.equal(tf.argmax(fc1, 1), label)$/;"	v
correct_prediction	example\\mnist_lenet.py	/^correct_prediction = tf.equal(tf.argmax(fc2, 1), label)$/;"	v
correct_prediction	example\\mnist_mlp_auto_shape_inference.py	/^correct_prediction = tf.equal(tf.argmax(fc2, 1), label)$/;"	v
correct_prediction	example\\mnist_softmax.py	/^correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))$/;"	v
correct_prediction	example\\mnist_softmax_minimum.py	/^correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))$/;"	v
correctgraylist	lua\\lgc.c	/^static GCObject **correctgraylist (GCObject **p) {$/;"	f	typeref:typename:GCObject **	file:
correctgraylists	lua\\lgc.c	/^static void correctgraylists (global_State *g) {$/;"	f	typeref:typename:void	file:
correctstack	lua\\ldo.c	/^static void correctstack (lua_State *L, StkId oldstack, StkId newstack) {$/;"	f	typeref:typename:void	file:
count	lua\\testes\\api.lua	/^function count (x, n)$/;"	f
count	nnvm\\include\\nnvm\\op.h	/^inline int OpMap<ValueType>::count(const Op* op) const {$/;"	f	class:nnvm::OpMap	typeref:typename:int
counter	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^  int counter;$/;"	m	struct:producer_test::IntProducer	typeref:typename:int	file:
countint	lua\\ltable.c	/^static int countint (lua_Integer key, unsigned int *nums) {$/;"	f	typeref:typename:int	file:
countlimit	lua\\ltests.h	/^  unsigned long countlimit;$/;"	m	struct:Memcontrol	typeref:typename:unsigned long
countlines	lua\\testes\\db.lua	/^  local function countlines (s)$/;"	f
coverage	dmlc-core\\doc\\Makefile	/^coverage:$/;"	t
cpuid	torch7\\lib\\TH\\generic\\simd\\simd.h	/^static inline void cpuid(uint32_t *eax, uint32_t *ebx, uint32_t *ecx, uint32_t *edx)$/;"	f	typeref:typename:void
create	nnvm\\python\\nnvm\\graph.py	/^def create(symbol):$/;"	f
createDuplicateTests	torch7\\test\\test_Tester.lua	/^   local function createDuplicateTests()$/;"	f
createSharedMemStorage	torch7\\test\\test_sharedmem.lua	/^local function createSharedMemStorage(name, size, storageType)$/;"	f
create_from_data	dmlc-core\\include\\dmlc\\any.h	/^    void (*create_from_data)(Data* dst, const Data& src);$/;"	m	struct:dmlc::any::Type	typeref:typename:void (*)(Data * dst,const Data & src)
create_from_data	dmlc-core\\include\\dmlc\\any.h	/^  inline static void create_from_data(any::Data* dst, const any::Data& data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:void
create_from_data	dmlc-core\\include\\dmlc\\any.h	/^  inline static void create_from_data(any::Data* dst, const any::Data& data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:void
create_from_data	nnvm\\include\\dmlc\\any.h	/^    void (*create_from_data)(Data* dst, const Data& src);$/;"	m	struct:dmlc::any::Type	typeref:typename:void (*)(Data * dst,const Data & src)
create_from_data	nnvm\\include\\dmlc\\any.h	/^  inline static void create_from_data(any::Data* dst, const any::Data& data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:void
create_from_data	nnvm\\include\\dmlc\\any.h	/^  inline static void create_from_data(any::Data* dst, const any::Data& data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:void
createargtable	lua\\lua.c	/^static void createargtable (lua_State *L, char **argv, int argc, int script) {$/;"	f	typeref:typename:void	file:
createcases	lua\\testes\\constructs.lua	/^local function createcases (n)$/;"	f
createclibstable	lua\\loadlib.c	/^static void createclibstable (lua_State *L) {$/;"	f	typeref:typename:void	file:
createfiles	lua\\testes\\attrib.lua	/^local function createfiles (files, preextras, posextras)$/;"	f
createlabel	lua\\lparser.c	/^static int createlabel (LexState *ls, TString *name, int line,$/;"	f	typeref:typename:int	file:
createmeta	lua\\liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	typeref:typename:void	file:
createmetatable	lua\\lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	typeref:typename:void	file:
createsearcherstable	lua\\loadlib.c	/^static void createsearcherstable (lua_State *L) {$/;"	f	typeref:typename:void	file:
createstdfile	lua\\liolib.c	/^static void createstdfile (lua_State *L, FILE *f, const char *k,$/;"	f	typeref:typename:void	file:
createstrobj	lua\\lstring.c	/^static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {$/;"	f	typeref:typename:TString *	file:
creator	nnvm\\python\\nnvm\\_ctypes\\symbol.py	/^    def creator(*args, **kwargs):$/;"	f	function:_make_atomic_symbol_function	file:
creator	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^    def creator(*args, **kwargs):$/;"	f	function:_make_atomic_symbol_function	file:
credentials	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private Credentials credentials = null;$/;"	f	class:ApplicationMaster	file:
credentials	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private Credentials credentials = null;$/;"	f	class:Client	file:
creturn	bin\\lua\\cwrap\\types.lua	/^      creturn = function(arg)$/;"	f
creturn	bin\\lua\\cwrap\\types.lua	/^   creturn = function(arg)$/;"	f
creturn	cwrap\\types.lua	/^      creturn = function(arg)$/;"	f
creturn	cwrap\\types.lua	/^   creturn = function(arg)$/;"	f
creturn	torch7\\torchcwrap.lua	/^      creturn = function(arg)$/;"	f
creturn	torch7\\torchcwrap.lua	/^   creturn = function(arg)$/;"	f
creturn	torch7\\torchcwrap.lua	/^   creturn = function(arg, idx)$/;"	f
creturn	torch7\\torchcwrap.lua	/^  creturn = function(arg)$/;"	f
creturn(arg)	cwrap\\doc\\usertypes.md	/^### creturn(arg) ###$/;"	S
cross_entropy	example\\cifar_resnet.py	/^cross_entropy = tf.nn.mean_sparse_softmax_cross_entropy_with_logits(fc1, label)$/;"	v
cross_entropy	example\\mnist_lenet.py	/^cross_entropy = tf.nn.mean_sparse_softmax_cross_entropy_with_logits(fc2, label)$/;"	v
cross_entropy	example\\mnist_mlp_auto_shape_inference.py	/^cross_entropy = tf.nn.mean_sparse_softmax_cross_entropy_with_logits(fc2, label)$/;"	v
cross_entropy	example\\mnist_softmax.py	/^cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))$/;"	v
cross_entropy	example\\mnist_softmax_minimum.py	/^cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))$/;"	v
ctb	lua\\lobject.h	/^#define ctb(/;"	d
ctx	lua\\lstate.h	/^      lua_KContext ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anonad48b566010a::__anonad48b5660308	typeref:typename:lua_KContext
ctypes2buffer	nnvm\\python\\nnvm\\_base.py	/^def ctypes2buffer(cptr, length):$/;"	f
ctypes2docstring	nnvm\\python\\nnvm\\_base.py	/^def ctypes2docstring(num_args, arg_names, arg_types, arg_descs, remove_dup=True):$/;"	f
ctypes2numpy_shared	nnvm\\python\\nnvm\\_base.py	/^def ctypes2numpy_shared(cptr, shape):$/;"	f
curl_global	dmlc-core\\src\\io\\s3_filesys.cc	/^static CURLGlobal curl_global;$/;"	v	namespace:dmlc::io::s3	typeref:typename:CURLGlobal	file:
currIsNewline	lua\\llex.c	/^#define currIsNewline(/;"	d	file:
curr_bytes_	dmlc-core\\src\\io\\s3_filesys.cc	/^  size_t curr_bytes_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:size_t	file:
curr_page_	dmlc-core\\include\\dmlc\\memory.h	/^  std::unique_ptr<Page> curr_page_;$/;"	m	class:dmlc::MemoryPool	typeref:typename:std::unique_ptr<Page>
curr_page_	nnvm\\include\\dmlc\\memory.h	/^  std::unique_ptr<Page> curr_page_;$/;"	m	class:dmlc::MemoryPool	typeref:typename:std::unique_ptr<Page>
curr_path	dmlc-core\\doc\\conf.py	/^curr_path = os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))$/;"	v
curr_path	python\\tinyflow\\_base.py	/^curr_path = os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))$/;"	v
curr_ptr_	dmlc-core\\include\\dmlc\\memory_io.h	/^  size_t curr_ptr_;$/;"	m	struct:dmlc::MemoryFixedSizeStream	typeref:typename:size_t
curr_ptr_	dmlc-core\\include\\dmlc\\memory_io.h	/^  size_t curr_ptr_;$/;"	m	struct:dmlc::MemoryStringStream	typeref:typename:size_t
current	lua\\llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState	typeref:typename:int
current	nnvm\\python\\nnvm\\attribute.py	/^    current = None$/;"	v	class:AttrScope
current	nnvm\\python\\nnvm\\name.py	/^    current = None$/;"	v	class:NameManager
currentline	lua\\ldebug.c	/^static int currentline (CallInfo *ci) {$/;"	f	typeref:typename:int	file:
currentline	lua\\lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
currentpc	lua\\ldebug.c	/^static int currentpc (CallInfo *ci) {$/;"	f	typeref:typename:int	file:
currentwhite	lua\\lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State	typeref:typename:lu_byte
cv_	dmlc-core\\include\\dmlc\\concurrency.h	/^  std::condition_variable cv_;$/;"	m	class:dmlc::ConcurrentBlockingQueue	typeref:typename:std::condition_variable
cvt2num	lua\\lvm.h	/^#define cvt2num(/;"	d
cvt2str	lua\\lvm.h	/^#define cvt2str(/;"	d
cyclean	nnvm\\Makefile	/^cyclean:$/;"	t
cython	nnvm\\Makefile	/^cython:$/;"	t
cython3	nnvm\\Makefile	/^cython3:$/;"	t
d	lua\\lstrlib.c	/^  double d;$/;"	m	union:Ftypes	typeref:typename:double	file:
d	lua\\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon7d795870030a	typeref:typename:double	file:
d	lua\\ltests.c	/^  } d;$/;"	m	union:Header	typeref:struct:Header::__anond88b85530108	file:
d2s	lua\\ltests.c	/^static int d2s (lua_State *L) {$/;"	f	typeref:typename:int	file:
data	dmlc-core\\include\\dmlc\\concurrency.h	/^    T data;$/;"	m	struct:dmlc::ConcurrentBlockingQueue::Entry	typeref:typename:T
data	dmlc-core\\include\\dmlc\\memory.h	/^    typename std::aligned_storage<size, align>::type data[kPageSize];$/;"	m	struct:dmlc::MemoryPool::Page	typeref:typename:std::aligned_storage<size,align>::type[]
data	dmlc-core\\include\\dmlc\\memory.h	/^    typename std::aligned_storage<sizeof(T), alignof(T)>::type data;$/;"	m	struct:dmlc::ThreadlocalSharedPtr::RefBlock	typeref:typename:std::aligned_storage<sizeof (T),alignof (T)>::type
data	dmlc-core\\src\\data.cc	/^namespace data {$/;"	n	namespace:dmlc	file:
data	dmlc-core\\src\\data\\basic_row_iter.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\data\\csv_parser.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\data\\disk_row_iter.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\data\\libsvm_parser.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\data\\parser.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\data\\row_block.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\data\\strtonum.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\data\\text_parser.h	/^namespace data {$/;"	n	namespace:dmlc
data	dmlc-core\\src\\io\\input_split_base.h	/^    std::vector<size_t> data;$/;"	m	struct:dmlc::io::InputSplitBase::Chunk	typeref:typename:std::vector<size_t>
data	include\\tinyflow\\base.h	/^  void* data{nullptr};$/;"	m	struct:tinyflow::TBlob	typeref:typename:void *
data	lua\\ldump.c	/^  void *data;$/;"	m	struct:__anon7d8240f60108	typeref:typename:void *	file:
data	lua\\lzio.h	/^  void *data;			\/* additional data *\/$/;"	m	struct:Zio	typeref:typename:void *
data	nnvm\\include\\dmlc\\memory.h	/^    typename std::aligned_storage<size, align>::type data[kPageSize];$/;"	m	struct:dmlc::MemoryPool::Page	typeref:typename:std::aligned_storage<size,align>::type[]
data	nnvm\\include\\dmlc\\memory.h	/^    typename std::aligned_storage<sizeof(T), alignof(T)>::type data;$/;"	m	struct:dmlc::ThreadlocalSharedPtr::RefBlock	typeref:typename:std::aligned_storage<sizeof (T),alignof (T)>::type
data	nnvm\\include\\nnvm\\tuple.h	/^  inline const index_t *data() const {$/;"	f	class:nnvm::TShape	typeref:typename:const index_t *
data	nnvm\\include\\nnvm\\tuple.h	/^  inline index_t *data() {$/;"	f	class:nnvm::TShape	typeref:typename:index_t *
data	torch7\\lib\\TH\\generic\\THStorage.h	/^    real *data;$/;"	m	struct:THStorage	typeref:typename:real *
data.o	dmlc-core\\Makefile	/^data.o: src\/data.cc$/;"	t
data_	dmlc-core\\include\\dmlc\\any.h	/^  Data data_;$/;"	m	class:dmlc::any	typeref:typename:Data
data_	dmlc-core\\include\\dmlc\\thread_local.h	/^  std::vector<T*> data_;$/;"	m	class:dmlc::ThreadLocalStore	typeref:typename:std::vector<T * >
data_	dmlc-core\\src\\data\\basic_row_iter.h	/^  RowBlockContainer<IndexType> data_;$/;"	m	class:dmlc::data::BasicRowIter	typeref:typename:RowBlockContainer<IndexType>
data_	dmlc-core\\src\\data\\parser.h	/^  std::vector<RowBlockContainer<IndexType> > data_;$/;"	m	class:dmlc::data::ParserImpl	typeref:typename:std::vector<RowBlockContainer<IndexType>>
data_	dmlc-core\\test\\unittest\\unittest_json.cc	/^  std::vector<std::string> data_;$/;"	m	class:json::MyClass	typeref:typename:std::vector<std::string>	file:
data_	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  std::string data_;$/;"	m	class:MyClass	typeref:typename:std::string	file:
data_	nnvm\\include\\dmlc\\any.h	/^  Data data_;$/;"	m	class:dmlc::any	typeref:typename:Data
data_	nnvm\\include\\dmlc\\thread_local.h	/^  std::vector<T*> data_;$/;"	m	class:dmlc::ThreadLocalStore	typeref:typename:std::vector<T * >
data_	nnvm\\include\\nnvm\\op.h	/^  std::vector<std::pair<ValueType, int> > data_;$/;"	m	class:nnvm::OpMap	typeref:typename:std::vector<std::pair<ValueType,int>>
data_	nnvm\\src\\pass\\plan_memory.cc	/^  std::vector<std::unique_ptr<StorageEntry> > data_;$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:std::vector<std::unique_ptr<StorageEntry>>	file:
data_end_	dmlc-core\\src\\data\\parser.h	/^  IndexType data_ptr_, data_end_;$/;"	m	class:dmlc::data::ParserImpl	typeref:typename:IndexType
data_entry_	src\\session.cc	/^  std::vector<LuaRef> data_entry_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<LuaRef>	file:
data_entry_is_var_	src\\session.cc	/^  std::vector<bool> data_entry_is_var_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<bool>	file:
data_format	src\\op_nn.cc	/^  std::string data_format;$/;"	m	struct:tinyflow::ConvPoolParam	typeref:typename:std::string	file:
data_heap_	nnvm\\include\\nnvm\\tuple.h	/^  ValueType* data_heap_{nullptr};$/;"	m	class:nnvm::Tuple	typeref:typename:ValueType *
data_on_stack	dmlc-core\\include\\dmlc\\any.h	/^  struct data_on_stack {$/;"	s	class:dmlc::any
data_on_stack	nnvm\\include\\dmlc\\any.h	/^  struct data_on_stack {$/;"	s	class:dmlc::any
data_ptr_	dmlc-core\\src\\data\\parser.h	/^  IndexType data_ptr_, data_end_;$/;"	m	class:dmlc::data::ParserImpl	typeref:typename:IndexType
data_stack_	nnvm\\include\\nnvm\\tuple.h	/^  ValueType data_stack_[kStackCache];$/;"	m	class:nnvm::Tuple	typeref:typename:ValueType[]
db_debug	lua\\ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_gethook	lua\\ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getinfo	lua\\ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getlocal	lua\\ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getmetatable	lua\\ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getregistry	lua\\ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getupvalue	lua\\ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getuservalue	lua\\ldblib.c	/^static int db_getuservalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_sethook	lua\\ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setlocal	lua\\ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setmetatable	lua\\ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setupvalue	lua\\ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setuservalue	lua\\ldblib.c	/^static int db_setuservalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_traceback	lua\\ldblib.c	/^static int db_traceback (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_upvalueid	lua\\ldblib.c	/^static int db_upvalueid (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_upvaluejoin	lua\\ldblib.c	/^static int db_upvaluejoin (lua_State *L) {$/;"	f	typeref:typename:int	file:
dblib	lua\\ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
deallocate	dmlc-core\\include\\dmlc\\memory.h	/^  inline void deallocate(T* p, size_t n) {$/;"	f	class:dmlc::ThreadlocalAllocator	typeref:typename:void
deallocate	dmlc-core\\include\\dmlc\\memory.h	/^  inline void deallocate(void* p) {$/;"	f	class:dmlc::MemoryPool	typeref:typename:void
deallocate	nnvm\\include\\dmlc\\memory.h	/^  inline void deallocate(T* p, size_t n) {$/;"	f	class:dmlc::ThreadlocalAllocator	typeref:typename:void
deallocate	nnvm\\include\\dmlc\\memory.h	/^  inline void deallocate(void* p) {$/;"	f	class:dmlc::MemoryPool	typeref:typename:void
debug_realloc	lua\\ltests.c	/^void *debug_realloc (void *ud, void *b, size_t oldsize, size_t size) {$/;"	f	typeref:typename:void *
debug_str	nnvm\\python\\nnvm\\symbol.py	/^    def debug_str(self):$/;"	m	class:Symbol
decXCcalls	lua\\lstate.h	/^#define decXCcalls(/;"	d
decide_rank	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def decide_rank(self, job_map):$/;"	m	class:SlaveEntry
declare	bin\\lua\\cwrap\\types.lua	/^      declare = function(arg)$/;"	f
declare	bin\\lua\\cwrap\\types.lua	/^   declare = function(arg)$/;"	f
declare	cwrap\\types.lua	/^      declare = function(arg)$/;"	f
declare	cwrap\\types.lua	/^   declare = function(arg)$/;"	f
declare	torch7\\torchcwrap.lua	/^      declare = function(arg)$/;"	f
declare	torch7\\torchcwrap.lua	/^   declare = function(arg)$/;"	f
declare	torch7\\torchcwrap.lua	/^  declare = function(arg)$/;"	f
declare(arg)	cwrap\\doc\\usertypes.md	/^### declare(arg) ###$/;"	S
decnny	lua\\lstate.h	/^#define decnny(/;"	d
deep	lua\\testes\\calls.lua	/^function deep (n) if n>0 then return deep(n-1) else return 101 end end$/;"	f
deep	lua\\testes\\calls.lua	/^function deep (n)$/;"	f
deep	lua\\testes\\db.lua	/^  local function deep (lvl, n)$/;"	f
defaultArgErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^static THArgErrorHandlerFunction defaultArgErrorHandler = defaultArgErrorHandlerFunction;$/;"	v	typeref:typename:THArgErrorHandlerFunction	file:
defaultArgErrorHandlerData	torch7\\lib\\TH\\THGeneral.c	/^static void *defaultArgErrorHandlerData;$/;"	v	typeref:typename:void *	file:
defaultArgErrorHandlerFunction	torch7\\lib\\TH\\THGeneral.c	/^static void defaultArgErrorHandlerFunction(int argNumber, const char *msg, void *data)$/;"	f	typeref:typename:void	file:
defaultErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^static THErrorHandlerFunction defaultErrorHandler = defaultErrorHandlerFunction;$/;"	v	typeref:typename:THErrorHandlerFunction	file:
defaultErrorHandlerData	torch7\\lib\\TH\\THGeneral.c	/^static void *defaultErrorHandlerData;$/;"	v	typeref:typename:void *	file:
defaultErrorHandlerFunction	torch7\\lib\\TH\\THGeneral.c	/^static void defaultErrorHandlerFunction(const char *msg, void *data)$/;"	f	typeref:typename:void	file:
default_dev_mask_	src\\session.cc	/^  int default_dev_mask_{kCPU};$/;"	m	class:tinyflow::TorchSession	typeref:typename:int	file:
default_value_	dmlc-core\\include\\dmlc\\parameter.h	/^  DType default_value_;$/;"	m	class:dmlc::parameter::FieldEntryBase	typeref:typename:DType
default_value_	nnvm\\include\\dmlc\\parameter.h	/^  DType default_value_;$/;"	m	class:dmlc::parameter::FieldEntryBase	typeref:typename:DType
delay	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^inline void delay(int sleep) {$/;"	f	namespace:producer_test	typeref:typename:void
deletelist	lua\\lgc.c	/^static void deletelist (lua_State *L, GCObject *p, GCObject *limit) {$/;"	f	typeref:typename:void	file:
delimits	lua\\ltests.c	/^static const char *const delimits = " \\t\\n,;";$/;"	v	typeref:typename:const char * const	file:
depend	lua\\makefile	/^depend:$/;"	t
depend_graph_attr	nnvm\\include\\nnvm\\pass.h	/^  PassFunctionReg& depend_graph_attr(const std::string& attr_name) {  \/\/ NOLINT(*)$/;"	f	struct:nnvm::PassFunctionReg	typeref:typename:PassFunctionReg &
depend_op_attr	nnvm\\include\\nnvm\\pass.h	/^  PassFunctionReg& depend_op_attr(const std::string& attr_name) {  \/\/ NOLINT(*)$/;"	f	struct:nnvm::PassFunctionReg	typeref:typename:PassFunctionReg &
describe	dmlc-core\\include\\dmlc\\parameter.h	/^  inline TEntry &describe(const std::string &description) {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry &
describe	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &describe(const std::string &description) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
describe	nnvm\\include\\dmlc\\parameter.h	/^  inline TEntry &describe(const std::string &description) {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry &
describe	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &describe(const std::string &description) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
describe	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::describe(const std::string& descr) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::Op	typeref:typename:Op &
description	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string description;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
description	dmlc-core\\include\\dmlc\\registry.h	/^  std::string description;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::string
description	nnvm\\include\\dmlc\\parameter.h	/^  std::string description;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
description	nnvm\\include\\dmlc\\registry.h	/^  std::string description;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::string
description	nnvm\\include\\nnvm\\op.h	/^  std::string description;$/;"	m	class:nnvm::Op	typeref:typename:std::string
description_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string description_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:std::string
description_	nnvm\\include\\dmlc\\parameter.h	/^  std::string description_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:std::string
destroy	dmlc-core\\include\\dmlc\\any.h	/^    void (*destroy)(Data* data);$/;"	m	struct:dmlc::any::Type	typeref:typename:void (*)(Data * data)
destroy	dmlc-core\\include\\dmlc\\any.h	/^  inline static void destroy(Data* data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:void
destroy	dmlc-core\\include\\dmlc\\any.h	/^  inline static void destroy(Data* data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:void
destroy	nnvm\\include\\dmlc\\any.h	/^    void (*destroy)(Data* data);$/;"	m	struct:dmlc::any::Type	typeref:typename:void (*)(Data * data)
destroy	nnvm\\include\\dmlc\\any.h	/^  inline static void destroy(Data* data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:void
destroy	nnvm\\include\\dmlc\\any.h	/^  inline static void destroy(Data* data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:void
detectHostSIMDExtensions	torch7\\lib\\TH\\generic\\simd\\simd.h	/^static inline uint32_t detectHostSIMDExtensions()$/;"	f	typeref:typename:uint32_t
dev_mask	include\\tinyflow\\base.h	/^  int dev_mask{kCPU};$/;"	m	struct:tinyflow::TBlob	typeref:typename:int
dev_mask_	src\\session.cc	/^  int dev_mask_{kGPU};$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:int	file:
devhelp	dmlc-core\\doc\\Makefile	/^devhelp:$/;"	t
device_id	nnvm\\src\\pass\\plan_memory.cc	/^    int device_id;$/;"	m	struct:nnvm::pass::__anon235b49ae0110::GraphAllocator::StorageEntry	typeref:typename:int	file:
dfs	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private FileSystem dfs;$/;"	f	class:ApplicationMaster	file:
dfs	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private FileSystem dfs;$/;"	f	class:Client	file:
dfself	torch7\\lib\\TH\\THDiskFile.c	/^  THDiskFile *dfself = (THDiskFile*)(self);$/;"	v	typeref:typename:THDiskFile *
dict	nnvm\\include\\nnvm\\node.h	/^  std::unordered_map<std::string, std::string> dict;$/;"	m	struct:nnvm::NodeAttrs	typeref:typename:std::unordered_map<std::string,std::string>
digit	lua\\lstrlib.c	/^static int digit (int c) { return '0' <= c && c <= '9'; }$/;"	f	typeref:typename:int	file:
dim	src\\op_nn.cc	/^  uint32_t dim;$/;"	m	struct:tinyflow::PadParam	typeref:typename:uint32_t	file:
dirhtml	dmlc-core\\doc\\Makefile	/^dirhtml:$/;"	t
disable(testNames)	torch7\\doc\\tester.md	/^### disable(testNames) ###$/;"	S
disableIoWrite	torch7\\test\\test_Tester.lua	/^local function disableIoWrite()$/;"	f
discharge2anyreg	lua\\lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
discharge2reg	lua\\lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	typeref:typename:void	file:
disptab	lua\\ljumptab.h	/^static void *disptab[NUM_OPCODES] = {$/;"	v	typeref:typename:void * []
divs_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(divs_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
dmlc	dmlc-core\\include\\dmlc\\any.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\array_view.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\base.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\common.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\concurrency.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\config.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\data.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\io.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\json.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\logging.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\lua.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\memory.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\memory_io.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\omp.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\parameter.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\recordio.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\registry.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\serializer.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\thread_local.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\threadediter.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\timer.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\include\\dmlc\\type_traits.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\config.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\data.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\data\\basic_row_iter.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\data\\csv_parser.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\data\\disk_row_iter.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\data\\libsvm_parser.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\data\\parser.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\data\\row_block.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\data\\strtonum.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\data\\text_parser.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\azure_filesys.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\azure_filesys.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\cached_input_split.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\filesys.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\hdfs_filesys.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\hdfs_filesys.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\input_split_base.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\input_split_base.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\line_split.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\line_split.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\local_filesys.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\local_filesys.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\recordio_split.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\recordio_split.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\s3_filesys.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\src\\io\\s3_filesys.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\single_file_split.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\threaded_input_split.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\io\\uri_spec.h	/^namespace dmlc {$/;"	n
dmlc	dmlc-core\\src\\recordio.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\test\\registry_test.cc	/^namespace dmlc {$/;"	n	file:
dmlc	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^namespace dmlc { DMLC_DECLARE_TRAITS(has_saveload, MyClass, true); }$/;"	n	file:
dmlc	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^namespace dmlc { DMLC_DECLARE_TRAITS(is_pod, Param, true); }$/;"	n	file:
dmlc	nnvm\\include\\dmlc\\any.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\array_view.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\base.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\json.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\logging.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\memory.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\parameter.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\registry.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\thread_local.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\timer.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\include\\dmlc\\type_traits.h	/^namespace dmlc {$/;"	n
dmlc	nnvm\\src\\core\\op.cc	/^namespace dmlc {$/;"	n	file:
dmlc	nnvm\\src\\core\\pass.cc	/^namespace dmlc {$/;"	n	file:
dmlc	nnvm\\src\\pass\\saveload_json.cc	/^namespace dmlc {$/;"	n	file:
dmlc	src\\torch\\torch_util.h	/^namespace dmlc {$/;"	n
dmlc-core-yarn	dmlc-core\\tracker\\yarn\\pom.xml	/^  <name>dmlc-core-yarn<\/name>$/;"	a	groupId:org.apache.hadoop.yarn.dmlc
doREPL	lua\\lua.c	/^static void doREPL (lua_State *L) {$/;"	f	typeref:typename:void	file:
doc	nnvm\\Makefile	/^doc:$/;"	t
docall	lua\\lua.c	/^static int docall (lua_State *L, int narg, int nres) {$/;"	f	typeref:typename:int	file:
dochunk	lua\\lua.c	/^static int dochunk (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
docondjump	lua\\lvm.c	/^#define docondjump(/;"	d	file:
doctest	dmlc-core\\doc\\Makefile	/^doctest:$/;"	t
dofile	lua\\lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	typeref:typename:int	file:
dofile	lua\\testes\\all.lua	/^local dofile = function (n, strip)$/;"	f
dofilecont	lua\\lbaselib.c	/^static int dofilecont (lua_State *L, int d1, lua_KContext d2) {$/;"	f	typeref:typename:int	file:
doit	lua\\testes\\errors.lua	/^local function doit (s)$/;"	f
dojump	lua\\lvm.c	/^#define dojump(/;"	d	file:
dolibrary	lua\\lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	typeref:typename:int	file:
doneAllJobs	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized boolean doneAllJobs() {$/;"	m	class:ApplicationMaster	file:
donextjump	lua\\lvm.c	/^#define donextjump(/;"	d	file:
doonnewstack	lua\\ltests.c	/^static int doonnewstack (lua_State *L) {$/;"	f	typeref:typename:int	file:
doremote	lua\\ltests.c	/^static int doremote (lua_State *L) {$/;"	f	typeref:typename:int	file:
dosteps	lua\\testes\\gc.lua	/^  local function dosteps (siz)$/;"	f
dostring	lua\\lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	typeref:typename:int	file:
dostring	lua\\testes\\db.lua	/^local function dostring (s, x) return load(s, x)() end$/;"	f
dostring	lua\\testes\\db.lua	/^local function dostring(s) return assert(load(s))() end$/;"	f
dostring	lua\\testes\\literals.lua	/^local function dostring (x) return assert(load(x), "")() end$/;"	f
dostring	lua\\testes\\pm.lua	/^local function dostring (s) return load(s, "")() or "" end$/;"	f
dothecall	lua\\lgc.c	/^static void dothecall (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
dotrace	lua\\testes\\coroutine.lua	/^  local function dotrace (event)$/;"	f
doxygen	dmlc-core\\Makefile	/^doxygen:$/;"	t
dptr	dmlc-core\\include\\dmlc\\io.h	/^    void *dptr;$/;"	m	struct:dmlc::InputSplit::Blob	typeref:typename:void *
dptr	dmlc-core\\src\\io\\s3_filesys.cc	/^  const char *dptr;$/;"	m	struct:dmlc::io::s3::ReadStringStream	typeref:typename:const char *	file:
dtype	include\\tinyflow\\base.h	/^  int dtype{kFloat32};$/;"	m	struct:tinyflow::TBlob	typeref:typename:int
dtype	src\\c_api.cc	/^  std::vector<nn_uint> dtype;$/;"	m	struct:TinyAPIThreadLocalEntry	typeref:typename:std::vector<nn_uint>	file:
dtype	src\\op_tensor.cc	/^  int dtype;$/;"	m	struct:tinyflow::ZeroParam	typeref:typename:int	file:
dtype_size_dict_	nnvm\\src\\pass\\plan_memory.cc	/^  std::vector<size_t> dtype_size_dict_;$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:std::vector<size_t>	file:
dummy	lua\\lstrlib.c	/^  int dummy;$/;"	m	union:__anon7d795870020a	typeref:typename:int	file:
dummy	lua\\testes\\calls.lua	/^  function dummy (n)$/;"	f
dummy	lua\\testes\\closure.lua	/^  local dummy = function () return a[A] end$/;"	f
dummyTests.testDummyError	torch7\\test\\test_Tester.lua	/^      function dummyTests.testDummyError()$/;"	f
dummyTests.testDummyFailure	torch7\\test\\test_Tester.lua	/^      function dummyTests.testDummyFailure()$/;"	f
dummyTests.testDummySuccess	torch7\\test\\test_Tester.lua	/^      function dummyTests.testDummySuccess()$/;"	f
dummynode	lua\\ltable.c	/^#define dummynode	/;"	d	file:
dummynode_	lua\\ltable.c	/^static const Node dummynode_ = {$/;"	v	typeref:typename:const Node	file:
dyd	lua\\ldo.c	/^  Dyndata dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:SParser	typeref:typename:Dyndata	file:
dyd	lua\\llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:Dyndata *
e1	lua\\testes\\main.lua	/^  local <toclose> e1 = function () error(120) end$/;"	f
echo	lua\\makefile	/^echo:$/;"	t
ecurl_	dmlc-core\\src\\io\\s3_filesys.cc	/^  CURL *ecurl_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:CURL *	file:
ecurl_	dmlc-core\\src\\io\\s3_filesys.cc	/^  CURL *mcurl_, *ecurl_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:CURL **	file:
empty	dmlc-core\\include\\dmlc\\any.h	/^inline bool any::empty() const {$/;"	f	class:dmlc::any	typeref:typename:bool
empty	nnvm\\include\\dmlc\\any.h	/^inline bool any::empty() const {$/;"	f	class:dmlc::any	typeref:typename:bool
enableIoWrite	torch7\\test\\test_Tester.lua	/^local function enableIoWrite()$/;"	f
enable_fusion_	src\\session.cc	/^  bool enable_fusion_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:bool	file:
enable_fusion_	src\\session.cc	/^  bool enable_fusion_{false};$/;"	m	class:tinyflow::TorchSession	typeref:typename:bool	file:
end	dmlc-core\\include\\dmlc\\array_view.h	/^  inline const ValueType* end() const {$/;"	f	class:dmlc::array_view	typeref:typename:const ValueType *
end	dmlc-core\\src\\config.cc	/^Config::ConfigIterator Config::end() const {$/;"	f	class:dmlc::Config	typeref:typename:Config::ConfigIterator
end	dmlc-core\\src\\io\\input_split_base.h	/^    char *end;$/;"	m	struct:dmlc::io::InputSplitBase::Chunk	typeref:typename:char *
end	nnvm\\include\\dmlc\\array_view.h	/^  inline const ValueType* end() const {$/;"	f	class:dmlc::array_view	typeref:typename:const ValueType *
end	nnvm\\include\\nnvm\\tuple.h	/^  inline ValueType* end() {$/;"	f	class:nnvm::Tuple	typeref:typename:ValueType *
end	nnvm\\include\\nnvm\\tuple.h	/^  inline const ValueType* end() const {$/;"	f	class:nnvm::Tuple	typeref:typename:const ValueType *
end_	dmlc-core\\include\\dmlc\\parameter.h	/^  DType begin_, end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:DType
end_	nnvm\\include\\dmlc\\parameter.h	/^  DType begin_, end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:DType
end_capture	lua\\lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
end_of_stream_	dmlc-core\\include\\dmlc\\recordio.h	/^  bool end_of_stream_;$/;"	m	class:dmlc::RecordIOReader	typeref:typename:bool
endpc	lua\\lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar	typeref:typename:int
ensureHasAbs	torch7\\Tester.lua	/^   local function ensureHasAbs(t)$/;"	f
enter	lua\\testes\\locals.lua	/^  local function enter (count)$/;"	f
enterblock	lua\\lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isloop) {$/;"	f	typeref:typename:void	file:
entergen	lua\\lgc.c	/^static lu_mem entergen (lua_State *L, global_State *g) {$/;"	f	typeref:typename:lu_mem	file:
enterinc	lua\\lgc.c	/^static void enterinc (global_State *g) {$/;"	f	typeref:typename:void	file:
enterlevel	lua\\lparser.c	/^#define enterlevel(/;"	d	file:
entersweep	lua\\lgc.c	/^static void entersweep (lua_State *L) {$/;"	f	typeref:typename:void	file:
entry_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::vector<FieldAccessEntry*> entry_;$/;"	m	class:dmlc::parameter::ParamManager	typeref:typename:std::vector<FieldAccessEntry * >
entry_	nnvm\\include\\dmlc\\parameter.h	/^  std::vector<FieldAccessEntry*> entry_;$/;"	m	class:dmlc::parameter::ParamManager	typeref:typename:std::vector<FieldAccessEntry * >
entry_id	nnvm\\include\\nnvm\\graph.h	/^  inline uint32_t entry_id(const NodeEntry& e) const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:uint32_t
entry_id	nnvm\\include\\nnvm\\graph.h	/^  inline uint32_t entry_id(const nnvm::NodeEntry& e) const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:uint32_t
entry_id	nnvm\\include\\nnvm\\graph.h	/^  inline uint32_t entry_id(uint32_t node_id, uint32_t index) const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:uint32_t
entry_list_	dmlc-core\\include\\dmlc\\registry.h	/^  std::vector<EntryType*> entry_list_;$/;"	m	class:dmlc::Registry	typeref:typename:std::vector<EntryType * >
entry_list_	nnvm\\include\\dmlc\\registry.h	/^  std::vector<EntryType*> entry_list_;$/;"	m	class:dmlc::Registry	typeref:typename:std::vector<EntryType * >
entry_map_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::map<std::string, FieldAccessEntry*> entry_map_;$/;"	m	class:dmlc::parameter::ParamManager	typeref:typename:std::map<std::string,FieldAccessEntry * >
entry_map_	nnvm\\include\\dmlc\\parameter.h	/^  std::map<std::string, FieldAccessEntry*> entry_map_;$/;"	m	class:dmlc::parameter::ParamManager	typeref:typename:std::map<std::string,FieldAccessEntry * >
entry_rptr_	nnvm\\include\\nnvm\\graph.h	/^  std::vector<size_t> entry_rptr_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::vector<size_t>
enum_back_map_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::map<int, std::string> enum_back_map_;$/;"	m	class:dmlc::parameter::FieldEntry	typeref:typename:std::map<int,std::string>
enum_back_map_	nnvm\\include\\dmlc\\parameter.h	/^  std::map<int, std::string> enum_back_map_;$/;"	m	class:dmlc::parameter::FieldEntry	typeref:typename:std::map<int,std::string>
enum_map_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::map<std::string, int> enum_map_;$/;"	m	class:dmlc::parameter::FieldEntry	typeref:typename:std::map<std::string,int>
enum_map_	nnvm\\include\\dmlc\\parameter.h	/^  std::map<std::string, int> enum_map_;$/;"	m	class:dmlc::parameter::FieldEntry	typeref:typename:std::map<std::string,int>
env	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private final Map<String, String> env = new java.util.HashMap<String, String>();$/;"	f	class:ApplicationMaster	file:
env	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private Map<String, String> env = new java.util.HashMap<String, String>();$/;"	f	class:Client	file:
envn	lua\\llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState	typeref:typename:TString *
ephemeron	lua\\lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
epub	dmlc-core\\doc\\Makefile	/^epub:$/;"	t
eq	lua\\testes\\math.lua	/^function eq (a,b,limit)$/;"	f
eq(got, expected  [, tolerance] [, message])	torch7\\doc\\tester.md	/^### eq(got, expected  [, tolerance] [, message]) ###$/;"	S
eqT	lua\\testes\\math.lua	/^function eqT (a,b)$/;"	f
eqT	lua\\testes\\sort.lua	/^  local function eqT (a, b)$/;"	f
eqseq	lua\\testes\\db.lua	/^local function eqseq (t1, t2)$/;"	f
eqshrstr	lua\\lstring.h	/^#define eqshrstr(/;"	d
eqstr	lua\\lparser.c	/^#define eqstr(/;"	d	file:
eqtab	lua\\testes\\coroutine.lua	/^local function eqtab (t1, t2)$/;"	f
equalkey	lua\\ltable.c	/^static int equalkey (const TValue *k1, const Node *n2) {$/;"	f	typeref:typename:int	file:
equaltab	lua\\testes\\calls.lua	/^function equaltab (t1, t2)$/;"	f
err_on_n	lua\\testes\\calls.lua	/^function err_on_n (n)$/;"	f
errcomp	torch7\\Tester.lua	/^   local function errcomp(err)$/;"	f
errfile	lua\\lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	typeref:typename:int	file:
errfunc	lua\\lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State	typeref:typename:ptrdiff_t
errmsg	lua\\testes\\goto.lua	/^local function errmsg (code, m)$/;"	f
error	lua\\lundump.c	/^static l_noret error (LoadState *S, const char *why) {$/;"	f	typeref:typename:l_noret	file:
errorJmp	lua\\lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_longjmp *
error_expected	lua\\lparser.c	/^static l_noret error_expected (LexState *ls, int token) {$/;"	f	typeref:typename:l_noret	file:
errorcodes	lua\\testes\\utf8.lua	/^  local function errorcodes (s)$/;"	f
errorlimit	lua\\lparser.c	/^static l_noret errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	typeref:typename:l_noret	file:
errorstatus	lua\\ldo.c	/^#define errorstatus(/;"	d	file:
esccheck	lua\\llex.c	/^static void esccheck (LexState *ls, int c, const char *msg) {$/;"	f	typeref:typename:void	file:
etags_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::vector<std::string> etags_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:std::vector<std::string>	file:
event	lua\\lua.h	/^  int event;$/;"	m	struct:lua_Debug	typeref:typename:int
evil_func	torch7\\test\\test_writeObject.lua	/^   local function evil_func()$/;"	f
example	dmlc-core\\Makefile	/^example: $(ALL_EXAMPLE)$/;"	t
example/parameter	dmlc-core\\example\\dmlc_example.mk	/^example\/parameter: example\/parameter.cc libdmlc.a$/;"	t
except_counter	dmlc-core\\include\\dmlc\\recordio.h	/^  inline size_t except_counter(void) const {$/;"	f	class:dmlc::RecordIOWriter	typeref:typename:size_t
except_counter_	dmlc-core\\include\\dmlc\\recordio.h	/^  size_t except_counter_;$/;"	m	class:dmlc::RecordIOWriter	typeref:typename:size_t
exchangehashpart	lua\\ltable.c	/^static void exchangehashpart (Table *t1, Table *t2) {$/;"	f	typeref:typename:void	file:
exclude_patterns	dmlc-core\\doc\\conf.py	/^exclude_patterns = ['_build']$/;"	v
exec	src\\session.cc	/^    std::shared_ptr<TorchExecutor> exec;$/;"	m	struct:tinyflow::TorchSession::ExecEntry	typeref:typename:std::shared_ptr<TorchExecutor>	file:
exec_cmd	dmlc-core\\tracker\\dmlc_tracker\\local.py	/^def exec_cmd(cmd, role, taskid, pass_env):$/;"	f
exit_now_	dmlc-core\\include\\dmlc\\concurrency.h	/^  std::atomic<bool> exit_now_;$/;"	m	class:dmlc::ConcurrentBlockingQueue	typeref:typename:std::atomic<bool>
exp1	lua\\lparser.c	/^static void exp1 (LexState *ls) {$/;"	f	typeref:typename:void	file:
exp2reg	lua\\lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	typeref:typename:void	file:
expand	lua\\testes\\api.lua	/^function expand (n,s)$/;"	f
expdesc	lua\\lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	lua\\lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expect_file_size_	dmlc-core\\src\\io\\s3_filesys.cc	/^  size_t expect_file_size_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:size_t	file:
expkind	lua\\lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon029e15920103
explist	lua\\lparser.c	/^static int explist (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:int	file:
expr	lua\\lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
exprstat	lua\\lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
extensions	dmlc-core\\doc\\conf.py	/^extensions = [$/;"	v
extra	lua\\lobject.h	/^  lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString	typeref:typename:lu_byte
extra_	lua\\lstate.c	/^  lu_byte extra_[LUA_EXTRASPACE];$/;"	m	struct:LX	typeref:typename:lu_byte[]	file:
f	lua\\lauxlib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:LoadF	typeref:typename:FILE *	file:
f	lua\\lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream	typeref:typename:FILE *
f	lua\\liolib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:__anona099834f0108	typeref:typename:FILE *	file:
f	lua\\lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value	typeref:typename:lua_CFunction
f	lua\\lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure	typeref:typename:lua_CFunction
f	lua\\lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState	typeref:typename:Proto *
f	lua\\lparser.h	/^  int f;  \/* patch list of 'exit when false' *\/$/;"	m	struct:expdesc	typeref:typename:int
f	lua\\lstrlib.c	/^  float f;$/;"	m	union:Ftypes	typeref:typename:float	file:
f	lua\\testes\\api.lua	/^      pushstring "function f() f() end"$/;"	f
f	lua\\testes\\api.lua	/^  function f () f() end$/;"	f
f	lua\\testes\\api.lua	/^  local function f(x)$/;"	f
f	lua\\testes\\attrib.lua	/^  local f = assert(package.loadlib(DC"lib1", p.."onefunction"))$/;"	f
f	lua\\testes\\attrib.lua	/^  local f = function (n) local x = {}; for i=1,n do x[i]=i end;$/;"	f
f	lua\\testes\\attrib.lua	/^function f() return 10, 11, 12 end$/;"	f
f	lua\\testes\\attrib.lua	/^function f(a) return a end$/;"	f
f	lua\\testes\\calls.lua	/^  local function f (a,b,c,d)$/;"	f
f	lua\\testes\\calls.lua	/^f = load(string.dump(function () return 1 end), nil, "b", {})$/;"	f
f	lua\\testes\\calls.lua	/^function f (x) return a:x (x) end$/;"	f
f	lua\\testes\\calls.lua	/^function f() return 1,2,30,4 end$/;"	f
f	lua\\testes\\closure.lua	/^  f = function () return i end$/;"	f
f	lua\\testes\\closure.lua	/^  f = function () return k, v end$/;"	f
f	lua\\testes\\closure.lua	/^  local function f()$/;"	f
f	lua\\testes\\closure.lua	/^function f(x)$/;"	f
f	lua\\testes\\code.lua	/^  local function f (a)$/;"	f
f	lua\\testes\\constructs.lua	/^    local f = assert(load(string.format([[return function (x,y)$/;"	f
f	lua\\testes\\constructs.lua	/^  function f () return 1,2,3; end$/;"	f
f	lua\\testes\\constructs.lua	/^function f (i)$/;"	f
f	lua\\testes\\constructs.lua	/^function f(b)$/;"	f
f	lua\\testes\\constructs.lua	/^function f(i)$/;"	f
f	lua\\testes\\constructs.lua	/^local f = function (i)$/;"	f
f	lua\\testes\\coroutine.lua	/^  f = function () AAA = BBB + 1; return AAA end$/;"	f
f	lua\\testes\\coroutine.lua	/^  local function f (c)$/;"	f
f	lua\\testes\\coroutine.lua	/^f = coroutine.wrap(function ()$/;"	f
f	lua\\testes\\coroutine.lua	/^local f = function (s, i) return coroutine.yield(i) end$/;"	f
f	lua\\testes\\coroutine.lua	/^local f = function (s, i)$/;"	f
f	lua\\testes\\cstack.lua	/^  local function f (size)$/;"	f
f	lua\\testes\\db.lua	/^  function f (x, name)   -- local!$/;"	f
f	lua\\testes\\db.lua	/^  local f = function () return 1+1 and (not 1 or g.x()) end$/;"	f
f	lua\\testes\\db.lua	/^  local function f ()$/;"	f
f	lua\\testes\\db.lua	/^  local function f (event, line)$/;"	f
f	lua\\testes\\db.lua	/^  local function f()$/;"	f
f	lua\\testes\\db.lua	/^  local function f(...) return 3, ... end$/;"	f
f	lua\\testes\\db.lua	/^function f()$/;"	f
f	lua\\testes\\db.lua	/^function f(a,b)$/;"	f
f	lua\\testes\\db.lua	/^function f(i)$/;"	f
f	lua\\testes\\db.lua	/^local f = function () local x; return a end$/;"	f
f	lua\\testes\\db.lua	/^local function f (i)$/;"	f
f	lua\\testes\\db.lua	/^local function f (n)$/;"	f
f	lua\\testes\\db.lua	/^local function f (t)$/;"	f
f	lua\\testes\\db.lua	/^local function f (x)$/;"	f
f	lua\\testes\\errors.lua	/^  f = function () local a; a = {}; return a + 2 end$/;"	f
f	lua\\testes\\errors.lua	/^  function f(x) error('a', X) end$/;"	f
f	lua\\testes\\errors.lua	/^  local f = function ()$/;"	f
f	lua\\testes\\errors.lua	/^  local f = function (a) return a + 1 end$/;"	f
f	lua\\testes\\errors.lua	/^  local function f (x)$/;"	f
f	lua\\testes\\errors.lua	/^f = coroutine.wrap(function () table.sort({1,2,3}, coroutine.yield) end)$/;"	f
f	lua\\testes\\errors.lua	/^local function f (n)$/;"	f
f	lua\\testes\\events.lua	/^function f (t, ...) return t, {...} end$/;"	f
f	lua\\testes\\events.lua	/^function f (t, i, e)$/;"	f
f	lua\\testes\\events.lua	/^function f(op)$/;"	f
f	lua\\testes\\events.lua	/^function f(t, i, v) rawset(t, i, v-3) end$/;"	f
f	lua\\testes\\gc.lua	/^    local function f (param)$/;"	f
f	lua\\testes\\gc.lua	/^  local f = t.co()   -- create function to access local 'a'$/;"	f
f	lua\\testes\\gc.lua	/^do local f = function () end end$/;"	f
f	lua\\testes\\heavy.lua	/^  local function f()$/;"	f
f	lua\\testes\\locals.lua	/^function f (a)$/;"	f
f	lua\\testes\\locals.lua	/^local function f() local x; return x end$/;"	f
f	lua\\testes\\main.lua	/^function f ( x )$/;"	f
f	lua\\testes\\math.lua	/^local function f (...)$/;"	f
f	lua\\testes\\nextvar.lua	/^local function f (n, p)$/;"	f
f	lua\\testes\\pm.lua	/^function f(a,b) return string.gsub(a,'.',b) end$/;"	f
f	lua\\testes\\pm.lua	/^function f(s, p)$/;"	f
f	lua\\testes\\sort.lua	/^  f = f or function (x,y) return x<y end;$/;"	f
f	lua\\testes\\sort.lua	/^  local function f(a, b) assert(a and b); return true end$/;"	f
f	lua\\testes\\vararg.lua	/^  local function f(a,b,c) return c, b end$/;"	f
f	lua\\testes\\vararg.lua	/^function f (n, a, ...)$/;"	f
f	lua\\testes\\vararg.lua	/^function f(a, ...)$/;"	f
f	lua\\testes\\vararg.lua	/^function f(a, b, c, d, ...)$/;"	f
f	lua\\testes\\vararg.lua	/^function f(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10,$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'acos'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'asin'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'atan'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'ceil'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'cos'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'cosh'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'exp'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'floor'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'log'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'sin'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'sinh'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'sqrt'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'tan'))$/;"	f
f	torch7\\test\\test.lua	/^   local f = loadstring(string.gsub(genericSingleOpTest, 'functionname', 'tanh'))$/;"	f
f	torch7\\test\\test_Tester.lua	/^   local function f() end$/;"	f
f1	lua\\testes\\coroutine.lua	/^local f1 = coroutine.wrap(function ()$/;"	f
f1	lua\\testes\\pm.lua	/^function f1(s, p)$/;"	f
f2i	lua\\testes\\math.lua	/^local function f2i (x) return x | x end$/;"	f
f_call	lua\\lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_close	lua\\liolib.c	/^static int f_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_flush	lua\\liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_gc	lua\\liolib.c	/^static int f_gc (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_lines	lua\\liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_luaopen	lua\\lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_parser	lua\\ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_read	lua\\liolib.c	/^static int f_read (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_seek	lua\\liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_setvbuf	lua\\liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_tostring	lua\\liolib.c	/^static int f_tostring (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_write	lua\\liolib.c	/^static int f_write (lua_State *L) {$/;"	f	typeref:typename:int	file:
fact	lua\\testes\\calls.lua	/^  local function fact (n)$/;"	f
fact	lua\\testes\\coroutine.lua	/^  function fact (t, x)$/;"	f
factory	torch7\\init.lua	/^   local function factory()$/;"	f
fasttm	lua\\ltm.h	/^#define fasttm(/;"	d
fat	lua\\testes\\calls.lua	/^function fat(x)$/;"	f
fb	lua\\testes\\nextvar.lua	/^local function fb (n)$/;"	f
fc1	example\\cifar_resnet.py	/^fc1 = tf.nn.linear(flatten, num_hidden=10, name="fc1")$/;"	v
fc1	example\\mnist_lenet.py	/^fc1 = tf.nn.linear(flatten, num_hidden=500, name="fc1")$/;"	v
fc1	example\\mnist_mlp_auto_shape_inference.py	/^fc1 = tf.nn.linear(x, num_hidden=100, name="fc1", no_bias=False)$/;"	v
fc2	example\\mnist_lenet.py	/^fc2 = tf.nn.linear(tanh3, num_hidden=10, name="fc2")$/;"	v
fc2	example\\mnist_mlp_auto_shape_inference.py	/^fc2 = tf.nn.linear(relu1, num_hidden=10, name="fc2")$/;"	v
fchecksize	lua\\lundump.c	/^static void fchecksize (LoadState *S, size_t size, const char *tname) {$/;"	f	typeref:typename:void	file:
fcopy_from_to_	src\\torch\\torch_util.h	/^  LuaRef fcopy_from_to_;$/;"	m	class:tinyflow::TorchState	typeref:typename:LuaRef
fd	torch7\\lib\\TH\\THAllocator.c	/^  int fd;$/;"	m	struct:THMapAllocatorContext_	typeref:typename:int	file:
features	bin\\CMakeFiles\\feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
ffloat	torch7\\lib\\TH\\generic\\THBlas.c	/^# define ffloat /;"	d	file:
fget_internal_	src\\torch\\torch_util.h	/^  LuaRef fget_internal_;$/;"	m	class:tinyflow::TorchState	typeref:typename:LuaRef
fi_	dmlc-core\\src\\data\\disk_row_iter.h	/^  SeekStream *fi_;$/;"	m	class:dmlc::data::DiskRowIter	typeref:typename:SeekStream *
fi_	dmlc-core\\src\\io\\cached_input_split.h	/^  dmlc::SeekStream *fi_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:dmlc::SeekStream *
field	lua\\lparser.c	/^static void field (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
fieldsel	lua\\lparser.c	/^static void fieldsel (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
fifo_queue_	dmlc-core\\include\\dmlc\\concurrency.h	/^  std::queue<T> fifo_queue_;$/;"	m	class:dmlc::ConcurrentBlockingQueue	typeref:typename:std::queue<T>
file	torch7\\lib\\TH\\THDiskFile.c	/^    THFile file;$/;"	m	struct:THDiskFile__	typeref:typename:THFile	file:
file	torch7\\lib\\TH\\THMemoryFile.c	/^    THFile file;$/;"	m	struct:THMemoryFile__	typeref:typename:THFile	file:
file_offset_	dmlc-core\\src\\io\\input_split_base.h	/^  std::vector<size_t> file_offset_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:std::vector<size_t>
file_ptr_	dmlc-core\\src\\io\\input_split_base.h	/^  size_t file_ptr_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:size_t
file_ptr_end_	dmlc-core\\src\\io\\input_split_base.h	/^  size_t file_ptr_end_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:size_t
filename	torch7\\lib\\TH\\THAllocator.c	/^  char *filename; \/* file name *\/$/;"	m	struct:THMapAllocatorContext_	typeref:typename:char *	file:
files_	dmlc-core\\src\\io\\input_split_base.h	/^  std::vector<FileInfo> files_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:std::vector<FileInfo>
filesys_	dmlc-core\\src\\io\\input_split_base.h	/^  FileSystem *filesys_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:FileSystem *
fillIdx	torch7\\test\\test.lua	/^local function fillIdx(idx, dim, dim_size, elems_per_row, m, n, o)$/;"	f
fill_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(fill_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
fillmem	lua\\ltests.c	/^#define fillmem(/;"	d	file:
filter	lua\\testes\\coroutine.lua	/^function filter (p, g)$/;"	f
filterpc	lua\\ldebug.c	/^static int filterpc (int pc, int jmptarget) {$/;"	f	typeref:typename:int	file:
finaltarget	lua\\lcode.c	/^static int finaltarget (Instruction *code, int i) {$/;"	f	typeref:typename:int	file:
find	lua\\testes\\nextvar.lua	/^local function find (name)$/;"	f
find1	lua\\testes\\nextvar.lua	/^local function find1 (name)$/;"	f
find_lib_path	nnvm\\python\\nnvm\\libinfo.py	/^def find_lib_path():$/;"	f
find_share_ring	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def find_share_ring(self, tree_map, parent_map, r):$/;"	m	class:RabitTracker
findfield	lua\\lauxlib.c	/^static int findfield (lua_State *L, int objidx, int level) {$/;"	f	typeref:typename:int	file:
findfile	lua\\loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	typeref:typename:const char *	file:
findindex	lua\\ltable.c	/^static unsigned int findindex (lua_State *L, Table *t, TValue *key,$/;"	f	typeref:typename:unsigned int	file:
findlabel	lua\\lparser.c	/^static Labeldesc *findlabel (LexState *ls, TString *name) {$/;"	f	typeref:typename:Labeldesc *	file:
findlast	lua\\lgc.c	/^static GCObject **findlast (GCObject **p) {$/;"	f	typeref:typename:GCObject **	file:
findloader	lua\\loadlib.c	/^static void findloader (lua_State *L, const char *name) {$/;"	f	typeref:typename:void	file:
findpcall	lua\\ldo.c	/^static CallInfo *findpcall (lua_State *L) {$/;"	f	typeref:typename:CallInfo *	file:
findsetreg	lua\\ldebug.c	/^static int findsetreg (const Proto *p, int lastpc, int reg) {$/;"	f	typeref:typename:int	file:
findvararg	lua\\ldebug.c	/^static const char *findvararg (CallInfo *ci, int n, StkId *pos) {$/;"	f	typeref:typename:const char *	file:
finishCcall	lua\\ldo.c	/^static void finishCcall (lua_State *L, int status) {$/;"	f	typeref:typename:void	file:
finishbinexpval	lua\\lcode.c	/^static void finishbinexpval (FuncState *fs, expdesc *e1, expdesc *e2,$/;"	f	typeref:typename:void	file:
finishedTasks	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private final Collection<TaskRecord> finishedTasks = new java.util.LinkedList<TaskRecord>();$/;"	f	class:ApplicationMaster	file:
finishgencycle	lua\\lgc.c	/^static void finishgencycle (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
finishpcall	lua\\lbaselib.c	/^static int finishpcall (lua_State *L, int status, lua_KContext extra) {$/;"	f	typeref:typename:int	file:
finishrawget	lua\\lapi.c	/^static int finishrawget (lua_State *L, const TValue *val) {$/;"	f	typeref:typename:int	file:
finobj	lua\\lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
finobjold	lua\\lstate.h	/^  GCObject *finobjold;  \/* list of old objects with finalizers *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
finobjrold	lua\\lstate.h	/^  GCObject *finobjrold;  \/* list of really old objects with finalizers *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
finobjsur	lua\\lstate.h	/^  GCObject *finobjsur;  \/* list of survival objects with finalizers *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
firstgoto	lua\\lparser.c	/^  int firstgoto;  \/* index of first pending goto in this block *\/$/;"	m	struct:BlockCnt	typeref:typename:int	file:
firstlabel	lua\\lparser.c	/^  int firstlabel;  \/* index of first label in this block *\/$/;"	m	struct:BlockCnt	typeref:typename:int	file:
firstlabel	lua\\lparser.h	/^  int firstlabel;  \/* index of first label (in 'dyd->label->arr') *\/$/;"	m	struct:FuncState	typeref:typename:int
firstlocal	lua\\lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState	typeref:typename:int
fitsBx	lua\\lcode.c	/^static int fitsBx (lua_Integer i) {$/;"	f	typeref:typename:int	file:
fitsC	lua\\lcode.c	/^static int fitsC (lua_Integer i) {$/;"	f	typeref:typename:int	file:
fixedgc	lua\\lstate.h	/^  GCObject *fixedgc;  \/* list of objects not to be collected *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
fixforjump	lua\\lparser.c	/^static void fixforjump (FuncState *fs, int pc, int dest, int back) {$/;"	f	typeref:typename:void	file:
fixjump	lua\\lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	typeref:typename:void	file:
flag	torch7\\lib\\TH\\generic\\THStorage.h	/^    char flag;$/;"	m	struct:THStorage	typeref:typename:char
flag	torch7\\lib\\TH\\generic\\THTensor.h	/^    char flag;$/;"	m	struct:THTensor	typeref:typename:char
flags	lua\\lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table	typeref:typename:lu_byte
flags	torch7\\lib\\TH\\THAllocator.c	/^  int flags;$/;"	m	struct:THMapAllocatorContext_	typeref:typename:int	file:
flatten	example\\cifar_resnet.py	/^flatten = tf.nn.flatten_layer(conv2)$/;"	v
flatten	example\\mnist_lenet.py	/^flatten = tf.nn.flatten_layer(pool2)$/;"	v
flib	lua\\liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
float32	python\\tinyflow\\_base.py	/^float32 = 0$/;"	v
floatI	lua\\lcode.c	/^static int floatI (lua_Number f, lua_Integer *fi) {$/;"	f	typeref:typename:int	file:
floatp	src\\c_api.cc	/^  std::vector<const float*> floatp;$/;"	m	struct:TinyAPIThreadLocalEntry	typeref:typename:std::vector<const float * >	file:
fltvalue	lua\\lobject.h	/^#define fltvalue(/;"	d
fltvalueraw	lua\\lobject.h	/^#define fltvalueraw(/;"	d
fmap_	dmlc-core\\include\\dmlc\\registry.h	/^  std::map<std::string, EntryType*> fmap_;$/;"	m	class:dmlc::Registry	typeref:typename:std::map<std::string,EntryType * >
fmap_	nnvm\\include\\dmlc\\registry.h	/^  std::map<std::string, EntryType*> fmap_;$/;"	m	class:dmlc::Registry	typeref:typename:std::map<std::string,EntryType * >
fn	lua\\testes\\gc.lua	/^local function fn (thread)$/;"	f
fo_	dmlc-core\\src\\io\\cached_input_split.h	/^  dmlc::Stream *fo_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:dmlc::Stream *
foo	lua\\testes\\api.lua	/^    local function foo (n)$/;"	f
foo	lua\\testes\\api.lua	/^  local function foo (n)$/;"	f
foo	lua\\testes\\api.lua	/^local function foo () return end$/;"	f
foo	lua\\testes\\attrib.lua	/^  local function foo ()    -- assigining to upvalues$/;"	f
foo	lua\\testes\\attrib.lua	/^  local function foo ()$/;"	f
foo	lua\\testes\\attrib.lua	/^local function foo ()$/;"	f
foo	lua\\testes\\code.lua	/^local function foo ()$/;"	f
foo	lua\\testes\\constructs.lua	/^    local function foo ()$/;"	f
foo	lua\\testes\\coroutine.lua	/^  local function foo ()$/;"	f
foo	lua\\testes\\coroutine.lua	/^function foo ()$/;"	f
foo	lua\\testes\\coroutine.lua	/^function foo (a, ...)$/;"	f
foo	lua\\testes\\coroutine.lua	/^local function foo (i) return coroutine.yield(i) end$/;"	f
foo	lua\\testes\\cstack.lua	/^  foo = function ()$/;"	f
foo	lua\\testes\\cstack.lua	/^  local function foo ()$/;"	f
foo	lua\\testes\\db.lua	/^  local function foo (a, ...) return ... end$/;"	f
foo	lua\\testes\\db.lua	/^  local function foo (a, b, ...)$/;"	f
foo	lua\\testes\\db.lua	/^function foo()$/;"	f
foo	lua\\testes\\db.lua	/^local foo = function (e, l) if l then table.insert(tr, l) end end$/;"	f
foo	lua\\testes\\db.lua	/^local function foo () return (debug.getlocal(1, -1)) end$/;"	f
foo	lua\\testes\\db.lua	/^local function foo (a, ...)$/;"	f
foo	lua\\testes\\db.lua	/^local function foo (a,b,...) local d, e end$/;"	f
foo	lua\\testes\\db.lua	/^local function foo (x)$/;"	f
foo	lua\\testes\\errors.lua	/^testrep("", "function foo () ", "", " end")$/;"	f
foo	lua\\testes\\files.lua	/^  local function foo (name)$/;"	f
foo	lua\\testes\\gc.lua	/^  function foo(x,y)$/;"	f
foo	lua\\testes\\gc.lua	/^  local function foo ()$/;"	f
foo	lua\\testes\\goto.lua	/^local function foo ()$/;"	f
foo	lua\\testes\\heavy.lua	/^  loadrepfunc("function foo () return {0,",$/;"	f
foo	lua\\testes\\locals.lua	/^  foo = function ()$/;"	f
foo	lua\\testes\\locals.lua	/^  foo = function (x)$/;"	f
foo	lua\\testes\\locals.lua	/^  function foo (...)$/;"	f
foo	lua\\testes\\locals.lua	/^  function foo (x)$/;"	f
foo	lua\\testes\\locals.lua	/^  local function foo ()$/;"	f
foo	lua\\testes\\locals.lua	/^  local function foo (err)$/;"	f
foo	lua\\testes\\locals.lua	/^  local function foo (x)$/;"	f
foo	lua\\testes\\nextvar.lua	/^function foo (n, ...)$/;"	f
foo	lua\\testes\\nextvar.lua	/^local function foo (e,i)$/;"	f
foo	lua\\testes\\verybig.lua	/^local function foo ()$/;"	f
foo	torch7\\test\\test_writeObject.lua	/^  foo = function (level)$/;"	f
foo1	lua\\testes\\calls.lua	/^  local function foo1 (...) return foo(...) end$/;"	f
foo1	lua\\testes\\calls.lua	/^  local function foo1 (x) return foo(10, x, x + 1) end$/;"	f
foo1	lua\\testes\\closure.lua	/^  foo1 = function () return a+b end;$/;"	f
foo1	lua\\testes\\nextvar.lua	/^local function foo1 (e,i)$/;"	f
foo2	lua\\testes\\calls.lua	/^  local function foo2 (x) return t(10, x) end$/;"	f
foo2	lua\\testes\\closure.lua	/^  foo2 = function () return b+a end;$/;"	f
foo3	lua\\testes\\closure.lua	/^    foo3 = function () return a+b end;$/;"	f
fopen64	dmlc-core\\include\\dmlc\\base.h	/^#define fopen64 /;"	d
fopen64	dmlc-core\\src\\io\\local_filesys.cc	/^#define fopen64 /;"	d	file:
fopen64	dmlc-core\\src\\io\\single_file_split.h	/^#define fopen64 /;"	d
fopen64	nnvm\\include\\dmlc\\base.h	/^#define fopen64 /;"	d
for_each	dmlc-core\\include\\dmlc\\lua.h	/^inline void for_each(const std::tuple<Args...>& args, F f) {$/;"	f	namespace:dmlc	typeref:typename:void
for_each_dispatcher_	dmlc-core\\include\\dmlc\\lua.h	/^struct for_each_dispatcher_ {$/;"	s	namespace:dmlc
for_each_dispatcher_	dmlc-core\\include\\dmlc\\lua.h	/^struct for_each_dispatcher_<true, I, F, Args...>  {$/;"	s	namespace:dmlc
forbody	lua\\lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isgen) {$/;"	f	typeref:typename:void	file:
forlimit	lua\\lvm.c	/^static int forlimit (lua_State *L, lua_Integer init, const TValue *lim,$/;"	f	typeref:typename:int	file:
forlist	lua\\lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	typeref:typename:void	file:
format	dmlc-core\\src\\data\\csv_parser.h	/^  std::string format;$/;"	m	struct:dmlc::data::CSVParserParam	typeref:typename:std::string
formatStack	torch7\\File.lua	/^local function formatStack(objectNameStack)$/;"	f
fornum	lua\\lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	typeref:typename:void	file:
forstat	lua\\lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
forward_readonly_inputs	src\\op_util.h	/^  uint32_t forward_readonly_inputs;$/;"	m	struct:tinyflow::NNBackwardParam	typeref:typename:uint32_t
fp_	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  hdfsFile fp_;$/;"	m	class:dmlc::io::HDFSStream	typeref:typename:hdfsFile	file:
fp_	dmlc-core\\src\\io\\local_filesys.cc	/^  std::FILE *fp_;$/;"	m	class:dmlc::io::FileStream	typeref:typename:std::FILE *	file:
fp_	dmlc-core\\src\\io\\single_file_split.h	/^  std::FILE *fp_;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:std::FILE *
fread__	torch7\\lib\\TH\\THDiskFile.c	/^#define fread__ /;"	d	file:
fread__	torch7\\lib\\TH\\THDiskFile.c	/^size_t fread__(void *ptr, size_t size, size_t nitems, FILE *stream)$/;"	f	typeref:typename:size_t
frealloc	lua\\lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State	typeref:typename:lua_Alloc
free	torch7\\lib\\TH\\THAllocator.h	/^  void (*free)(void*, void*);$/;"	m	struct:THAllocator	typeref:typename:void (*)(void *,void *)
free	torch7\\lib\\TH\\THFilePrivate.h	/^    void (*free)(THFile *self);$/;"	m	struct:THFileVTable	typeref:typename:void (*)(THFile * self)
free()	torch7\\doc\\storage.md	/^### free() ###$/;"	S
free()	torch7\\doc\\tensor.md	/^### free() ###$/;"	S
freeUnusedContainers	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void freeUnusedContainers($/;"	m	class:ApplicationMaster	file:
free_	nnvm\\src\\pass\\plan_memory.cc	/^  std::multimap<size_t, StorageEntry*> free_;$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:std::multimap<size_t,StorageEntry * >	file:
free_cells_	dmlc-core\\include\\dmlc\\threadediter.h	/^  std::queue<DType*> free_cells_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:std::queue<DType * >
freeblock	lua\\ltests.c	/^static void freeblock (Memcontrol *mc, Header *block) {$/;"	f	typeref:typename:void	file:
freeexp	lua\\lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
freeexps	lua\\lcode.c	/^static void freeexps (FuncState *fs, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void	file:
freehash	lua\\ltable.c	/^static void freehash (lua_State *L, Table *t) {$/;"	f	typeref:typename:void	file:
freelist	lua\\lauxlib.c	/^#define freelist	/;"	d	file:
freeobj	lua\\lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	typeref:typename:void	file:
freereg	lua\\lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	typeref:typename:void	file:
freereg	lua\\lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
freeregs	lua\\lcode.c	/^static void freeregs (FuncState *fs, int r1, int r2) {$/;"	f	typeref:typename:void	file:
freestack	lua\\lstate.c	/^static void freestack (lua_State *L) {$/;"	f	typeref:typename:void	file:
freeupval	lua\\lgc.c	/^static void freeupval (lua_State *L, UpVal *uv) {$/;"	f	typeref:typename:void	file:
fromstate	lua\\lstate.c	/^#define fromstate(/;"	d	file:
fs	lua\\llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:FuncState *
fs_	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  hdfsFS fs_;$/;"	m	class:dmlc::io::HDFSStream	typeref:typename:hdfsFS	file:
fs_	dmlc-core\\src\\io\\hdfs_filesys.h	/^  hdfsFS fs_;$/;"	m	class:dmlc::io::HDFSFileSystem	typeref:typename:hdfsFS
fs_	dmlc-core\\src\\io\\input_split_base.h	/^  SeekStream *fs_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:SeekStream *
fstorage_new_	src\\torch\\torch_util.h	/^  LuaRef fstorage_new_;$/;"	m	class:tinyflow::TorchState	typeref:typename:LuaRef
ftensor_new_	src\\torch\\torch_util.h	/^  LuaRef ftensor_new_;$/;"	m	class:tinyflow::TorchState	typeref:typename:LuaRef
ftensor_new_shared_	src\\torch\\torch_util.h	/^  LuaRef ftensor_new_shared_;$/;"	m	class:tinyflow::TorchState	typeref:typename:LuaRef
ftensor_set_	src\\torch\\torch_util.h	/^  LuaRef ftensor_set_;$/;"	m	class:tinyflow::TorchState	typeref:typename:LuaRef
ftransfer	lua\\lstate.h	/^      unsigned short ftransfer;  \/* offset of first value transfered *\/$/;"	m	struct:CallInfo::__anonad48b566040a::__anonad48b5660508	typeref:typename:unsigned short
ftransfer	lua\\lua.h	/^  unsigned short ftransfer;   \/* (r) index of first value transferred *\/$/;"	m	struct:lua_Debug	typeref:typename:unsigned short
fullgen	lua\\lgc.c	/^static lu_mem fullgen (lua_State *L, global_State *g) {$/;"	f	typeref:typename:lu_mem	file:
fullinc	lua\\lgc.c	/^static void fullinc (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
func	dmlc-core\\include\\dmlc\\json.h	/^    ReadFunction func;$/;"	m	struct:dmlc::JSONObjectReadHelper::Entry	typeref:typename:ReadFunction
func	lua\\lapi.c	/^  StkId func;$/;"	m	struct:CallS	typeref:typename:StkId	file:
func	lua\\lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg	typeref:typename:lua_CFunction
func	lua\\lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo	typeref:typename:StkId
func	nnvm\\include\\dmlc\\json.h	/^    ReadFunction func;$/;"	m	struct:dmlc::JSONObjectReadHelper::Entry	typeref:typename:ReadFunction
func.get_i	torch7\\test\\test_writeObject.lua	/^     func.get_i = function()$/;"	f
func.get_j	torch7\\test\\test_writeObject.lua	/^     func.get_j = function()$/;"	f
func.increment	torch7\\test\\test_writeObject.lua	/^     func.increment = function()$/;"	f
func2close	lua\\testes\\coroutine.lua	/^  local function func2close (f)$/;"	f
func2close	lua\\testes\\locals.lua	/^local function func2close (f)$/;"	f
func_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^  CUfunction func_{nullptr};$/;"	m	class:nnvm::fusion::RTC	typeref:typename:CUfunction
funcargs	lua\\lparser.c	/^static void funcargs (LexState *ls, expdesc *f, int line) {$/;"	f	typeref:typename:void	file:
funcidx	lua\\lstate.h	/^    int funcidx;  \/* called-function index *\/$/;"	m	union:CallInfo::__anonad48b566040a	typeref:typename:int
funcinfo	lua\\ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	typeref:typename:void	file:
funcname	lua\\lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:int	file:
funcnamefromcode	lua\\ldebug.c	/^static const char *funcnamefromcode (lua_State *L, CallInfo *ci,$/;"	f	typeref:typename:const char *	file:
funcs	lua\\lutf8lib.c	/^static const luaL_Reg funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
funcs	lua\\testes\\libs\\lib1.c	/^static const struct luaL_Reg funcs[] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
funcs	lua\\testes\\libs\\lib2.c	/^static const struct luaL_Reg funcs[] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
funcs	lua\\testes\\libs\\lib22.c	/^static const struct luaL_Reg funcs[] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
funcstat	lua\\lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
function	torch7\\lib\\TH\\generic\\simd\\simd.h	/^  void *function;$/;"	m	struct:FunctionDescription	typeref:typename:void *
fusion	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^namespace fusion {$/;"	n	namespace:nnvm
fusion	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^namespace fusion {$/;"	n	namespace:nnvm
fusion	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^namespace fusion {$/;"	n	namespace:nnvm
fusion	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^namespace fusion {$/;"	n	namespace:nnvm	file:
fusion	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^namespace fusion {$/;"	n	namespace:nnvm	file:
fusion	nnvm\\plugin\\nnvm-fusion\\src\\internal.h	/^namespace fusion {$/;"	n	namespace:nnvm
fusion	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^namespace fusion {$/;"	n	namespace:nnvm	file:
fvalue	lua\\lobject.h	/^#define fvalue(/;"	d
fvalueraw	lua\\lobject.h	/^#define fvalueraw(/;"	d
g	lua\\lstate.c	/^  global_State g;$/;"	m	struct:LG	typeref:typename:global_State	file:
g	lua\\testes\\calls.lua	/^local function g (z)$/;"	f
g	lua\\testes\\constructs.lua	/^function g (a,b,c,d,e)$/;"	f
g	lua\\testes\\constructs.lua	/^function g() f(); return; end;$/;"	f
g	lua\\testes\\constructs.lua	/^function g() return nil or f() end$/;"	f
g	lua\\testes\\constructs.lua	/^function g(i)$/;"	f
g	lua\\testes\\coroutine.lua	/^function g(x) return x[1]*2 end$/;"	f
g	lua\\testes\\db.lua	/^  function g(x) if not x then return 3 end return (x('a', 'x')) end$/;"	f
g	lua\\testes\\db.lua	/^  local g = {x = function ()$/;"	f
g	lua\\testes\\db.lua	/^function g (...)$/;"	f
g	lua\\testes\\db.lua	/^function g(a,b) return (a+1) + f() end$/;"	f
g	lua\\testes\\db.lua	/^function g(x) return f(x) end$/;"	f
g	lua\\testes\\db.lua	/^local function g(x)$/;"	f
g	lua\\testes\\errors.lua	/^  function g() f() end$/;"	f
g	lua\\testes\\errors.lua	/^  local function g(x)$/;"	f
g	lua\\testes\\vararg.lua	/^  local function g() return f(1,2) end$/;"	f
g	lua\\testes\\vararg.lua	/^function g(a,b,c)$/;"	f
g1	lua\\testes\\db.lua	/^function g1(x) g(x) end$/;"	f
g_iofile	lua\\liolib.c	/^static int g_iofile (lua_State *L, const char *f, const char *mode) {$/;"	f	typeref:typename:int	file:
g_read	lua\\liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	typeref:typename:int	file:
g_write	lua\\liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	typeref:typename:int	file:
gc	lua\\lobject.h	/^  struct GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value	typeref:struct:GCObject *
gc	lua\\lstate.h	/^  GCObject gc;  \/* common header *\/$/;"	m	union:GCUnion	typeref:typename:GCObject
gc	lua\\testes\\locals.lua	/^    local <toclose> gc = func2close(function () collectgarbage() end)$/;"	f
gc_age	lua\\ltests.c	/^static int gc_age (lua_State *L) {$/;"	f	typeref:typename:int	file:
gc_color	lua\\ltests.c	/^static int gc_color (lua_State *L) {$/;"	f	typeref:typename:int	file:
gc_printobj	lua\\ltests.c	/^static int gc_printobj (lua_State *L) {$/;"	f	typeref:typename:int	file:
gc_state	lua\\ltests.c	/^static int gc_state (lua_State *L) {$/;"	f	typeref:typename:int	file:
gcemergency	lua\\lstate.h	/^  lu_byte gcemergency;  \/* true if this is an emergency collection *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcinfo	lua\\testes\\gc.lua	/^local function gcinfo ()$/;"	f
gckey	lua\\lobject.h	/^#define gckey(/;"	d
gckeyN	lua\\lobject.h	/^#define gckeyN(/;"	d
gckind	lua\\lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gclist	lua\\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto	typeref:typename:GCObject *
gclist	lua\\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table	typeref:typename:GCObject *
gclist	lua\\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Udata	typeref:typename:GCObject *
gclist	lua\\lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State	typeref:typename:GCObject *
gco2ccl	lua\\lstate.h	/^#define gco2ccl(/;"	d
gco2cl	lua\\lstate.h	/^#define gco2cl(/;"	d
gco2lcl	lua\\lstate.h	/^#define gco2lcl(/;"	d
gco2p	lua\\lstate.h	/^#define gco2p(/;"	d
gco2t	lua\\lstate.h	/^#define gco2t(/;"	d
gco2th	lua\\lstate.h	/^#define gco2th(/;"	d
gco2ts	lua\\lstate.h	/^#define gco2ts(/;"	d
gco2u	lua\\lstate.h	/^#define gco2u(/;"	d
gco2upv	lua\\lstate.h	/^#define gco2upv(/;"	d
gcpause	lua\\lstate.h	/^  lu_byte gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcrunning	lua\\lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcstate	lua\\lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcstepmul	lua\\lstate.h	/^  lu_byte gcstepmul;  \/* GC "speed" *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcstepsize	lua\\lstate.h	/^  lu_byte gcstepsize;  \/* (log2 of) GC granularity *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gctm	lua\\loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	typeref:typename:int	file:
gcvalue	lua\\lobject.h	/^#define gcvalue(/;"	d
gcvalueN	lua\\lgc.c	/^#define gcvalueN(/;"	d	file:
gcvalueraw	lua\\lobject.h	/^#define gcvalueraw(/;"	d
gen	lua\\testes\\coroutine.lua	/^function gen (n)$/;"	f
gen	lua\\testes\\literals.lua	/^local function gen (c, n)$/;"	f
gen:test	torch7\\test\\test_writeObject.lua	/^   function gen:test()$/;"	f
genDummyTest	torch7\\test\\test_Tester.lua	/^local function genDummyTest(numSuccess, numFailure, hasError)$/;"	f
generate_doxygen_xml	dmlc-core\\doc\\conf.py	/^def generate_doxygen_xml(app):$/;"	f
generic_reader	lua\\lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
genmajormul	lua\\lstate.h	/^  lu_byte genmajormul;  \/* control for major generational collections *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
genminormul	lua\\lstate.h	/^  lu_byte genminormul;  \/* control for minor generational collections *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
genstep	lua\\lgc.c	/^static void genstep (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
geqrfInPlace	torch7\\test\\test_qr.lua	/^local function geqrfInPlace(tensorFunc)$/;"	f
get	dmlc-core\\include\\dmlc\\any.h	/^inline T& get(any& src) { \/\/ NOLINT(*)$/;"	f	namespace:dmlc	typeref:typename:T &
get	dmlc-core\\include\\dmlc\\any.h	/^inline const T& get(const any& src) {$/;"	f	namespace:dmlc	typeref:typename:const T &
get	dmlc-core\\include\\dmlc\\memory.h	/^  inline T* get() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:T *
get	dmlc-core\\src\\data\\strtonum.h	/^  static inline float get(const char * begin, const char * end) {$/;"	f	class:dmlc::data::Str2T	typeref:typename:float
get	dmlc-core\\src\\data\\strtonum.h	/^  static inline int32_t get(const char * begin, const char * end) {$/;"	f	class:dmlc::data::Str2T	typeref:typename:int32_t
get	dmlc-core\\src\\data\\strtonum.h	/^  static inline int64_t get(const char * begin, const char * end) {$/;"	f	class:dmlc::data::Str2T	typeref:typename:int64_t
get	dmlc-core\\src\\data\\strtonum.h	/^  static inline uint32_t get(const char * begin, const char * end) {$/;"	f	class:dmlc::data::Str2T	typeref:typename:uint32_t
get	dmlc-core\\src\\data\\strtonum.h	/^  static inline uint64_t get(const char * begin, const char * end) {$/;"	f	class:dmlc::data::Str2T	typeref:typename:uint64_t
get	lua\\testes\\closure.lua	/^          get = function () return i, k end}$/;"	f
get	nnvm\\include\\dmlc\\any.h	/^inline T& get(any& src) { \/\/ NOLINT(*)$/;"	f	namespace:dmlc	typeref:typename:T &
get	nnvm\\include\\dmlc\\any.h	/^inline const T& get(const any& src) {$/;"	f	namespace:dmlc	typeref:typename:const T &
get	nnvm\\include\\dmlc\\memory.h	/^  inline T* get() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:T *
get	nnvm\\include\\nnvm\\op.h	/^inline const ValueType& OpMap<ValueType>::get(const Op* op, const ValueType& def_value) const {$/;"	f	class:nnvm::OpMap	typeref:typename:const ValueType &
get	nnvm\\include\\nnvm\\tuple.h	/^  inline mshadow::Shape<dim> get() const {$/;"	f	class:nnvm::TShape	typeref:typename:mshadow::Shape<dim>
get	nnvm\\python\\nnvm\\attribute.py	/^    def get(self, attr):$/;"	m	class:AttrScope
get	nnvm\\python\\nnvm\\name.py	/^    def get(self, name, hint):$/;"	m	class:NameManager
get	nnvm\\python\\nnvm\\name.py	/^    def get(self, name, hint):$/;"	m	class:Prefix
getAllocSize	torch7\\lib\\TH\\THGeneral.c	/^static ptrdiff_t getAllocSize(void *ptr) {$/;"	f	typeref:typename:ptrdiff_t	file:
getCcalls	lua\\lstate.h	/^#define getCcalls(/;"	d
getEnvInteger	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int getEnvInteger(String name, boolean required, int defv)$/;"	m	class:ApplicationMaster	file:
getEnvironment	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private Map<String, String> getEnvironment() {$/;"	m	class:Client	file:
getF	lua\\lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
getMatchingNames	torch7\\Tester.lua	/^   local function getMatchingNames(pattern)$/;"	f
getMessage	torch7\\Tester.lua	/^local function getMessage(message, ...)$/;"	f
getOpMode	lua\\lopcodes.h	/^#define getOpMode(/;"	d
getProgress	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public float getProgress() {$/;"	m	class:ApplicationMaster.RMCallbackHandler
getS	lua\\lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
getToleranceAndMessage	torch7\\Tester.lua	/^local function getToleranceAndMessage(defaultTolerance, ...)$/;"	f
get_cache_file_set	dmlc-core\\tracker\\dmlc_tracker\\opts.py	/^def get_cache_file_set(args):$/;"	f
get_cifar10	python\\tinyflow\\datasets.py	/^def get_cifar10(swap_axes=False):$/;"	f
get_env	dmlc-core\\tracker\\dmlc_tracker\\ssh.py	/^def get_env(pass_envs):$/;"	f
get_family	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^def get_family(addr):$/;"	f
get_header_guard_dmlc	dmlc-core\\scripts\\lint.py	/^def get_header_guard_dmlc(filename):$/;"	f
get_header_guard_dmlc	dmlc-core\\scripts\\lint3.py	/^def get_header_guard_dmlc(filename):$/;"	f
get_host_ip	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^def get_host_ip(hostIP=None):$/;"	f
get_index	dmlc-core\\include\\dmlc\\data.h	/^  inline IndexType get_index(size_t i) const {$/;"	f	class:dmlc::Row	typeref:typename:IndexType
get_internals	nnvm\\python\\nnvm\\symbol.py	/^    def get_internals(self):$/;"	m	class:Symbol
get_limits	lua\\ltests.c	/^static int get_limits (lua_State *L) {$/;"	f	typeref:typename:int	file:
get_link_map	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def get_link_map(self, nslave):$/;"	m	class:RabitTracker
get_memory_mb	dmlc-core\\tracker\\dmlc_tracker\\opts.py	/^def get_memory_mb(mem_str):$/;"	f
get_mnist	python\\tinyflow\\datasets.py	/^def get_mnist(flatten=False, onehot=False):$/;"	f
get_mpi_env	dmlc-core\\tracker\\dmlc_tracker\\mpi.py	/^def get_mpi_env(envs):$/;"	f
get_neighbor	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def get_neighbor(rank, nslave):$/;"	m	class:RabitTracker
get_num_inputs	nnvm\\include\\nnvm\\op.h	/^  std::function<uint32_t(const NodeAttrs& attrs)> get_num_inputs = nullptr;$/;"	m	class:nnvm::Op	typeref:typename:std::function<uint32_t (const NodeAttrs & attrs)>
get_num_outputs	nnvm\\include\\nnvm\\op.h	/^  std::function<uint32_t(const NodeAttrs& attrs)> get_num_outputs = nullptr;$/;"	m	class:nnvm::Op	typeref:typename:std::function<uint32_t (const NodeAttrs & attrs)>
get_onecapture	lua\\lstrlib.c	/^static size_t get_onecapture (MatchState *ms, int i, const char *s,$/;"	f	typeref:typename:size_t	file:
get_opts	dmlc-core\\tracker\\dmlc_tracker\\opts.py	/^def get_opts(args=None):$/;"	f
get_prompt	lua\\lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	typeref:typename:const char *	file:
get_ptr	dmlc-core\\include\\dmlc\\any.h	/^  inline static T* get_ptr(any::Data* data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:T *
get_ptr	dmlc-core\\include\\dmlc\\any.h	/^  inline static T* get_ptr(any::Data* data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:T *
get_ptr	dmlc-core\\include\\dmlc\\any.h	/^  inline static const T* get_ptr(const any::Data* data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:const T *
get_ptr	dmlc-core\\include\\dmlc\\any.h	/^  inline static const T* get_ptr(const any::Data* data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:const T *
get_ptr	nnvm\\include\\dmlc\\any.h	/^  inline static T* get_ptr(any::Data* data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:T *
get_ptr	nnvm\\include\\dmlc\\any.h	/^  inline static T* get_ptr(any::Data* data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:T *
get_ptr	nnvm\\include\\dmlc\\any.h	/^  inline static const T* get_ptr(const any::Data* data) {$/;"	f	class:dmlc::any::TypeOnHeap	typeref:typename:const T *
get_ptr	nnvm\\include\\dmlc\\any.h	/^  inline static const T* get_ptr(const any::Data* data) {$/;"	f	class:dmlc::any::TypeOnStack	typeref:typename:const T *
get_ring	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def get_ring(self, tree_map, parent_map):$/;"	m	class:RabitTracker
get_some_ip	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^def get_some_ip(host):$/;"	f
get_tree	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def get_tree(self, nslave):$/;"	m	class:RabitTracker
get_type	dmlc-core\\include\\dmlc\\any.h	/^  inline static const Type* get_type() {$/;"	f	class:dmlc::any::TypeInfo	typeref:typename:const Type *
get_type	nnvm\\include\\dmlc\\any.h	/^  inline static const Type* get_type() {$/;"	f	class:dmlc::any::TypeInfo	typeref:typename:const Type *
get_value	dmlc-core\\include\\dmlc\\data.h	/^  inline real_t get_value(size_t i) const {$/;"	f	class:dmlc::Row	typeref:typename:real_t
get_with_default	nnvm\\src\\pass\\order_mutation.cc	/^inline T get_with_default(const std::unordered_map<Node*, T> &map,$/;"	f	namespace:nnvm::pass::__anonfe8061970110	typeref:typename:T
getage	lua\\lgc.h	/^#define getage(/;"	d
getarg	lua\\lopcodes.h	/^#define getarg(/;"	d
getbaseline	lua\\ldebug.c	/^static int getbaseline (const Proto *f, int pc, int *basepc) {$/;"	f	typeref:typename:int	file:
getbinopr	lua\\lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	typeref:typename:BinOpr	file:
getboolfield	lua\\loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	typeref:typename:int	file:
getbuff	lua\\lobject.c	/^static char *getbuff (BuffFS *buff, int sz) {$/;"	f	typeref:typename:char *	file:
getco	lua\\lcorolib.c	/^static lua_State *getco (lua_State *L) {$/;"	f	typeref:typename:lua_State *	file:
getdetails	lua\\lstrlib.c	/^static KOption getdetails (Header *h, size_t totalsize,$/;"	f	typeref:typename:KOption	file:
getendpos	lua\\lstrlib.c	/^static size_t getendpos (lua_State *L, int arg, lua_Integer def,$/;"	f	typeref:typename:size_t	file:
getenv	lua\\testes\\locals.lua	/^local function getenv (f)$/;"	f
getfield	lua\\loslib.c	/^static int getfield (lua_State *L, const char *key, int d, int delta) {$/;"	f	typeref:typename:int	file:
getfreepos	lua\\ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	typeref:typename:Node *	file:
getfuncname	lua\\ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	typeref:typename:const char *	file:
getgclist	lua\\lgc.c	/^static GCObject **getgclist (GCObject *o) {$/;"	f	typeref:typename:GCObject **	file:
getgcparam	lua\\lgc.h	/^#define getgcparam(/;"	d
getgeneric	lua\\ltable.c	/^static const TValue *getgeneric (Table *t, const TValue *key) {$/;"	f	typeref:typename:const TValue *	file:
gethexa	lua\\llex.c	/^static int gethexa (LexState *ls) {$/;"	f	typeref:typename:int	file:
getindex	lua\\ltests.c	/^#define getindex	/;"	d	file:
getindex_aux	lua\\ltests.c	/^static int getindex_aux (lua_State *L, lua_State *L1, const char **pc) {$/;"	f	typeref:typename:int	file:
getinstruction	lua\\lcode.h	/^#define getinstruction(/;"	d
getiofile	lua\\liolib.c	/^static FILE *getiofile (lua_State *L, const char *findex) {$/;"	f	typeref:typename:FILE *	file:
getjump	lua\\lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	typeref:typename:int	file:
getjumpcontrol	lua\\lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	typeref:typename:Instruction *	file:
getlocalvardesc	lua\\lparser.c	/^static Vardesc *getlocalvardesc (FuncState *fs, int i) {$/;"	f	typeref:typename:Vardesc *	file:
getlock	lua\\ltests.h	/^#define getlock(/;"	d
getlocvar	lua\\lparser.c	/^static LocVar *getlocvar (FuncState *fs, int i) {$/;"	f	typeref:typename:LocVar *	file:
getmetamethod	torch7\\File.lua	/^local function getmetamethod(obj, name)$/;"	f
getnextfilename	lua\\loadlib.c	/^static const char *getnextfilename (char **path, char *end) {$/;"	f	typeref:typename:const char *	file:
getnodekey	lua\\lobject.h	/^#define getnodekey(/;"	d
getnum	lua\\lstrlib.c	/^static int getnum (const char **fmt, int df) {$/;"	f	typeref:typename:int	file:
getnum	lua\\ltests.c	/^#define getnum	/;"	d	file:
getnum_aux	lua\\ltests.c	/^static int getnum_aux (lua_State *L, lua_State *L1, const char **pc) {$/;"	f	typeref:typename:int	file:
getnumlimit	lua\\lstrlib.c	/^static int getnumlimit (Header *h, const char **fmt, int df) {$/;"	f	typeref:typename:int	file:
getoah	lua\\lstate.h	/^#define getoah(/;"	d
getobjname	lua\\ldebug.c	/^static const char *getobjname (const Proto *p, int lastpc, int reg,$/;"	f	typeref:typename:const char *	file:
getoption	lua\\lstrlib.c	/^static KOption getoption (Header *h, const char **fmt, int *size) {$/;"	f	typeref:typename:KOption	file:
getoutput	lua\\testes\\main.lua	/^local function getoutput ()$/;"	f
getproto	lua\\lobject.h	/^#define getproto(/;"	d
getref	lua\\ltests.c	/^static int getref (lua_State *L) {$/;"	f	typeref:typename:int	file:
getstate	lua\\ltests.c	/^static lua_State *getstate (lua_State *L) {$/;"	f	typeref:typename:lua_State *	file:
getstr	lua\\lobject.h	/^#define getstr(/;"	d
getstring	lua\\ltests.c	/^#define getstring	/;"	d	file:
getstring_aux	lua\\ltests.c	/^static const char *getstring_aux (lua_State *L, char *buff, const char **pc) {$/;"	f	typeref:typename:const char *	file:
gettable	lua\\lapi.c	/^static Table *gettable (lua_State *L, int idx) {$/;"	f	typeref:typename:Table *	file:
gettext	dmlc-core\\doc\\Makefile	/^gettext:$/;"	t
getthread	lua\\ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	typeref:typename:lua_State *	file:
gettoclose	lua\\testes\\files.lua	/^  local function gettoclose (lv)$/;"	f
gettotalbytes	lua\\lstate.h	/^#define gettotalbytes(/;"	d
getudatamem	lua\\lobject.h	/^#define getudatamem(/;"	d
getunopr	lua\\lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	typeref:typename:UnOpr	file:
getupvalname	lua\\ldebug.c	/^static const char *getupvalname (CallInfo *ci, const TValue *o,$/;"	f	typeref:typename:const char *	file:
getupvalref	lua\\lapi.c	/^static UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {$/;"	f	typeref:typename:UpVal **	file:
getupvalues	lua\\testes\\db.lua	/^local function getupvalues (f)$/;"	f
getvardesc	lua\\lparser.c	/^static Vardesc *getvardesc (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:Vardesc *	file:
gfasttm	lua\\ltm.h	/^#define gfasttm(/;"	d
github_doc_root	dmlc-core\\doc\\conf.py	/^github_doc_root = 'https:\/\/github.com\/dmlc-core\/dmlc-core\/tree\/master\/doc\/'$/;"	v
globalL	lua\\lua.c	/^static lua_State *globalL = NULL;$/;"	v	typeref:typename:lua_State *	file:
global_State	lua\\lstate.h	/^typedef struct global_State {$/;"	s
global_State	lua\\lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
gmatch	lua\\lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	typeref:typename:int	file:
gmatch_aux	lua\\lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	typeref:typename:int	file:
gnext	lua\\ltable.h	/^#define gnext(/;"	d
gnode	lua\\ltable.h	/^#define gnode(/;"	d
gnodelast	lua\\lgc.c	/^#define gnodelast(/;"	d	file:
goo	lua\\testes\\coroutine.lua	/^function goo() foo() end$/;"	f
good_fn	torch7\\test\\test_Tester.lua	/^local function good_fn() end$/;"	f
gotostat	lua\\lparser.c	/^static void gotostat (LexState *ls) {$/;"	f	typeref:typename:void	file:
gpu_init_	src\\torch\\torch_util.h	/^  bool gpu_init_{false};$/;"	m	class:tinyflow::TorchState	typeref:typename:bool
grad	nnvm\\tests\\python\\test_gradient.py	/^def grad(ys, xs, ys_grads):$/;"	f
gradients	python\\tinyflow\\_base.py	/^def gradients(ys, xs, grad_ys=None):$/;"	f
grads	nnvm\\src\\pass\\gradient.cc	/^  std::vector<NodeEntry> grads;$/;"	m	struct:nnvm::pass::__anona60d04f90110::GradEntry	typeref:typename:std::vector<NodeEntry>	file:
grandparent.__newindex	lua\\testes\\events.lua	/^grandparent.__newindex = function(t,k,v) T=t; K=k; V=v end$/;"	f
graph	nnvm\\tests\\python\\test_gradient.py	/^import nnvm.graph as graph$/;"	I
graph	nnvm\\tests\\python\\test_graph.py	/^import nnvm.graph as graph$/;"	I
graph_	src\\session.cc	/^  nnvm::Graph graph_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:nnvm::Graph	file:
graph_attr_dependency	nnvm\\include\\nnvm\\pass.h	/^  std::vector<std::string> graph_attr_dependency;$/;"	m	struct:nnvm::PassFunctionReg	typeref:typename:std::vector<std::string>
graph_attr_targets	nnvm\\include\\nnvm\\pass.h	/^  std::vector<std::string> graph_attr_targets;$/;"	m	struct:nnvm::PassFunctionReg	typeref:typename:std::vector<std::string>
gray	lua\\lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
gray2black	lua\\lgc.h	/^#define gray2black(/;"	d
grayagain	lua\\lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
group	python\\tinyflow\\_base.py	/^def group(*inputs):$/;"	f
group_name	nnvm\\include\\nnvm\\op.h	/^  std::string group_name;$/;"	m	class:nnvm::OpGroup	typeref:typename:std::string
growstrtab	lua\\lstring.c	/^static void growstrtab (lua_State *L, stringtable *tb) {$/;"	f	typeref:typename:void	file:
gsub	lua\\testes\\api.lua	/^local function gsub (a, b, c)$/;"	f
gt	lua\\lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata	typeref:typename:Labellist
gtest	dmlc-core\\scripts\\packages.mk	/^gtest: | ${CACHE_PREFIX}\/include\/gtest$/;"	t
gval	lua\\ltable.h	/^#define gval(/;"	d
gxf	lua\\ldebug.c	/^static const char *gxf (const Proto *p, int pc, Instruction i, int isup) {$/;"	f	typeref:typename:const char *	file:
h	lua\\llex.h	/^  Table *h;  \/* to avoid collection\/reuse strings *\/$/;"	m	struct:LexState	typeref:typename:Table *
h	lua\\lmathlib.c	/^  lu_int32 h;  \/* higher half *\/$/;"	m	struct:Rand64	typeref:typename:lu_int32	file:
h	lua\\lstate.h	/^  struct Table h;$/;"	m	union:GCUnion	typeref:struct:Table
h	lua\\testes\\calls.lua	/^  local h = function () return a end$/;"	f
h	lua\\testes\\calls.lua	/^local function h ()$/;"	f
h	lua\\testes\\constructs.lua	/^function h (a,b,c,d,e)$/;"	f
halfProtect	lua\\lvm.c	/^#define halfProtect(/;"	d	file:
handle	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^        public void handle(Signal signal){$/;"	m	class:Client.CtrlCHandler
handle	nnvm\\python\\nnvm\\cython\\symbol.pyx	/^    def handle(self):$/;"	m	class:SymbolBase
handle	torch7\\lib\\TH\\THDiskFile.c	/^    FILE *handle;$/;"	m	struct:THDiskFile__	typeref:typename:FILE *	file:
handleFailure	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void handleFailure(Collection<ContainerId> failed) {$/;"	m	class:ApplicationMaster	file:
handle_luainit	lua\\lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	typeref:typename:int	file:
handle_script	lua\\lua.c	/^static int handle_script (lua_State *L, char **argv) {$/;"	f	typeref:typename:int	file:
hardtest	lua\\lmem.c	/^#define hardtest(/;"	d	file:
hasError	torch7\\lib\\TH\\THFilePrivate.h	/^    int hasError;$/;"	m	struct:THFile__	typeref:typename:int
has_E	lua\\lua.c	/^#define has_E	/;"	d	file:
has_begin_	dmlc-core\\include\\dmlc\\parameter.h	/^  bool has_begin_, has_end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:bool
has_begin_	nnvm\\include\\dmlc\\parameter.h	/^  bool has_begin_, has_end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:bool
has_default_	dmlc-core\\include\\dmlc\\parameter.h	/^  bool has_default_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:bool
has_default_	nnvm\\include\\dmlc\\parameter.h	/^  bool has_default_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:bool
has_e	lua\\lua.c	/^#define has_e	/;"	d	file:
has_end_	dmlc-core\\include\\dmlc\\parameter.h	/^  bool has_begin_, has_end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:bool
has_end_	nnvm\\include\\dmlc\\parameter.h	/^  bool has_begin_, has_end_;$/;"	m	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:bool
has_error	lua\\lua.c	/^#define has_error	/;"	d	file:
has_i	lua\\lua.c	/^#define has_i	/;"	d	file:
has_saveload	dmlc-core\\include\\dmlc\\type_traits.h	/^struct has_saveload {$/;"	s	namespace:dmlc
has_saveload	nnvm\\include\\dmlc\\type_traits.h	/^struct has_saveload {$/;"	s	namespace:dmlc
has_v	lua\\lua.c	/^#define has_v	/;"	d	file:
hasbit	bin\\lua\\cwrap\\cinterface.lua	/^local function hasbit(x, p)$/;"	f
hasbit	cwrap\\cinterface.lua	/^local function hasbit(x, p)$/;"	f
hash	lua\\lobject.h	/^  unsigned int hash;$/;"	m	struct:TString	typeref:typename:unsigned int
hash	lua\\lstate.h	/^  TString **hash;$/;"	m	struct:stringtable	typeref:typename:TString **
hash_query	lua\\ltests.c	/^static int hash_query (lua_State *L) {$/;"	f	typeref:typename:int	file:
hash_search	lua\\ltable.c	/^static lua_Unsigned hash_search (Table *t, lua_Unsigned j) {$/;"	f	typeref:typename:lua_Unsigned	file:
hashboolean	lua\\ltable.c	/^#define hashboolean(/;"	d	file:
hashint	lua\\ltable.c	/^#define hashint(/;"	d	file:
hashmod	lua\\ltable.c	/^#define hashmod(/;"	d	file:
hashpointer	lua\\ltable.c	/^#define hashpointer(/;"	d	file:
hashpow2	lua\\ltable.c	/^#define hashpow2(/;"	d	file:
hashstr	lua\\ltable.c	/^#define hashstr(/;"	d	file:
hasjumps	lua\\lcode.c	/^#define hasjumps(/;"	d	file:
hasmultret	lua\\lparser.c	/^#define hasmultret(/;"	d	file:
hastocloseCfunc	lua\\lapi.h	/^#define hastocloseCfunc(/;"	d
haveCPUFeature	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^static int haveCPUFeature(unsigned int feature) {$/;"	f	typeref:typename:int	file:
hdfs_filesys.o	dmlc-core\\Makefile	/^hdfs_filesys.o: src\/io\/hdfs_filesys.cc$/;"	t
head	dmlc-core\\include\\dmlc\\parameter.h	/^  inline PType *head() const {$/;"	f	struct:dmlc::Parameter	typeref:typename:PType *
head	nnvm\\include\\dmlc\\parameter.h	/^  inline PType *head() const {$/;"	f	struct:dmlc::Parameter	typeref:typename:PType *
head_	dmlc-core\\include\\dmlc\\memory.h	/^  LinkedList* head_{nullptr};$/;"	m	class:dmlc::MemoryPool	typeref:typename:LinkedList *
head_	nnvm\\include\\dmlc\\memory.h	/^  LinkedList* head_{nullptr};$/;"	m	class:dmlc::MemoryPool	typeref:typename:LinkedList *
header_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string header_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:std::string	file:
heads	nnvm\\src\\pass\\saveload_json.cc	/^  std::vector<JSONNode::Entry> heads;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONGraph	typeref:typename:std::vector<JSONNode::Entry>	file:
heapDelta	torch7\\lib\\TH\\THGeneral.c	/^static __thread ptrdiff_t heapDelta = 0;$/;"	v	typeref:typename:__thread ptrdiff_t	file:
heapMaxDelta	torch7\\lib\\TH\\THGeneral.c	/^static const ptrdiff_t heapMaxDelta = (ptrdiff_t)1e6; \/\/ limit to +\/- 1MB before updating hea/;"	v	typeref:typename:const ptrdiff_t	file:
heapMinDelta	torch7\\lib\\TH\\THGeneral.c	/^static const ptrdiff_t heapMinDelta = (ptrdiff_t)-1e6;$/;"	v	typeref:typename:const ptrdiff_t	file:
heapSize	torch7\\lib\\TH\\THGeneral.c	/^static ptrdiff_t heapSize = 0;$/;"	v	typeref:typename:ptrdiff_t	file:
heapSoftmax	torch7\\lib\\TH\\THGeneral.c	/^static __thread ptrdiff_t heapSoftmax = (ptrdiff_t)3e8; \/\/ 300MB, adjusted upward dynamically$/;"	v	typeref:typename:__thread ptrdiff_t	file:
heapSoftmaxGrowthFactor	torch7\\lib\\TH\\THGeneral.c	/^static const double heapSoftmaxGrowthFactor = 1.4; \/\/ grow softmax by 40%$/;"	v	typeref:typename:const double	file:
heapSoftmaxGrowthThresh	torch7\\lib\\TH\\THGeneral.c	/^static const double heapSoftmaxGrowthThresh = 0.8; \/\/ grow softmax if >80% max after GC$/;"	v	typeref:typename:const double	file:
help	dmlc-core\\doc\\Makefile	/^help:$/;"	t
helpname	bin\\lua\\cwrap\\types.lua	/^      helpname = function(arg)$/;"	f
helpname	bin\\lua\\cwrap\\types.lua	/^   helpname = function(arg)$/;"	f
helpname	cwrap\\types.lua	/^      helpname = function(arg)$/;"	f
helpname	cwrap\\types.lua	/^   helpname = function(arg)$/;"	f
helpname	torch7\\torchcwrap.lua	/^      helpname = function(arg)$/;"	f
helpname	torch7\\torchcwrap.lua	/^   helpname = function(arg)$/;"	f
helpname	torch7\\torchcwrap.lua	/^  helpname = function(arg)$/;"	f
helpname(arg)	cwrap\\doc\\usertypes.md	/^### helpname(arg) ###$/;"	S
hfunc	lua\\testes\\api.lua	/^local hfunc = string.gmatch("", "")    -- a "heavy C function" (with upvalues)$/;"	f
hnext	lua\\lobject.h	/^    struct TString *hnext;  \/* linked list for hash table *\/$/;"	m	union:TString::__anon4faed11c010a	typeref:struct:TString *
hook	lua\\lstate.h	/^  volatile lua_Hook hook;$/;"	m	struct:lua_State	typeref:typename:volatile lua_Hook
hook	lua\\testes\\db.lua	/^  local function hook (event)$/;"	f
hook	torch7\\File.lua	/^   hook = hook or function(object) return object end$/;"	f
hook	torch7\\test\\test_writeObject.lua	/^   local hook = function(object)$/;"	f
hookcount	lua\\lstate.h	/^  int hookcount;$/;"	m	struct:lua_State	typeref:typename:int
hookf	lua\\ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
hookmask	lua\\lstate.h	/^  l_signalT hookmask;$/;"	m	struct:lua_State	typeref:typename:l_signalT
host	dmlc-core\\src\\io\\filesys.h	/^  std::string host;$/;"	m	struct:dmlc::io::URI	typeref:typename:std::string
html	dmlc-core\\doc\\Makefile	/^html:$/;"	t
html_static_path	dmlc-core\\doc\\conf.py	/^html_static_path = ['_static']$/;"	v
htmlhelp	dmlc-core\\doc\\Makefile	/^htmlhelp:$/;"	t
htmlhelp_basename	dmlc-core\\doc\\conf.py	/^htmlhelp_basename = project + 'doc'$/;"	v
hugeid	lua\\testes\\heavy.lua	/^function hugeid ()$/;"	f
hvalue	lua\\lobject.h	/^#define hvalue(/;"	d
i	lua\\llex.h	/^  lua_Integer i;$/;"	m	union:__anon59ab1eae010a	typeref:typename:lua_Integer
i	lua\\lobject.h	/^  lua_Integer i;   \/* integer numbers *\/$/;"	m	union:Value	typeref:typename:lua_Integer
i	lua\\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon7d795870030a	typeref:typename:lua_Integer	file:
i	lua\\testes\\closure.lua	/^for i = 1, 5 do  a[i] = function (x) return i + a + _ENV end  end$/;"	f
i	lua\\testes\\errors.lua	/^checkmessage("for i = 1, 10, print do end", "function")$/;"	f
i	torch7\\Tensor.lua	/^    tensor:apply(function(i) table.insert(result, i) end)$/;"	f
i	torch7\\lib\\TH\\THDiskFile.c	/^      size_t i;$/;"	v	typeref:typename:size_t
i	torch7\\lib\\TH\\THDiskFile.c	/^    size_t i;$/;"	v	typeref:typename:size_t
iABC	lua\\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx, isJ};  \/* basic instruction formats *\/$/;"	e	enum:OpMode
iABx	lua\\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx, isJ};  \/* basic instruction formats *\/$/;"	e	enum:OpMode
iAsBx	lua\\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx, isJ};  \/* basic instruction formats *\/$/;"	e	enum:OpMode
iAx	lua\\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx, isJ};  \/* basic instruction formats *\/$/;"	e	enum:OpMode
i_ci	lua\\lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:CallInfo *
i_val	lua\\lobject.h	/^  TValue i_val;  \/* direct access to node's value as a proper 'TValue' *\/$/;"	m	union:Node	typeref:typename:TValue
id	lua\\testes\\libs\\lib1.c	/^static int id (lua_State *L) {$/;"	f	typeref:typename:int	file:
id	lua\\testes\\libs\\lib2.c	/^static int id (lua_State *L) {$/;"	f	typeref:typename:int	file:
id	lua\\testes\\libs\\lib22.c	/^static int id (lua_State *L) {$/;"	f	typeref:typename:int	file:
id	nnvm\\src\\pass\\plan_memory.cc	/^    StorageID id;$/;"	m	struct:nnvm::pass::__anon235b49ae0110::GraphAllocator::StorageEntry	typeref:typename:StorageID	file:
idx	lua\\lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc	typeref:typename:lu_byte
idx	lua\\lparser.h	/^      lu_byte idx;  \/* index of the variable *\/$/;"	m	struct:expdesc::__anon029e1592020a::__anon029e15920408	typeref:typename:lu_byte
idx	lua\\lparser.h	/^      short idx;  \/* index (R or "long" K) *\/$/;"	m	struct:expdesc::__anon029e1592020a::__anon029e15920308	typeref:typename:short
idx	lua\\lparser.h	/^  short idx;  \/* index of the variable in the Proto's 'locvars' array *\/$/;"	m	struct:Vardesc	typeref:typename:short
idx_	nnvm\\src\\pass\\plan_memory.cc	/^  const IndexedGraph* idx_;$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:const IndexedGraph *	file:
ifstat	lua\\lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
import	lua\\testes\\attrib.lua	/^local function import(...)$/;"	f
incXCcalls	lua\\lstate.h	/^#define incXCcalls(/;"	d
incd	lua\\testes\\math.lua	/^  local function incd (n)$/;"	f
inclinenumber	lua\\llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	typeref:typename:void	file:
include	nnvm\\src\\core\\op.cc	/^Op& Op::include(const std::string& group_name) {$/;"	f	class:nnvm::Op	typeref:typename:Op &
include	torch7\\init.lua	/^local function include(file, depth)$/;"	f
incnny	lua\\lstate.h	/^#define incnny(/;"	d
incomplete	lua\\lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
incstep	lua\\lgc.c	/^static void incstep (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
ind	lua\\lparser.h	/^    } ind;$/;"	m	union:expdesc::__anon029e1592020a	typeref:struct:expdesc::__anon029e1592020a::__anon029e15920308
index	dmlc-core\\include\\dmlc\\data.h	/^  const IndexType *index;$/;"	m	class:dmlc::Row	typeref:typename:const IndexType *
index	dmlc-core\\include\\dmlc\\data.h	/^  const IndexType *index;$/;"	m	struct:dmlc::RowBlock	typeref:typename:const IndexType *
index	dmlc-core\\src\\data\\row_block.h	/^  std::vector<IndexType> index;$/;"	m	struct:dmlc::data::RowBlockContainer	typeref:typename:std::vector<IndexType>
index	nnvm\\include\\nnvm\\graph.h	/^    uint32_t index;$/;"	m	struct:nnvm::IndexedGraph::NodeEntry	typeref:typename:uint32_t
index	nnvm\\include\\nnvm\\node.h	/^  uint32_t index;$/;"	m	struct:nnvm::NodeEntry	typeref:typename:uint32_t
index	nnvm\\src\\pass\\saveload_json.cc	/^    uint32_t index;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONNode::Entry	typeref:typename:uint32_t	file:
index2stack	lua\\lapi.c	/^static StkId index2stack (lua_State *L, int idx) {$/;"	f	typeref:typename:StkId	file:
index2value	lua\\lapi.c	/^static TValue *index2value (lua_State *L, int idx) {$/;"	f	typeref:typename:TValue *	file:
index_	dmlc-core\\include\\dmlc\\config.h	/^    size_t index_;$/;"	m	class:dmlc::Config::ConfigIterator	typeref:typename:size_t
index_	dmlc-core\\include\\dmlc\\parameter.h	/^  size_t index_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:size_t
index_	nnvm\\include\\dmlc\\parameter.h	/^  size_t index_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:size_t
index_	nnvm\\include\\nnvm\\op.h	/^  uint32_t index_{0};$/;"	m	class:nnvm::Op	typeref:typename:uint32_t
index_t	dmlc-core\\include\\dmlc\\data.h	/^typedef unsigned index_t;$/;"	t	namespace:dmlc	typeref:typename:unsigned
index_t	nnvm\\include\\nnvm\\tuple.h	/^typedef uint32_t index_t;$/;"	t	namespace:nnvm	typeref:typename:uint32_t
index_t	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^typedef unsigned index_t;$/;"	t	namespace:nnvm::fusion	typeref:typename:unsigned
indexed_graph	nnvm\\src\\core\\graph.cc	/^const IndexedGraph& Graph::indexed_graph() {$/;"	f	class:nnvm::Graph	typeref:typename:const IndexedGraph &
indexed_graph_	nnvm\\include\\nnvm\\graph.h	/^  std::shared_ptr<const IndexedGraph> indexed_graph_;$/;"	m	class:nnvm::Graph	typeref:typename:std::shared_ptr<const IndexedGraph>
infer_variable_shapes	python\\tinyflow\\_util.py	/^def infer_variable_shapes(net, feed_dict):$/;"	f
info	dmlc-core\\doc\\Makefile	/^info:$/;"	t
info	lua\\lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anon029e1592020a	typeref:typename:int
info_arch	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_language_dialect_default	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	typeref:typename:const char *
info_platform	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_size	bin\\CMakeFiles\\CheckTypeSize\\SIZE_OF_VOIDP.c	/^char info_size[] =  {'I', 'N', 'F', 'O', ':', 's','i','z','e','[',$/;"	v	typeref:typename:char[]
info_version	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
init	bin\\lua\\cwrap\\types.lua	/^      init = function(arg)$/;"	f
init	bin\\lua\\cwrap\\types.lua	/^   init = function(arg)$/;"	f
init	cwrap\\types.lua	/^      init = function(arg)$/;"	f
init	cwrap\\types.lua	/^   init = function(arg)$/;"	f
init	lua\\lauxlib.h	/^  } init;$/;"	m	struct:luaL_Buffer	typeref:union:luaL_Buffer::__anon3bd1912a010a
init	lua\\lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon7d7958700108	typeref:typename:const char *	file:
init	torch7\\TensorMath.lua	/^          init=function(arg)$/;"	f
init	torch7\\torchcwrap.lua	/^      init = function(arg)$/;"	f
init	torch7\\torchcwrap.lua	/^   init = function(arg)$/;"	f
init	torch7\\torchcwrap.lua	/^  init = function(arg)$/;"	f
init(arg)	cwrap\\doc\\usertypes.md	/^### init(arg) ###$/;"	S
initArgs	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private void initArgs(String args[]) throws IOException {$/;"	m	class:ApplicationMaster	file:
initArgs	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private void initArgs(String[] args) {$/;"	m	class:Client	file:
init_exp	lua\\lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	typeref:typename:void	file:
init_registry	lua\\lstate.c	/^static void init_registry (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
init_step	example\\cifar_resnet.py	/^init_step = []$/;"	v
init_step	example\\mnist_lenet.py	/^init_step = []$/;"	v
init_step	example\\mnist_mlp_auto_shape_inference.py	/^init_step = []$/;"	v
init_var	lua\\lparser.c	/^static void init_var (expdesc *e, expkind k, int i) {$/;"	f	typeref:typename:void	file:
initheader	lua\\lstrlib.c	/^static void initheader (lua_State *L, Header *h) {$/;"	f	typeref:typename:void	file:
initialSeed([gen])	torch7\\doc\\random.md	/^### initialSeed([gen]) ###$/;"	S
initialize_all_variables	python\\tinyflow\\_base.py	/^def initialize_all_variables():$/;"	f
initialized	src\\session.cc	/^  inline bool initialized() const {$/;"	f	struct:tinyflow::VarState	typeref:typename:bool	file:
input_entries_	nnvm\\include\\nnvm\\graph.h	/^  std::vector<NodeEntry> input_entries_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::vector<NodeEntry>
input_nodes	nnvm\\include\\nnvm\\graph.h	/^  inline const std::vector<uint32_t>& input_nodes() const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:const std::vector<uint32_t> &
input_nodes_	nnvm\\include\\nnvm\\graph.h	/^  std::vector<uint32_t> input_nodes_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::vector<uint32_t>
input_split_base.o	dmlc-core\\Makefile	/^input_split_base.o: src\/io\/input_split_base.cc$/;"	t
inputs	nnvm\\include\\nnvm\\graph.h	/^    array_view<NodeEntry> inputs;$/;"	m	struct:nnvm::IndexedGraph::Node	typeref:typename:array_view<NodeEntry>
inputs	nnvm\\include\\nnvm\\node.h	/^  std::vector<NodeEntry> inputs;$/;"	m	class:nnvm::Node	typeref:typename:std::vector<NodeEntry>
inputs	nnvm\\src\\pass\\saveload_json.cc	/^  std::vector<Entry> inputs;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONNode	typeref:typename:std::vector<Entry>	file:
insert_index	dmlc-core\\include\\dmlc\\config.h	/^    std::vector<size_t> insert_index;$/;"	m	struct:dmlc::Config::ConfigValue	typeref:typename:std::vector<size_t>
insidetbc	lua\\lparser.c	/^  lu_byte insidetbc;  \/* true if inside the scope of a to-be-closed var. *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
instack	lua\\lobject.h	/^  lu_byte instack;  \/* whether it is in stack (register) *\/$/;"	m	struct:Upvaldesc	typeref:typename:lu_byte
int luaT_checkboolean(lua_State *L, int ud)	torch7\\lib\\luaT\\README.md	/^### int luaT_checkboolean(lua_State *L, int ud) ###$/;"	S
int luaT_classmodulename(const char *tname, char *parent_name)	torch7\\lib\\luaT\\README.md	/^### int luaT_classmodulename(const char *tname, char *parent_name) ###$/;"	S
int luaT_fullparentname(const char *tname, char *parent_name)	torch7\\lib\\luaT\\README.md	/^### int luaT_fullparentname(const char *tname, char *parent_name) ###$/;"	S
int luaT_getfieldcheckboolean(lua_State *L, int ud, const char *field)	torch7\\lib\\luaT\\README.md	/^## int luaT_getfieldcheckboolean(lua_State *L, int ud, const char *field) ##$/;"	s
int luaT_getfieldcheckint(lua_State *L, int ud, const char *field)	torch7\\lib\\luaT\\README.md	/^## int luaT_getfieldcheckint(lua_State *L, int ud, const char *field) ##$/;"	s
int luaT_innerparentname(const char *tname, char *parent_name)	torch7\\lib\\luaT\\README.md	/^### int luaT_innerparentname(const char *tname, char *parent_name) ###$/;"	S
int luaT_isudata(lua_State *L, int ud, const char *tname)	torch7\\lib\\luaT\\README.md	/^### int luaT_isudata(lua_State *L, int ud, const char *tname) ###$/;"	S
int luaT_optboolean(lua_State *L, int ud, int def)	torch7\\lib\\luaT\\README.md	/^### int luaT_optboolean(lua_State *L, int ud, int def) ###$/;"	S
int luaT_outerparentname(const char *tname, char *parent_name)	torch7\\lib\\luaT\\README.md	/^### int luaT_outerparentname(const char *tname, char *parent_name) ###$/;"	S
int luaT_pushmetatable(lua_State *L, const name *tname)	torch7\\lib\\luaT\\README.md	/^### int luaT_pushmetatable(lua_State *L, const name *tname) ###$/;"	S
int luaT_typerror(lua_State *L, int ud, const char *tname)	torch7\\lib\\luaT\\README.md	/^### int luaT_typerror(lua_State *L, int ud, const char *tname) ###$/;"	S
int16_t	dmlc-core\\include\\dmlc\\base.h	/^typedef __int16 int16_t;$/;"	t	typeref:typename:__int16
int16_t	nnvm\\include\\dmlc\\base.h	/^typedef __int16 int16_t;$/;"	t	typeref:typename:__int16
int2fb_aux	lua\\ltests.c	/^static int int2fb_aux (lua_State *L) {$/;"	f	typeref:typename:int	file:
int32_t	dmlc-core\\include\\dmlc\\base.h	/^typedef __int32 int32_t;$/;"	t	typeref:typename:__int32
int32_t	nnvm\\include\\dmlc\\base.h	/^typedef __int32 int32_t;$/;"	t	typeref:typename:__int32
int64_t	dmlc-core\\include\\dmlc\\base.h	/^typedef __int64 int64_t;$/;"	t	typeref:typename:__int64
int64_t	nnvm\\include\\dmlc\\base.h	/^typedef __int64 int64_t;$/;"	t	typeref:typename:__int64
int8_t	dmlc-core\\include\\dmlc\\base.h	/^typedef signed char int8_t;$/;"	t	typeref:typename:signed char
int8_t	nnvm\\include\\dmlc\\base.h	/^typedef signed char int8_t;$/;"	t	typeref:typename:signed char
intarith	lua\\lobject.c	/^static lua_Integer intarith (lua_State *L, int op, lua_Integer v1,$/;"	f	typeref:typename:lua_Integer	file:
interface.luaname2wrapname	torch7\\TensorMath.lua	/^   function interface.luaname2wrapname(self, name)$/;"	f
interface:dispatchregister	torch7\\TensorMath.lua	/^function interface:dispatchregister(name)$/;"	f
interface:wrap	torch7\\TensorMath.lua	/^function interface:wrap(name, ...)$/;"	f
internshrstr	lua\\lstring.c	/^static TString *internshrstr (lua_State *L, const char *str, size_t l) {$/;"	f	typeref:typename:TString *	file:
interpretdefaultvalue	bin\\lua\\cwrap\\types.lua	/^local function interpretdefaultvalue(arg)$/;"	f
interpretdefaultvalue	cwrap\\types.lua	/^local function interpretdefaultvalue(arg)$/;"	f
interror	lua\\lauxlib.c	/^static void interror (lua_State *L, int arg) {$/;"	f	typeref:typename:void	file:
intop	lua\\lvm.h	/^#define intop(/;"	d
invalid	lua\\testes\\utf8.lua	/^local function invalid (s)$/;"	f
invalidateTMcache	lua\\ltable.h	/^#define invalidateTMcache(/;"	d
io	dmlc-core\\src\\io.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\azure_filesys.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\azure_filesys.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\cached_input_split.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\filesys.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\hdfs_filesys.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\hdfs_filesys.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\input_split_base.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\input_split_base.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\line_split.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\line_split.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\local_filesys.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\local_filesys.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\recordio_split.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\recordio_split.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\s3_filesys.cc	/^namespace io {$/;"	n	namespace:dmlc	file:
io	dmlc-core\\src\\io\\s3_filesys.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\single_file_split.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\threaded_input_split.h	/^namespace io {$/;"	n	namespace:dmlc
io	dmlc-core\\src\\io\\uri_spec.h	/^namespace io {$/;"	n	namespace:dmlc
io	lua\\testes\\api.lua	/^  io = require'io'; assert(type(io.read) == "function")$/;"	f
io.o	dmlc-core\\Makefile	/^io.o: src\/io.cc$/;"	t
io.write	torch7\\test\\test_Tester.lua	/^   io.write = function() end$/;"	f
io.write	torch7\\test\\test_Tester.lua	/^   io.write = function(s)$/;"	f
io_close	lua\\liolib.c	/^static int io_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_fclose	lua\\liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_flush	lua\\liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_input	lua\\liolib.c	/^static int io_input (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_lines	lua\\liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_noclose	lua\\liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_open	lua\\liolib.c	/^static int io_open (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_output	lua\\liolib.c	/^static int io_output (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_pclose	lua\\liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_popen	lua\\liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_read	lua\\liolib.c	/^static int io_read (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_readline	lua\\liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_tmpfile	lua\\liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_type	lua\\liolib.c	/^static int io_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_write	lua\\liolib.c	/^static int io_write (lua_State *L) {$/;"	f	typeref:typename:int	file:
iolib	lua\\liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
ipairsaux	lua\\lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	typeref:typename:int	file:
isAutoSpacing	torch7\\lib\\TH\\THFilePrivate.h	/^    int isAutoSpacing;$/;"	m	struct:THFile__	typeref:typename:int
isBinary	torch7\\lib\\TH\\THFilePrivate.h	/^    int isBinary;$/;"	m	struct:THFile__	typeref:typename:int
isBinary	torch7\\test\\test.lua	/^  local function isBinary(t)$/;"	f
isCint	lua\\lcode.c	/^static int isCint (expdesc *e) {$/;"	f	typeref:typename:int	file:
isIT	lua\\lopcodes.h	/^#define isIT(/;"	d
isJ	lua\\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx, isJ};  \/* basic instruction formats *\/$/;"	e	enum:OpMode
isKstr	lua\\lcode.c	/^static int isKstr (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int	file:
isLfunction	lua\\lobject.h	/^#define isLfunction(/;"	d
isLua	lua\\lstate.h	/^#define isLua(/;"	d
isLuacode	lua\\lstate.h	/^#define isLuacode(/;"	d
isNaN	lua\\testes\\math.lua	/^local function isNaN (x)$/;"	f
isNativeEncoding	torch7\\lib\\TH\\THDiskFile.c	/^    int isNativeEncoding;$/;"	m	struct:THDiskFile__	typeref:typename:int	file:
isOT	lua\\lopcodes.h	/^#define isOT(/;"	d
isOpened	torch7\\lib\\TH\\THFilePrivate.h	/^    int (*isOpened)(THFile *self);$/;"	m	struct:THFileVTable	typeref:typename:int (*)(THFile * self)
isQuiet	torch7\\lib\\TH\\THFilePrivate.h	/^    int isQuiet;$/;"	m	struct:THFile__	typeref:typename:int
isReadable	torch7\\lib\\TH\\THFilePrivate.h	/^    int isReadable;$/;"	m	struct:THFile__	typeref:typename:int
isReferenced()	torch7\\doc\\file.md	/^### isReferenced() ###$/;"	S
isRunning	torch7\\Timer.c	/^    int isRunning;$/;"	m	struct:_Timer	typeref:typename:int	file:
isSCint	lua\\lcode.c	/^static int isSCint (expdesc *e) {$/;"	f	typeref:typename:int	file:
isSCnumber	lua\\lcode.c	/^static int isSCnumber (expdesc *e, lua_Integer *i, int *isfloat) {$/;"	f	typeref:typename:int	file:
isWritable	torch7\\lib\\TH\\THFilePrivate.h	/^    int isWritable;$/;"	m	struct:THFile__	typeref:typename:int
is_	dmlc-core\\include\\dmlc\\json.h	/^  std::istream *is_;$/;"	m	class:dmlc::JSONReader	typeref:typename:std::istream *
is_	dmlc-core\\src\\config.cc	/^  istream& is_;$/;"	m	class:dmlc::Tokenizer	typeref:typename:istream &	file:
is_	nnvm\\include\\dmlc\\json.h	/^  std::istream *is_;$/;"	m	class:dmlc::JSONReader	typeref:typename:std::istream *
is_arithmetic	dmlc-core\\include\\dmlc\\type_traits.h	/^struct is_arithmetic {$/;"	s	namespace:dmlc
is_arithmetic	nnvm\\include\\dmlc\\type_traits.h	/^struct is_arithmetic {$/;"	s	namespace:dmlc
is_enum_	dmlc-core\\include\\dmlc\\parameter.h	/^  bool is_enum_;$/;"	m	class:dmlc::parameter::FieldEntry	typeref:typename:bool
is_enum_	nnvm\\include\\dmlc\\parameter.h	/^  bool is_enum_;$/;"	m	class:dmlc::parameter::FieldEntry	typeref:typename:bool
is_floating_point	dmlc-core\\include\\dmlc\\type_traits.h	/^struct is_floating_point {$/;"	s	namespace:dmlc
is_floating_point	nnvm\\include\\dmlc\\type_traits.h	/^struct is_floating_point {$/;"	s	namespace:dmlc
is_integral	dmlc-core\\include\\dmlc\\type_traits.h	/^struct is_integral {$/;"	s	namespace:dmlc
is_integral	nnvm\\include\\dmlc\\type_traits.h	/^struct is_integral {$/;"	s	namespace:dmlc
is_nil	dmlc-core\\include\\dmlc\\lua.h	/^inline bool LuaRef::is_nil() const {$/;"	f	class:dmlc::LuaRef	typeref:typename:bool
is_pod	dmlc-core\\include\\dmlc\\type_traits.h	/^struct is_pod {$/;"	s	namespace:dmlc
is_pod	nnvm\\include\\dmlc\\type_traits.h	/^struct is_pod {$/;"	s	namespace:dmlc
is_string	dmlc-core\\include\\dmlc\\config.h	/^    bool is_string;$/;"	m	struct:dmlc::Config::ConfigValue	typeref:typename:bool
is_string	dmlc-core\\src\\config.cc	/^  bool is_string;$/;"	m	struct:dmlc::Token	typeref:typename:bool	file:
is_vararg	lua\\lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto	typeref:typename:lu_byte
is_variable	nnvm\\include\\nnvm\\node.h	/^inline bool Node::is_variable() const {$/;"	f	class:nnvm::Node	typeref:typename:bool
isabstkey	lua\\lobject.h	/^#define isabstkey(/;"	d
isbalanced	lua\\testes\\pm.lua	/^function isbalanced (s)$/;"	f
isblack	lua\\lgc.h	/^#define isblack(/;"	d
isblank	dmlc-core\\src\\data\\strtonum.h	/^inline bool isblank(char c) {$/;"	f	namespace:dmlc::data	typeref:typename:bool
iscleared	lua\\lgc.c	/^static int iscleared (global_State *g, const GCObject *o) {$/;"	f	typeref:typename:int	file:
isclosed	lua\\liolib.c	/^#define isclosed(/;"	d	file:
iscollectable	lua\\lobject.h	/^#define iscollectable(/;"	d
iscont	lua\\lutf8lib.c	/^#define iscont(/;"	d	file:
isdead	lua\\lgc.h	/^#define isdead(/;"	d
isdeadm	lua\\lgc.h	/^#define isdeadm(/;"	d
isdecGCmodegen	lua\\lgc.h	/^#define isdecGCmodegen(/;"	d
isdigit	dmlc-core\\src\\data\\strtonum.h	/^inline bool isdigit(char c) {$/;"	f	namespace:dmlc::data	typeref:typename:bool
isdigitchars	dmlc-core\\src\\data\\strtonum.h	/^inline bool isdigitchars(char c) {$/;"	f	namespace:dmlc::data	typeref:typename:bool
isdummy	lua\\ltable.h	/^#define isdummy(/;"	d
isempty	lua\\lobject.h	/^#define isempty(/;"	d
isemptystr	lua\\lvm.c	/^#define isemptystr(/;"	d	file:
isgray	lua\\lgc.h	/^#define isgray(/;"	d
isinstack	lua\\ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	typeref:typename:int	file:
isintwups	lua\\lfunc.h	/^#define isintwups(/;"	d
islittle	lua\\lstrlib.c	/^  int islittle;$/;"	m	struct:Header	typeref:typename:int	file:
isloop	lua\\lparser.c	/^  lu_byte isloop;  \/* true if 'block' is a loop *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
ismsg	lua\\testes\\files.lua	/^  local function ismsg (m)$/;"	f
isneg	lua\\lobject.c	/^static int isneg (const char **s) {$/;"	f	typeref:typename:int	file:
isold	lua\\lgc.h	/^#define isold(/;"	d
ispow2	lua\\llimits.h	/^#define ispow2(/;"	d
ispow2realasize	lua\\ltable.c	/^static int ispow2realasize (const Table *t) {$/;"	f	typeref:typename:int	file:
ispseudo	lua\\lapi.c	/^#define ispseudo(/;"	d	file:
isrealasize	lua\\lobject.h	/^#define isrealasize(/;"	d
isreallyempty	lua\\lobject.h	/^#define isreallyempty(/;"	d
isreserved	lua\\lstring.h	/^#define isreserved(/;"	d
issinglejump	lua\\lparser.c	/^static int issinglejump (LexState *ls, TString **label, int *target) {$/;"	f	typeref:typename:int	file:
isspace	dmlc-core\\src\\data\\strtonum.h	/^inline bool isspace(char c) {$/;"	f	namespace:dmlc::data	typeref:typename:bool
isstorage	torch7\\Tensor.lua	/^   local function isstorage(storage)$/;"	f
issweepphase	lua\\lgc.h	/^#define issweepphase(/;"	d
istailcall	lua\\lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug	typeref:typename:char
istensor	torch7\\Tensor.lua	/^   local function istensor(tensor)$/;"	f
istream	dmlc-core\\include\\dmlc\\io.h	/^  explicit istream(Stream *stream,$/;"	f	class:dmlc::istream
istream	dmlc-core\\include\\dmlc\\io.h	/^class istream : public std::basic_istream<char> {$/;"	c	namespace:dmlc
isupvalue	lua\\lapi.c	/^#define isupvalue(/;"	d	file:
isvalid	lua\\lapi.c	/^#define isvalid(/;"	d	file:
isvararg	lua\\lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug	typeref:typename:char
iswhite	lua\\lgc.h	/^#define iswhite(/;"	d
iter_	dmlc-core\\src\\data\\disk_row_iter.h	/^  ThreadedIter<RowBlockContainer<IndexType> > iter_;$/;"	m	class:dmlc::data::DiskRowIter	typeref:typename:ThreadedIter<RowBlockContainer<IndexType>>
iter_	dmlc-core\\src\\data\\parser.h	/^  ThreadedIter<std::vector<RowBlockContainer<IndexType> > > iter_;$/;"	m	class:dmlc::data::ThreadedParser	typeref:typename:ThreadedIter<std::vector<RowBlockContainer<IndexType>>>
iter_	dmlc-core\\src\\io\\threaded_input_split.h	/^  ThreadedIter<InputSplitBase::Chunk> iter_;$/;"	m	class:dmlc::io::ThreadedInputSplit	typeref:typename:ThreadedIter<InputSplitBase::Chunk>
iter_aux	lua\\lutf8lib.c	/^static int iter_aux (lua_State *L, int strict) {$/;"	f	typeref:typename:int	file:
iter_auxlax	lua\\lutf8lib.c	/^static int iter_auxlax (lua_State *L) {$/;"	f	typeref:typename:int	file:
iter_auxstrict	lua\\lutf8lib.c	/^static int iter_auxstrict (lua_State *L) {$/;"	f	typeref:typename:int	file:
iter_cached_	dmlc-core\\src\\io\\cached_input_split.h	/^  ThreadedIter<InputSplitBase::Chunk> iter_cached_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:ThreadedIter<InputSplitBase::Chunk>
iter_codes	lua\\lutf8lib.c	/^static int iter_codes (lua_State *L) {$/;"	f	typeref:typename:int	file:
iter_preproc_	dmlc-core\\src\\io\\cached_input_split.h	/^  ThreadedIter<InputSplitBase::Chunk> *iter_preproc_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:ThreadedIter<InputSplitBase::Chunk> *
ival	lua\\lparser.h	/^    lua_Integer ival;    \/* for VKINT *\/$/;"	m	union:expdesc::__anon029e1592020a	typeref:typename:lua_Integer
ivalue	lua\\lobject.h	/^#define ivalue(/;"	d
ivalueraw	lua\\lobject.h	/^#define ivalueraw(/;"	d
iwthabs	lua\\lparser.h	/^  lu_byte iwthabs;  \/* instructions issued since last absolute line info *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
jb	lua\\ltests.c	/^struct Aux { jmp_buf jb; const char *paniccode; lua_State *L; };$/;"	m	struct:Aux	typeref:typename:jmp_buf	file:
jobName	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private String jobName = "";$/;"	f	class:Client	file:
join	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def join(self):$/;"	m	class:PSTracker
join	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def join(self):$/;"	m	class:RabitTracker
json	dmlc-core\\doc\\Makefile	/^json:$/;"	t
json	dmlc-core\\include\\dmlc\\json.h	/^namespace json {$/;"	n	namespace:dmlc
json	dmlc-core\\test\\unittest\\unittest_json.cc	/^namespace json {$/;"	n	file:
json	nnvm\\include\\dmlc\\json.h	/^namespace json {$/;"	n	namespace:dmlc
json	nnvm\\src\\pass\\saveload_json.cc	/^namespace json {$/;"	n	namespace:dmlc	file:
json_attr	nnvm\\python\\nnvm\\graph.py	/^    def json_attr(self, key):$/;"	m	class:Graph
jumponcond	lua\\lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	typeref:typename:int	file:
jumpscopeerror	lua\\lparser.c	/^static l_noret jumpscopeerror (LexState *ls, Labeldesc *gt) {$/;"	f	typeref:typename:l_noret	file:
k	lua\\lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto	typeref:typename:TValue *
k	lua\\lparser.h	/^  expkind k;$/;"	m	struct:expdesc	typeref:typename:expkind
k	lua\\lstate.h	/^      lua_KFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anonad48b566010a::__anonad48b5660308	typeref:typename:lua_KFunction
kAlign	dmlc-core\\include\\dmlc\\any.h	/^  static const size_t kAlign = sizeof(void*);$/;"	m	class:dmlc::any	typeref:typename:const size_t
kAlign	nnvm\\include\\dmlc\\any.h	/^  static const size_t kAlign = sizeof(void*);$/;"	m	class:dmlc::any	typeref:typename:const size_t
kAll	nnvm\\include\\nnvm\\symbolic.h	/^    kAll = 0,$/;"	e	enum:nnvm::Symbol::ListInputOption
kAllMatch	dmlc-core\\include\\dmlc\\parameter.h	/^  kAllMatch$/;"	e	enum:dmlc::parameter::ParamInitOption
kAllMatch	nnvm\\include\\dmlc\\parameter.h	/^  kAllMatch,$/;"	e	enum:dmlc::parameter::ParamInitOption
kAllowHidden	nnvm\\include\\dmlc\\parameter.h	/^  kAllowHidden$/;"	e	enum:dmlc::parameter::ParamInitOption
kAllowUnknown	dmlc-core\\include\\dmlc\\parameter.h	/^  kAllowUnknown,$/;"	e	enum:dmlc::parameter::ParamInitOption
kAllowUnknown	nnvm\\include\\dmlc\\parameter.h	/^  kAllowUnknown,$/;"	e	enum:dmlc::parameter::ParamInitOption
kAuxiliaryStates	nnvm\\include\\nnvm\\symbolic.h	/^    kAuxiliaryStates = 2$/;"	e	enum:nnvm::Symbol::ListInputOption
kBadStorageID	nnvm\\src\\pass\\plan_memory.cc	/^  static const StorageID kBadStorageID = -1;$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:const StorageID	file:
kBeforeFirst	dmlc-core\\include\\dmlc\\threadediter.h	/^    kBeforeFirst,$/;"	e	enum:dmlc::ThreadedIter::Signal
kBufferSize	dmlc-core\\src\\io\\input_split_base.h	/^  static const size_t kBufferSize = 2UL << 20UL;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:const size_t
kBufferSize	dmlc-core\\src\\io\\single_file_split.h	/^  static const size_t kBufferSize = 1 << 18UL;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:const size_t
kCPU	include\\tinyflow\\base.h	/^  kCPU = 1,$/;"	e	enum:tinyflow::DeviceMask
kCPUFeature_AVX	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^  kCPUFeature_AVX = 0x40$/;"	e	enum:ECPUFeature	file:
kCPUFeature_SSE	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^  kCPUFeature_SSE = 0x01,$/;"	e	enum:ECPUFeature	file:
kCPUFeature_SSE2	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^  kCPUFeature_SSE2 = 0x02,$/;"	e	enum:ECPUFeature	file:
kCPUFeature_SSE3	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^  kCPUFeature_SSE3 = 0x04,$/;"	e	enum:ECPUFeature	file:
kCPUFeature_SSE3_S	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^  kCPUFeature_SSE3_S = 0x08,$/;"	e	enum:ECPUFeature	file:
kCPUFeature_SSE4_1	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^  kCPUFeature_SSE4_1 = 0x10,$/;"	e	enum:ECPUFeature	file:
kCPUFeature_SSE4_2	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^  kCPUFeature_SSE4_2 = 0x20,$/;"	e	enum:ECPUFeature	file:
kDestroy	dmlc-core\\include\\dmlc\\threadediter.h	/^    kDestroy$/;"	e	enum:dmlc::ThreadedIter::Signal
kDirectory	dmlc-core\\src\\io\\filesys.h	/^  kDirectory$/;"	e	enum:dmlc::io::FileType
kFIFO	dmlc-core\\include\\dmlc\\concurrency.h	/^  kFIFO,$/;"	e	enum:dmlc::ConcurrentQueueType
kFile	dmlc-core\\src\\io\\filesys.h	/^  kFile,$/;"	e	enum:dmlc::io::FileType
kFinish	dmlc-core\\src\\config.cc	/^    kFinish,$/;"	e	enum:dmlc::Tokenizer::ParseState	file:
kFloat32	include\\tinyflow\\base.h	/^  kFloat32 = 0$/;"	e	enum:tinyflow::DataType
kGPU	include\\tinyflow\\base.h	/^  kGPU = 2$/;"	e	enum:tinyflow::DeviceMask
kLocking	dmlc-core\\include\\dmlc\\lua.h	/^    kLocking,$/;"	e	enum:dmlc::LuaState::Option
kLuaNOP	src\\op_special.cc	/^const FLuaCompute kLuaNOP = "function(x, y, kwarg) return function() end end";$/;"	v	namespace:tinyflow	typeref:typename:const FLuaCompute
kLuaNOP	src\\torch\\op_special_torch.cc	/^const FLuaCompute kLuaNOP = "function(x, y, kwarg) return function() end end";$/;"	v	namespace:tinyflow	typeref:typename:const FLuaCompute
kMagic	dmlc-core\\include\\dmlc\\recordio.h	/^  static const uint32_t kMagic = 0xced7230a;$/;"	m	class:dmlc::RecordIOWriter	typeref:typename:const uint32_t
kMagic	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^kMagic = 0xff99$/;"	v
kNamespaceSeparator	nnvm\\src\\core\\symbolic.cc	/^const char *kNamespaceSeparator = "$";$/;"	v	namespace:nnvm::symbol_constants	typeref:typename:const char *
kNoThreadProtect	dmlc-core\\include\\dmlc\\lua.h	/^    kNoThreadProtect,$/;"	e	enum:dmlc::LuaState::Option
kNone	dmlc-core\\src\\config.cc	/^    kNone = 0,$/;"	e	enum:dmlc::Tokenizer::ParseState	file:
kPageSize	dmlc-core\\include\\dmlc\\memory.h	/^  static const int kPageSize = ((1 << 22) \/ size);$/;"	m	class:dmlc::MemoryPool	typeref:typename:const int
kPageSize	dmlc-core\\src\\data\\disk_row_iter.h	/^  static const size_t kPageSize = 64UL << 20UL;$/;"	m	class:dmlc::data::DiskRowIter	typeref:typename:const size_t
kPageSize	nnvm\\include\\dmlc\\memory.h	/^  static const int kPageSize = ((1 << 22) \/ size);$/;"	m	class:dmlc::MemoryPool	typeref:typename:const int
kPriority	dmlc-core\\include\\dmlc\\concurrency.h	/^  kPriority$/;"	e	enum:dmlc::ConcurrentQueueType
kProduce	dmlc-core\\include\\dmlc\\threadediter.h	/^    kProduce,$/;"	e	enum:dmlc::ThreadedIter::Signal
kReadOnlyArgs	nnvm\\include\\nnvm\\symbolic.h	/^    kReadOnlyArgs = 1,$/;"	e	enum:nnvm::Symbol::ListInputOption
kRecursive	nnvm\\include\\nnvm\\symbolic.h	/^    kRecursive = 0,$/;"	e	enum:nnvm::Symbol::ListAttrOption
kShallow	nnvm\\include\\nnvm\\symbolic.h	/^    kShallow = 1$/;"	e	enum:nnvm::Symbol::ListAttrOption
kStack	dmlc-core\\include\\dmlc\\any.h	/^  static const size_t kStack = sizeof(void*) * 3;$/;"	m	class:dmlc::any	typeref:typename:const size_t
kStack	nnvm\\include\\dmlc\\any.h	/^  static const size_t kStack = sizeof(void*) * 3;$/;"	m	class:dmlc::any	typeref:typename:const size_t
kStackCache	nnvm\\include\\nnvm\\tuple.h	/^  static const uint32_t kStackCache = 4;$/;"	m	class:nnvm::Tuple	typeref:typename:const uint32_t
kThreadLocal	dmlc-core\\include\\dmlc\\lua.h	/^    kThreadLocal,$/;"	e	enum:dmlc::LuaState::Option
kToken	dmlc-core\\src\\config.cc	/^    kToken,$/;"	e	enum:dmlc::Tokenizer::ParseState	file:
kVarg	nnvm\\include\\nnvm\\op.h	/^static const uint32_t kVarg = std::numeric_limits<uint32_t>::max();$/;"	v	namespace:nnvm	typeref:typename:const uint32_t
keepalive	dmlc-core\\tracker\\dmlc_tracker\\local.py	/^keepalive = """$/;"	v
keepinvariant	lua\\lgc.h	/^#define keepinvariant(/;"	d
kernel_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^  std::string kernel_;$/;"	m	class:nnvm::fusion::RTC	typeref:typename:std::string
kernel_registry	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^  static std::unordered_map<std::string, char*> kernel_registry;$/;"	m	class:nnvm::fusion::RTC	typeref:typename:std::unordered_map<std::string,char * >
kernel_registry	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^std::unordered_map<std::string, char*> RTC::kernel_registry;$/;"	m	class:nnvm::fusion::RTC	typeref:typename:std::unordered_map<std::string,char * >
key_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string key_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:std::string
key_	nnvm\\include\\dmlc\\parameter.h	/^  std::string key_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:std::string
key_tt	lua\\lobject.h	/^    lu_byte key_tt;  \/* key type *\/$/;"	m	struct:Node::NodeKey	typeref:typename:lu_byte
key_val	lua\\lobject.h	/^    Value key_val;  \/* key value *\/$/;"	m	struct:Node::NodeKey	typeref:typename:Value
keyiscollectable	lua\\lobject.h	/^#define keyiscollectable(/;"	d
keyisinteger	lua\\lobject.h	/^#define keyisinteger(/;"	d
keyisnil	lua\\lobject.h	/^#define keyisnil(/;"	d
keyisshrstr	lua\\lobject.h	/^#define keyisshrstr(/;"	d
keyiswhite	lua\\lgc.c	/^#define keyiswhite(/;"	d	file:
keyival	lua\\lobject.h	/^#define keyival(/;"	d
keystrval	lua\\lobject.h	/^#define keystrval(/;"	d
keytt	lua\\lobject.h	/^#define keytt(/;"	d
keyval	lua\\lobject.h	/^#define keyval(/;"	d
kill	lua\\testes\\main.lua	/^  local function kill (pid)$/;"	f
killedTasks	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private final Collection<TaskRecord> killedTasks = new java.util.LinkedList<TaskRecord>();$/;"	f	class:ApplicationMaster	file:
kname	lua\\ldebug.c	/^static void kname (const Proto *p, int c, const char **name) {$/;"	f	typeref:typename:void	file:
known_shape	example\\cifar_resnet.py	/^known_shape = {x: [batch_size, 3, 32, 32], label: [batch_size]}$/;"	v
known_shape	example\\mnist_lenet.py	/^known_shape = {x: [100, 1, 28, 28], label: [100]}$/;"	v
known_shape	example\\mnist_mlp_auto_shape_inference.py	/^known_shape = {x: [100, 28 * 28], label: [100]}$/;"	v
ksize	src\\op_nn.cc	/^  TShape ksize;$/;"	m	struct:tinyflow::ConvPoolParam	typeref:typename:TShape	file:
kwarg_symbol	nnvm\\src\\c_api\\c_api_common.h	/^  std::unordered_map<std::string, const nnvm::Symbol*> kwarg_symbol;$/;"	m	struct:NNAPIThreadLocalEntry	typeref:typename:std::unordered_map<std::string,const nnvm::Symbol * >
l	lua\\lmathlib.c	/^  lu_int32 l;  \/* lower half *\/$/;"	m	struct:Rand64	typeref:typename:lu_int32	file:
l	lua\\lobject.h	/^  LClosure l;$/;"	m	union:Closure	typeref:typename:LClosure
l	lua\\lstate.c	/^  LX l;$/;"	m	struct:LG	typeref:typename:LX	file:
l	lua\\lstate.c	/^  lua_State l;$/;"	m	struct:LX	typeref:typename:lua_State	file:
l	lua\\lstate.h	/^    } l;$/;"	m	union:CallInfo::__anonad48b566010a	typeref:struct:CallInfo::__anonad48b566010a::__anonad48b5660208
l	lua\\testes\\errors.lua	/^  local l = debug.getinfo(1, "l").currentline; function y () C=C+1; y() end$/;"	f
l_G	lua\\lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State	typeref:typename:global_State *
l_Trick	lua\\ltests.c	/^void *l_Trick = 0;$/;"	v	typeref:typename:void *
l_addi	lua\\lvm.c	/^#define l_addi(/;"	d	file:
l_alloc	lua\\lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	typeref:typename:void *	file:
l_band	lua\\lvm.c	/^#define l_band(/;"	d	file:
l_bor	lua\\lvm.c	/^#define l_bor(/;"	d	file:
l_bxor	lua\\lvm.c	/^#define l_bxor(/;"	d	file:
l_castS2U	lua\\llimits.h	/^#define l_castS2U(/;"	d
l_castU2S	lua\\llimits.h	/^#define l_castU2S(/;"	d
l_checkmode	lua\\liolib.c	/^static int l_checkmode (const char *mode) {$/;"	f	typeref:typename:int	file:
l_checktime	lua\\loslib.c	/^static time_t l_checktime (lua_State *L, int arg) {$/;"	f	typeref:typename:time_t	file:
l_floor	lua\\luaconf.h	/^#define l_floor(/;"	d
l_fseek	lua\\liolib.c	/^#define l_fseek(/;"	d	file:
l_ftell	lua\\liolib.c	/^#define l_ftell(/;"	d	file:
l_gei	lua\\lvm.c	/^#define l_gei(/;"	d	file:
l_getc	lua\\liolib.c	/^#define l_getc(/;"	d	file:
l_gmtime	lua\\loslib.c	/^#define l_gmtime(/;"	d	file:
l_gti	lua\\lvm.c	/^#define l_gti(/;"	d	file:
l_hashfloat	lua\\ltable.c	/^static int l_hashfloat (lua_Number n) {$/;"	f	typeref:typename:int	file:
l_inspectstat	lua\\lauxlib.c	/^#define l_inspectstat(/;"	d	file:
l_intfitsf	lua\\lvm.c	/^#define l_intfitsf(/;"	d	file:
l_isfalse	lua\\lobject.h	/^#define l_isfalse(/;"	d
l_lei	lua\\lvm.c	/^#define l_lei(/;"	d	file:
l_localtime	lua\\loslib.c	/^#define l_localtime(/;"	d	file:
l_lockfile	lua\\liolib.c	/^#define l_lockfile(/;"	d	file:
l_lti	lua\\lvm.c	/^#define l_lti(/;"	d	file:
l_mathlim	lua\\luaconf.h	/^#define l_mathlim(/;"	d
l_mathop	lua\\luaconf.h	/^#define l_mathop(/;"	d
l_mem	lua\\llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t	typeref:typename:LUAI_MEM
l_mem	lua\\llimits.h	/^typedef long l_mem;$/;"	t	typeref:typename:long
l_mem	lua\\llimits.h	/^typedef ptrdiff_t l_mem;$/;"	t	typeref:typename:ptrdiff_t
l_memcontrol	lua\\ltests.c	/^Memcontrol l_memcontrol =$/;"	v	typeref:typename:Memcontrol
l_memcontrol	lua\\ltests.h	/^LUA_API Memcontrol l_memcontrol;$/;"	v	typeref:typename:LUA_API Memcontrol
l_message	lua\\lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	typeref:typename:void	file:
l_muli	lua\\lvm.c	/^#define l_muli(/;"	d	file:
l_noret	lua\\llimits.h	/^#define l_noret	/;"	d
l_pclose	lua\\liolib.c	/^#define l_pclose(/;"	d	file:
l_popen	lua\\liolib.c	/^#define l_popen(/;"	d	file:
l_print	lua\\lua.c	/^static void l_print (lua_State *L) {$/;"	f	typeref:typename:void	file:
l_pushtime	lua\\loslib.c	/^#define l_pushtime(/;"	d	file:
l_randomizePivot	lua\\ltablib.c	/^static unsigned int l_randomizePivot (void) {$/;"	f	typeref:typename:unsigned int	file:
l_registry	lua\\lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State	typeref:typename:TValue
l_seeknum	lua\\liolib.c	/^#define l_seeknum	/;"	d	file:
l_setbit	lua\\lgc.h	/^#define l_setbit(/;"	d
l_signalT	lua\\lstate.h	/^#define l_signalT	/;"	d
l_sprintf	lua\\ltests.h	/^#define l_sprintf(/;"	d
l_sprintf	lua\\luaconf.h	/^#define l_sprintf(/;"	d
l_str2d	lua\\lobject.c	/^static const char *l_str2d (const char *s, lua_Number *result) {$/;"	f	typeref:typename:const char *	file:
l_str2dloc	lua\\lobject.c	/^static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {$/;"	f	typeref:typename:const char *	file:
l_str2int	lua\\lobject.c	/^static const char *l_str2int (const char *s, lua_Integer *result) {$/;"	f	typeref:typename:const char *	file:
l_strcmp	lua\\lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	typeref:typename:int	file:
l_subi	lua\\lvm.c	/^#define l_subi(/;"	d	file:
l_timet	lua\\loslib.c	/^#define l_timet	/;"	d	file:
l_uacInt	lua\\llimits.h	/^typedef LUAI_UACINT l_uacInt;$/;"	t	typeref:typename:LUAI_UACINT
l_uacNumber	lua\\llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t	typeref:typename:LUAI_UACNUMBER
l_uint32	lua\\llimits.h	/^typedef unsigned int l_uint32;$/;"	t	typeref:typename:unsigned int
l_uint32	lua\\llimits.h	/^typedef unsigned long l_uint32;$/;"	t	typeref:typename:unsigned long
l_unlockfile	lua\\liolib.c	/^#define l_unlockfile(/;"	d	file:
label	dmlc-core\\include\\dmlc\\data.h	/^  const real_t *label;$/;"	m	struct:dmlc::RowBlock	typeref:typename:const real_t *
label	dmlc-core\\include\\dmlc\\data.h	/^  real_t label;$/;"	m	class:dmlc::Row	typeref:typename:real_t
label	dmlc-core\\src\\data\\row_block.h	/^  std::vector<real_t> label;$/;"	m	struct:dmlc::data::RowBlockContainer	typeref:typename:std::vector<real_t>
label	example\\cifar_resnet.py	/^label = tf.placeholder(tf.float32)$/;"	v
label	example\\mnist_lenet.py	/^label = tf.placeholder(tf.float32)$/;"	v
label	example\\mnist_mlp_auto_shape_inference.py	/^label = tf.placeholder(tf.float32)$/;"	v
label	lua\\lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata	typeref:typename:Labellist
label_column	dmlc-core\\src\\data\\csv_parser.h	/^  int label_column;$/;"	m	struct:dmlc::data::CSVParserParam	typeref:typename:int
labelstat	lua\\lparser.c	/^static void labelstat (LexState *ls, TString *name, int line) {$/;"	f	typeref:typename:void	file:
laction	lua\\lua.c	/^static void laction (int i) {$/;"	f	typeref:typename:void	file:
language	dmlc-core\\doc\\conf.py	/^language = None$/;"	v
lapi.o	lua\\makefile	/^lapi.o: lapi.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
lapi_c	lua\\lapi.c	/^#define lapi_c$/;"	d	file:
lapi_h	lua\\lapi.h	/^#define lapi_h$/;"	d
last_error	nnvm\\src\\c_api\\c_api_error.cc	/^  std::string last_error;$/;"	m	struct:ErrorEntry	typeref:typename:std::string	file:
lastatomic	lua\\lstate.h	/^  lu_mem lastatomic;  \/* see function 'genstep' in file 'lgc.c' *\/$/;"	m	struct:global_State	typeref:typename:lu_mem
lastdim	torch7\\TensorMath.lua	/^   local function lastdim(argn)$/;"	f
lastdimarray	torch7\\TensorMath.lua	/^   local function lastdimarray(argn)$/;"	f
lastfree	lua\\lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table	typeref:typename:Node *
lastlevel	lua\\lauxlib.c	/^static int lastlevel (lua_State *L) {$/;"	f	typeref:typename:int	file:
lastline	lua\\llex.h	/^  int lastline;  \/* line of last token 'consumed' *\/$/;"	m	struct:LexState	typeref:typename:int
lastlinedefined	lua\\lobject.h	/^  int lastlinedefined;  \/* debug information  *\/$/;"	m	struct:Proto	typeref:typename:int
lastlinedefined	lua\\lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
lastlistfield	lua\\lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
lastmatch	lua\\lstrlib.c	/^  const char *lastmatch;  \/* end of last match *\/$/;"	m	struct:GMatchState	typeref:typename:const char *	file:
lasttarget	lua\\lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState	typeref:typename:int
latex	dmlc-core\\doc\\Makefile	/^latex:$/;"	t
latex_documents	dmlc-core\\doc\\conf.py	/^latex_documents = [$/;"	v
latex_elements	dmlc-core\\doc\\conf.py	/^latex_elements = {$/;"	v
latexpdf	dmlc-core\\doc\\Makefile	/^latexpdf:$/;"	t
latexpdfja	dmlc-core\\doc\\Makefile	/^latexpdfja:$/;"	t
launchDummyTask	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void launchDummyTask(Container container){$/;"	m	class:ApplicationMaster	file:
launchTask	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private void launchTask(Container container, TaskRecord task) {$/;"	m	class:ApplicationMaster	file:
lauxlib.o	lua\\makefile	/^lauxlib.o: lauxlib.c lprefix.h lua.h luaconf.h lauxlib.h$/;"	t
lauxlib_c	lua\\lauxlib.c	/^#define lauxlib_c$/;"	d	file:
lauxlib_h	lua\\lauxlib.h	/^#define lauxlib_h$/;"	d
lbaselib.o	lua\\makefile	/^lbaselib.o: lbaselib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lbaselib_c	lua\\lbaselib.c	/^#define lbaselib_c$/;"	d	file:
lcode.o	lua\\makefile	/^lcode.o: lcode.c lprefix.h lua.h luaconf.h lcode.h llex.h lobject.h \\$/;"	t
lcode_c	lua\\lcode.c	/^#define lcode_c$/;"	d	file:
lcode_h	lua\\lcode.h	/^#define lcode_h$/;"	d
lcorolib.o	lua\\makefile	/^lcorolib.o: lcorolib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lcorolib_c	lua\\lcorolib.c	/^#define lcorolib_c$/;"	d	file:
lctype.o	lua\\makefile	/^lctype.o: lctype.c lprefix.h lctype.h lua.h luaconf.h llimits.h$/;"	t
lctype_c	lua\\lctype.c	/^#define lctype_c$/;"	d	file:
lctype_h	lua\\lctype.h	/^#define lctype_h$/;"	d
ldblib.o	lua\\makefile	/^ldblib.o: ldblib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
ldblib_c	lua\\ldblib.c	/^#define ldblib_c$/;"	d	file:
ldebug.o	lua\\makefile	/^ldebug.o: ldebug.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
ldebug_c	lua\\ldebug.c	/^#define ldebug_c$/;"	d	file:
ldebug_h	lua\\ldebug.h	/^#define ldebug_h$/;"	d
ldo.o	lua\\makefile	/^ldo.o: ldo.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
ldo_c	lua\\ldo.c	/^#define ldo_c$/;"	d	file:
ldo_h	lua\\ldo.h	/^#define ldo_h$/;"	d
ldump.o	lua\\makefile	/^ldump.o: ldump.c lprefix.h lua.h luaconf.h lobject.h llimits.h lstate.h \\$/;"	t
ldump_c	lua\\ldump.c	/^#define ldump_c$/;"	d	file:
learning_rate	dmlc-core\\example\\parameter.cc	/^  float learning_rate;$/;"	m	struct:MyParam	typeref:typename:float	file:
learning_rate	dmlc-core\\test\\parameter_test.cc	/^  float learning_rate;$/;"	m	struct:Param	typeref:typename:float	file:
learning_rate	example\\mnist_softmax_minimum.py	/^learning_rate = 0.5$/;"	v
leaveblock	lua\\lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	typeref:typename:void	file:
leavelevel	lua\\lparser.c	/^#define leavelevel(/;"	d	file:
left	lua\\lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon029e158d0108	typeref:typename:lu_byte	file:
left	torch7\\lib\\TH\\THRandom.h	/^  int left;  \/* = 1; *\/$/;"	m	struct:THGenerator	typeref:typename:int
len	lua\\lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata	typeref:typename:size_t
len	lua\\lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata0	typeref:typename:size_t
len	lua\\lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon7d7958700108	typeref:typename:ptrdiff_t	file:
len	lua\\testes\\utf8.lua	/^local function len (s)$/;"	f
length	dmlc-core\\include\\dmlc\\data.h	/^  size_t length;$/;"	m	class:dmlc::Row	typeref:typename:size_t
lessequalothers	lua\\lvm.c	/^static int lessequalothers (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int	file:
lessthanothers	lua\\lvm.c	/^static int lessthanothers (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int	file:
level	lua\\lstrlib.c	/^  unsigned char level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	typeref:typename:unsigned char	file:
lexerror	lua\\llex.c	/^static l_noret lexerror (LexState *ls, const char *msg, int token) {$/;"	f	typeref:typename:l_noret	file:
lexerror	lua\\testes\\literals.lua	/^local function lexerror (s, err)$/;"	f
lexstring	lua\\testes\\literals.lua	/^local function lexstring (x, y, n)$/;"	f
lfunc.o	lua\\makefile	/^lfunc.o: lfunc.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lfunc_c	lua\\lfunc.c	/^#define lfunc_c$/;"	d	file:
lfunc_h	lua\\lfunc.h	/^#define lfunc_h$/;"	d
lgc.o	lua\\makefile	/^lgc.o: lgc.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lgc_c	lua\\lgc.c	/^#define lgc_c$/;"	d	file:
lgc_h	lua\\lgc.h	/^#define lgc_h$/;"	d
lhs_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ASTPtr lhs_, rhs_;$/;"	m	class:nnvm::fusion::ArraySubscriptAST	typeref:typename:ASTPtr
lhs_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ASTPtr lhs_, rhs_;$/;"	m	class:nnvm::fusion::BinaryAST	typeref:typename:ASTPtr
lib/libnnvm.a	nnvm\\Makefile	/^lib\/libnnvm.a: $(ALL_DEP)$/;"	t
lib/libnnvm_example.so	nnvm\\Makefile	/^lib\/libnnvm_example.so: example\/src\/operator.cc lib\/libnnvm.a$/;"	t
lib/libtinyflow.so	Makefile	/^lib\/libtinyflow.so: $(ALL_DEP)$/;"	t
lib1.so	lua\\testes\\libs\\makefile	/^lib1.so: lib1.c $(LUA_DIR)\/luaconf.h $(LUA_DIR)\/ltests.h$/;"	t
lib11.so	lua\\testes\\libs\\makefile	/^lib11.so: lib11.c $(LUA_DIR)\/luaconf.h $(LUA_DIR)\/ltests.h$/;"	t
lib1_export	lua\\testes\\libs\\lib1.c	/^LUAMOD_API int lib1_export (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
lib2-v2.so	lua\\testes\\libs\\makefile	/^lib2-v2.so: lib21.c $(LUA_DIR)\/luaconf.h $(LUA_DIR)\/ltests.h$/;"	t
lib2.so	lua\\testes\\libs\\makefile	/^lib2.so: lib2.c $(LUA_DIR)\/luaconf.h $(LUA_DIR)\/ltests.h$/;"	t
lib21.so	lua\\testes\\libs\\makefile	/^lib21.so: lib21.c $(LUA_DIR)\/luaconf.h $(LUA_DIR)\/ltests.h$/;"	t
libdmlc.a	dmlc-core\\Makefile	/^libdmlc.a: $(OBJ)$/;"	t
likely	lua\\llimits.h	/^#define likely(/;"	d
limitasasize	lua\\ltable.c	/^#define limitasasize(/;"	d	file:
limitequalsasize	lua\\ltable.c	/^#define limitequalsasize(/;"	d	file:
line	lua\\lobject.h	/^  int line;$/;"	m	struct:AbsLineInfo	typeref:typename:int
line	lua\\lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc	typeref:typename:int
line_count_n_	dmlc-core\\include\\dmlc\\json.h	/^  size_t line_count_n_;$/;"	m	class:dmlc::JSONReader	typeref:typename:size_t
line_count_n_	nnvm\\include\\dmlc\\json.h	/^  size_t line_count_n_;$/;"	m	class:dmlc::JSONReader	typeref:typename:size_t
line_count_r_	dmlc-core\\include\\dmlc\\json.h	/^  size_t line_count_r_;$/;"	m	class:dmlc::JSONReader	typeref:typename:size_t
line_count_r_	nnvm\\include\\dmlc\\json.h	/^  size_t line_count_r_;$/;"	m	class:dmlc::JSONReader	typeref:typename:size_t
line_info	dmlc-core\\include\\dmlc\\json.h	/^  inline std::string line_info() const {$/;"	f	class:dmlc::JSONReader	typeref:typename:std::string
line_info	nnvm\\include\\dmlc\\json.h	/^  inline std::string line_info() const {$/;"	f	class:dmlc::JSONReader	typeref:typename:std::string
line_split.o	dmlc-core\\Makefile	/^line_split.o: src\/io\/line_split.cc$/;"	t
linedefined	lua\\lobject.h	/^  int linedefined;  \/* debug information  *\/$/;"	m	struct:Proto	typeref:typename:int
linedefined	lua\\lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
lineerror	lua\\testes\\errors.lua	/^local function lineerror (s, l)$/;"	f
lineinfo	lua\\lobject.h	/^  ls_byte *lineinfo;  \/* information about source lines (debug information) *\/$/;"	m	struct:Proto	typeref:typename:ls_byte *
linenumber	lua\\llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState	typeref:typename:int
linit.o	lua\\makefile	/^linit.o: linit.c lprefix.h lua.h luaconf.h lualib.h lauxlib.h$/;"	t
linit_c	lua\\linit.c	/^#define linit_c$/;"	d	file:
linkcheck	dmlc-core\\doc\\Makefile	/^linkcheck:$/;"	t
linkgclist	lua\\lgc.c	/^#define linkgclist(/;"	d	file:
linkobjgclist	lua\\lgc.c	/^#define linkobjgclist(/;"	d	file:
lint	Makefile	/^lint:$/;"	t
lint	dmlc-core\\Makefile	/^lint:$/;"	t
lint	nnvm\\Makefile	/^lint:$/;"	t
liolib.o	lua\\makefile	/^liolib.o: liolib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
liolib_c	lua\\liolib.c	/^#define liolib_c$/;"	d	file:
lisdigit	lua\\lctype.h	/^#define lisdigit(/;"	d
lislalnum	lua\\lctype.h	/^#define lislalnum(/;"	d
lislalpha	lua\\lctype.h	/^#define lislalpha(/;"	d
lisprint	lua\\lctype.h	/^#define lisprint(/;"	d
lisspace	lua\\lctype.h	/^#define lisspace(/;"	d
list_attr	nnvm\\python\\nnvm\\symbol.py	/^    def list_attr(self, recursive=False):$/;"	m	class:Symbol
list_input_names	nnvm\\python\\nnvm\\symbol.py	/^    def list_input_names(self, option='all'):$/;"	m	class:Symbol
list_input_variables	nnvm\\python\\nnvm\\symbol.py	/^    def list_input_variables(self, option='all'):$/;"	m	class:Symbol
list_output_names	nnvm\\python\\nnvm\\symbol.py	/^    def list_output_names(self):$/;"	m	class:Symbol
listabslineinfo	lua\\ltests.c	/^static int listabslineinfo (lua_State *L) {$/;"	f	typeref:typename:int	file:
listcode	lua\\ltests.c	/^static int listcode (lua_State *L) {$/;"	f	typeref:typename:int	file:
listfield	lua\\lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
listk	lua\\ltests.c	/^static int listk (lua_State *L) {$/;"	f	typeref:typename:int	file:
listlocals	lua\\ltests.c	/^static int listlocals (lua_State *L) {$/;"	f	typeref:typename:int	file:
lisxdigit	lua\\lctype.h	/^#define lisxdigit(/;"	d
little	lua\\lstrlib.c	/^  char little;  \/* true iff machine is little endian *\/$/;"	m	union:__anon7d795870020a	typeref:typename:char	file:
littleEndianEncoding()	torch7\\doc\\diskfile.md	/^### littleEndianEncoding() ###$/;"	S
ll_funcs	lua\\loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
ll_loadlib	lua\\loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_require	lua\\loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_searchpath	lua\\loadlib.c	/^static int ll_searchpath (lua_State *L) {$/;"	f	typeref:typename:int	file:
llex	lua\\llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	typeref:typename:int	file:
llex.o	lua\\makefile	/^llex.o: llex.c lprefix.h lua.h luaconf.h lctype.h llimits.h ldebug.h \\$/;"	t
llex_c	lua\\llex.c	/^#define llex_c$/;"	d	file:
llex_h	lua\\llex.h	/^#define llex_h$/;"	d
llimits_h	lua\\llimits.h	/^#define llimits_h$/;"	d
lmathlib.o	lua\\makefile	/^lmathlib.o: lmathlib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lmathlib_c	lua\\lmathlib.c	/^#define lmathlib_c$/;"	d	file:
lmem.o	lua\\makefile	/^lmem.o: lmem.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lmem_c	lua\\lmem.c	/^#define lmem_c$/;"	d	file:
lmem_h	lua\\lmem.h	/^#define lmem_h$/;"	d
lmemfind	lua\\lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	typeref:typename:const char *	file:
lmod	lua\\lobject.h	/^#define lmod(/;"	d
lnglen	lua\\lobject.h	/^    size_t lnglen;  \/* length for long strings *\/$/;"	m	union:TString::__anon4faed11c010a	typeref:typename:size_t
load_aux	lua\\lbaselib.c	/^static int load_aux (lua_State *L, int status, int envidx) {$/;"	f	typeref:typename:int	file:
load_batch	python\\tinyflow\\datasets.py	/^def load_batch(fpath, label_key='labels'):$/;"	f
loadedlibs	lua\\linit.c	/^static const luaL_Reg loadedlibs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
loadfunc	lua\\loadlib.c	/^static int loadfunc (lua_State *L, const char *filename, const char *modname) {$/;"	f	typeref:typename:int	file:
loadlib	lua\\ltests.c	/^static int loadlib (lua_State *L) {$/;"	f	typeref:typename:int	file:
loadlib.o	lua\\makefile	/^loadlib.o: loadlib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
loadlib_c	lua\\loadlib.c	/^#define loadlib_c$/;"	d	file:
loadline	lua\\lua.c	/^static int loadline (lua_State *L) {$/;"	f	typeref:typename:int	file:
loadrep	lua\\testes\\heavy.lua	/^local function loadrep (x, what)$/;"	f
loadrepfunc	lua\\testes\\heavy.lua	/^local function loadrepfunc (prefix, f)$/;"	f
lobject.o	lua\\makefile	/^lobject.o: lobject.c lprefix.h lua.h luaconf.h lctype.h llimits.h \\$/;"	t
lobject_c	lua\\lobject.c	/^#define lobject_c$/;"	d	file:
lobject_h	lua\\lobject.h	/^#define lobject_h$/;"	d
local_filesys.o	dmlc-core\\Makefile	/^local_filesys.o: src\/io\/local_filesys.cc$/;"	t
localfunc	lua\\lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	typeref:typename:void	file:
localstat	lua\\lparser.c	/^static void localstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
lock	dmlc-core\\include\\dmlc\\concurrency.h	/^inline void Spinlock::lock() noexcept(true) {$/;"	f	class:dmlc::Spinlock	typeref:typename:void
lock	lua\\ltests.h	/^struct L_EXTRA { int lock; int *plock; };$/;"	m	struct:L_EXTRA	typeref:typename:int
lock_	dmlc-core\\include\\dmlc\\concurrency.h	/^  std::atomic_flag lock_;$/;"	m	class:dmlc::Spinlock	typeref:typename:std::atomic_flag
locvars	lua\\lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:Proto	typeref:typename:LocVar *
log(filename, parameter_table)	torch7\\doc\\cmdline.md	/^### log(filename, parameter_table) ###$/;"	S
log10	torch7\\Tensor.lua	/^local log10 = math.log10 or function(x) return math.log(x, 10) end$/;"	f
log10	torch7\\test\\timeSort.lua	/^    local log10 = math.log10 or function(x) return math.log(x, 10) end$/;"	f
log1p	bin\\torch7\\lib\\TH\\THGeneral.h	/^# define log1p(/;"	d
log1p	torch7\\lib\\TH\\THGeneral.h.in	/^# define log1p(/;"	d	file:
log2	lua\\testes\\nextvar.lua	/^local function log2 (x) return math.log(x, 2) end$/;"	f
log2_aux	lua\\ltests.c	/^static int log2_aux (lua_State *L) {$/;"	f	typeref:typename:int	file:
log2maxs	lua\\llimits.h	/^#define log2maxs(/;"	d
log_stream_	dmlc-core\\include\\dmlc\\logging.h	/^  std::ostream& log_stream_;$/;"	m	class:dmlc::LogMessage	typeref:typename:std::ostream &
log_stream_	dmlc-core\\include\\dmlc\\logging.h	/^  std::ostringstream log_stream_;$/;"	m	class:dmlc::CustomLogMessage	typeref:typename:std::ostringstream
log_stream_	dmlc-core\\include\\dmlc\\logging.h	/^  std::ostringstream log_stream_;$/;"	m	class:dmlc::LogMessageFatal	typeref:typename:std::ostringstream
log_stream_	nnvm\\include\\dmlc\\logging.h	/^  std::ostream& log_stream_;$/;"	m	class:dmlc::LogMessage	typeref:typename:std::ostream &
log_stream_	nnvm\\include\\dmlc\\logging.h	/^  std::ostringstream log_stream_;$/;"	m	class:dmlc::CustomLogMessage	typeref:typename:std::ostringstream
log_stream_	nnvm\\include\\dmlc\\logging.h	/^  std::ostringstream log_stream_;$/;"	m	class:dmlc::LogMessageFatal	typeref:typename:std::ostringstream
longSize	torch7\\lib\\TH\\THDiskFile.c	/^    int longSize;$/;"	m	struct:THDiskFile__	typeref:typename:int	file:
longSize	torch7\\lib\\TH\\THMemoryFile.c	/^	int longSize;$/;"	m	struct:THMemoryFile__	typeref:typename:int	file:
longSize([size])	torch7\\doc\\diskfile.md	/^### longSize([size]) ###$/;"	S
longSize([size])	torch7\\doc\\memoryfile.md	/^### longSize([size]) ###$/;"	S
lookahead	lua\\llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState	typeref:typename:Token
lookforfunc	lua\\loadlib.c	/^static int lookforfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	typeref:typename:int	file:
loop	lua\\testes\\cstack.lua	/^  local function loop (x, y, z)$/;"	f
loop	lua\\testes\\errors.lua	/^  local function loop (x,y,z) return 1 + loop(x, y, z) end$/;"	f
lopcodes.o	lua\\makefile	/^lopcodes.o: lopcodes.c lprefix.h lopcodes.h llimits.h lua.h luaconf.h$/;"	t
lopcodes_c	lua\\lopcodes.c	/^#define lopcodes_c$/;"	d	file:
lopcodes_h	lua\\lopcodes.h	/^#define lopcodes_h$/;"	d
lopnames_h	lua\\lopnames.h	/^#define lopnames_h$/;"	d
loslib.o	lua\\makefile	/^loslib.o: loslib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
loslib_c	lua\\loslib.c	/^#define loslib_c$/;"	d	file:
loss	example\\cifar_resnet.py	/^        loss, _ = sess.run([cross_entropy, train_step], feed_dict={x: batch_xs, label:batch_ys})$/;"	v
loss	example\\mnist_lenet.py	/^        loss, _ = sess.run([cross_entropy, train_step], feed_dict={x: batch_xs, label:batch_ys})$/;"	v
loss	example\\mnist_mlp_auto_shape_inference.py	/^        loss, _ = sess.run([cross_entropy, train_step], feed_dict={x: batch_xs, label:batch_ys})$/;"	v
lparser.o	lua\\makefile	/^lparser.o: lparser.c lprefix.h lua.h luaconf.h lcode.h llex.h lobject.h \\$/;"	t
lparser_c	lua\\lparser.c	/^#define lparser_c$/;"	d	file:
lparser_h	lua\\lparser.h	/^#define lparser_h$/;"	d
lprefix_h	lua\\lprefix.h	/^#define lprefix_h$/;"	d
ls	lua\\lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:LexState *
ls_byte	lua\\llimits.h	/^typedef signed char ls_byte;$/;"	t	typeref:typename:signed char
lsizenode	lua\\lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of 'node' array *\/$/;"	m	struct:Table	typeref:typename:lu_byte
lstate.o	lua\\makefile	/^lstate.o: lstate.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
lstate_c	lua\\lstate.c	/^#define lstate_c$/;"	d	file:
lstate_h	lua\\lstate.h	/^#define lstate_h$/;"	d
lstop	lua\\lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
lstring.o	lua\\makefile	/^lstring.o: lstring.c lprefix.h lua.h luaconf.h ldebug.h lstate.h \\$/;"	t
lstring_c	lua\\lstring.c	/^#define lstring_c$/;"	d	file:
lstring_h	lua\\lstring.h	/^#define lstring_h$/;"	d
lstrlib.o	lua\\makefile	/^lstrlib.o: lstrlib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lstrlib_c	lua\\lstrlib.c	/^#define lstrlib_c$/;"	d	file:
lsys_load	lua\\loadlib.c	/^static void *lsys_load (lua_State *L, const char *path, int seeglb) {$/;"	f	typeref:typename:void *	file:
lsys_sym	lua\\loadlib.c	/^static lua_CFunction lsys_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	typeref:typename:lua_CFunction	file:
lsys_unloadlib	lua\\loadlib.c	/^static void lsys_unloadlib (void *lib) {$/;"	f	typeref:typename:void	file:
ltable.o	lua\\makefile	/^ltable.o: ltable.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
ltable_c	lua\\ltable.c	/^#define ltable_c$/;"	d	file:
ltable_c	lua\\onelua.c	/^#define ltable_c$/;"	d	file:
ltable_h	lua\\ltable.h	/^#define ltable_h$/;"	d
ltablib.o	lua\\makefile	/^ltablib.o: ltablib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
ltablib_c	lua\\ltablib.c	/^#define ltablib_c$/;"	d	file:
ltests.o	lua\\makefile	/^ltests.o: ltests.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
ltests_c	lua\\ltests.c	/^#define ltests_c$/;"	d	file:
ltests_h	lua\\ltests.h	/^#define ltests_h$/;"	d
ltm.o	lua\\makefile	/^ltm.o: ltm.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
ltm_c	lua\\ltm.c	/^#define ltm_c$/;"	d	file:
ltm_h	lua\\ltm.h	/^#define ltm_h$/;"	d
ltolower	lua\\lctype.h	/^#define ltolower(/;"	d
lu_byte	lua\\llimits.h	/^typedef unsigned char lu_byte;$/;"	t	typeref:typename:unsigned char
lu_int32	lua\\lmathlib.c	/^typedef unsigned int lu_int32;$/;"	t	typeref:typename:unsigned int	file:
lu_int32	lua\\lmathlib.c	/^typedef unsigned long lu_int32;$/;"	t	typeref:typename:unsigned long	file:
lu_mem	lua\\llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t	typeref:typename:LUAI_UMEM
lu_mem	lua\\llimits.h	/^typedef size_t lu_mem;$/;"	t	typeref:typename:size_t
lu_mem	lua\\llimits.h	/^typedef unsigned long lu_mem;$/;"	t	typeref:typename:unsigned long
lua.o	lua\\makefile	/^lua.o: lua.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
luaB_assert	lua\\lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_auxwrap	lua\\lcorolib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_close	lua\\lcorolib.c	/^static int luaB_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_cocreate	lua\\lcorolib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_collectgarbage	lua\\lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_coresume	lua\\lcorolib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_corunning	lua\\lcorolib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_costatus	lua\\lcorolib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_cowrap	lua\\lcorolib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_dofile	lua\\lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_error	lua\\lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_getmetatable	lua\\lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_ipairs	lua\\lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_load	lua\\lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_loadfile	lua\\lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_next	lua\\lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_opentests	lua\\ltests.c	/^int luaB_opentests (lua_State *L) {$/;"	f	typeref:typename:int
luaB_pairs	lua\\lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_pcall	lua\\lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_print	lua\\lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawequal	lua\\lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawget	lua\\lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawlen	lua\\lbaselib.c	/^static int luaB_rawlen (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawset	lua\\lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_select	lua\\lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_setmetatable	lua\\lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_tonumber	lua\\lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_tostring	lua\\lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_type	lua\\lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_warn	lua\\lbaselib.c	/^static int luaB_warn (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_xpcall	lua\\lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_yield	lua\\lcorolib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_yieldable	lua\\lcorolib.c	/^static int luaB_yieldable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaC_barrier	lua\\lgc.h	/^#define luaC_barrier(/;"	d
luaC_barrier_	lua\\lgc.c	/^void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {$/;"	f	typeref:typename:void
luaC_barrierback	lua\\lgc.h	/^#define luaC_barrierback(/;"	d
luaC_barrierback_	lua\\lgc.c	/^void luaC_barrierback_ (lua_State *L, GCObject *o) {$/;"	f	typeref:typename:void
luaC_changemode	lua\\lgc.c	/^void luaC_changemode (lua_State *L, int newmode) {$/;"	f	typeref:typename:void
luaC_checkGC	lua\\lgc.h	/^#define luaC_checkGC(/;"	d
luaC_checkfinalizer	lua\\lgc.c	/^void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt) {$/;"	f	typeref:typename:void
luaC_condGC	lua\\lgc.h	/^#define luaC_condGC(/;"	d
luaC_fix	lua\\lgc.c	/^void luaC_fix (lua_State *L, GCObject *o) {$/;"	f	typeref:typename:void
luaC_freeallobjects	lua\\lgc.c	/^void luaC_freeallobjects (lua_State *L) {$/;"	f	typeref:typename:void
luaC_fullgc	lua\\lgc.c	/^void luaC_fullgc (lua_State *L, int isemergency) {$/;"	f	typeref:typename:void
luaC_newobj	lua\\lgc.c	/^GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {$/;"	f	typeref:typename:GCObject *
luaC_objbarrier	lua\\lgc.h	/^#define luaC_objbarrier(/;"	d
luaC_runtilstate	lua\\lgc.c	/^void luaC_runtilstate (lua_State *L, int statesmask) {$/;"	f	typeref:typename:void
luaC_step	lua\\lgc.c	/^void luaC_step (lua_State *L) {$/;"	f	typeref:typename:void
luaC_white	lua\\lgc.h	/^#define luaC_white(/;"	d
luaD_call	lua\\ldo.c	/^void luaD_call (lua_State *L, StkId func, int nresults) {$/;"	f	typeref:typename:void
luaD_callnoyield	lua\\ldo.c	/^void luaD_callnoyield (lua_State *L, StkId func, int nResults) {$/;"	f	typeref:typename:void
luaD_checkstack	lua\\ldo.h	/^#define luaD_checkstack(/;"	d
luaD_checkstackaux	lua\\ldo.h	/^#define luaD_checkstackaux(/;"	d
luaD_growstack	lua\\ldo.c	/^int luaD_growstack (lua_State *L, int n, int raiseerror) {$/;"	f	typeref:typename:int
luaD_hook	lua\\ldo.c	/^void luaD_hook (lua_State *L, int event, int line,$/;"	f	typeref:typename:void
luaD_hookcall	lua\\ldo.c	/^void luaD_hookcall (lua_State *L, CallInfo *ci) {$/;"	f	typeref:typename:void
luaD_inctop	lua\\ldo.c	/^void luaD_inctop (lua_State *L) {$/;"	f	typeref:typename:void
luaD_pcall	lua\\ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f	typeref:typename:int
luaD_poscall	lua\\ldo.c	/^void luaD_poscall (lua_State *L, CallInfo *ci, int nres) {$/;"	f	typeref:typename:void
luaD_pretailcall	lua\\ldo.c	/^void luaD_pretailcall (lua_State *L, CallInfo *ci, StkId func, int narg1) {$/;"	f	typeref:typename:void
luaD_protectedparser	lua\\ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,$/;"	f	typeref:typename:int
luaD_rawrunprotected	lua\\ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f	typeref:typename:int
luaD_reallocstack	lua\\ldo.c	/^int luaD_reallocstack (lua_State *L, int newsize, int raiseerror) {$/;"	f	typeref:typename:int
luaD_seterrorobj	lua\\ldo.c	/^void luaD_seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	typeref:typename:void
luaD_shrinkstack	lua\\ldo.c	/^void luaD_shrinkstack (lua_State *L) {$/;"	f	typeref:typename:void
luaD_throw	lua\\ldo.c	/^l_noret luaD_throw (lua_State *L, int errcode) {$/;"	f	typeref:typename:l_noret
luaD_tryfuncTM	lua\\ldo.c	/^void luaD_tryfuncTM (lua_State *L, StkId func) {$/;"	f	typeref:typename:void
luaE_enterCcall	lua\\lstate.c	/^void luaE_enterCcall (lua_State *L) {$/;"	f	typeref:typename:void
luaE_exitCcall	lua\\lstate.h	/^#define luaE_exitCcall(/;"	d
luaE_extendCI	lua\\lstate.c	/^CallInfo *luaE_extendCI (lua_State *L) {$/;"	f	typeref:typename:CallInfo *
luaE_freeCI	lua\\lstate.c	/^void luaE_freeCI (lua_State *L) {$/;"	f	typeref:typename:void
luaE_freethread	lua\\lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f	typeref:typename:void
luaE_setdebt	lua\\lstate.c	/^void luaE_setdebt (global_State *g, l_mem debt) {$/;"	f	typeref:typename:void
luaE_shrinkCI	lua\\lstate.c	/^void luaE_shrinkCI (lua_State *L) {$/;"	f	typeref:typename:void
luaE_warning	lua\\lstate.c	/^void luaE_warning (lua_State *L, const char *msg, int tocont) {$/;"	f	typeref:typename:void
luaF_close	lua\\lfunc.c	/^int luaF_close (lua_State *L, StkId level, int status) {$/;"	f	typeref:typename:int
luaF_findupval	lua\\lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f	typeref:typename:UpVal *
luaF_freeproto	lua\\lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f	typeref:typename:void
luaF_getlocalname	lua\\lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f	typeref:typename:const char *
luaF_initupvals	lua\\lfunc.c	/^void luaF_initupvals (lua_State *L, LClosure *cl) {$/;"	f	typeref:typename:void
luaF_newCclosure	lua\\lfunc.c	/^CClosure *luaF_newCclosure (lua_State *L, int n) {$/;"	f	typeref:typename:CClosure *
luaF_newLclosure	lua\\lfunc.c	/^LClosure *luaF_newLclosure (lua_State *L, int n) {$/;"	f	typeref:typename:LClosure *
luaF_newproto	lua\\lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f	typeref:typename:Proto *
luaF_newtbcupval	lua\\lfunc.c	/^void luaF_newtbcupval (lua_State *L, StkId level) {$/;"	f	typeref:typename:void
luaF_unlinkupval	lua\\lfunc.c	/^void luaF_unlinkupval (UpVal *uv) {$/;"	f	typeref:typename:void
luaG_	torch7\\generic\\luaG.h	/^#define luaG_(/;"	d
luaG_	torch7\\generic\\luaG.h	/^static real luaG_(checkreal)(lua_State *L, int idx) {$/;"	f	typeref:typename:real
luaG_	torch7\\generic\\luaG.h	/^static real luaG_(optreal)(lua_State *L, int idx, real n) {$/;"	f	typeref:typename:real
luaG_	torch7\\generic\\luaG.h	/^static void luaG_(pushreal)(lua_State *L, real n) {$/;"	f	typeref:typename:void
luaG_addinfo	lua\\ldebug.c	/^const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,$/;"	f	typeref:typename:const char *
luaG_concaterror	lua\\ldebug.c	/^l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:l_noret
luaG_errormsg	lua\\ldebug.c	/^l_noret luaG_errormsg (lua_State *L) {$/;"	f	typeref:typename:l_noret
luaG_findlocal	lua\\ldebug.c	/^const char *luaG_findlocal (lua_State *L, CallInfo *ci, int n, StkId *pos) {$/;"	f	typeref:typename:const char *
luaG_forerror	lua\\ldebug.c	/^l_noret luaG_forerror (lua_State *L, const TValue *o, const char *what) {$/;"	f	typeref:typename:l_noret
luaG_getfuncline	lua\\ldebug.c	/^int luaG_getfuncline (const Proto *f, int pc) {$/;"	f	typeref:typename:int
luaG_opinterror	lua\\ldebug.c	/^l_noret luaG_opinterror (lua_State *L, const TValue *p1,$/;"	f	typeref:typename:l_noret
luaG_ordererror	lua\\ldebug.c	/^l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:l_noret
luaG_runerror	lua\\ldebug.c	/^l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:l_noret
luaG_tointerror	lua\\ldebug.c	/^l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:l_noret
luaG_traceexec	lua\\ldebug.c	/^int luaG_traceexec (lua_State *L, const Instruction *pc) {$/;"	f	typeref:typename:int
luaG_typeerror	lua\\ldebug.c	/^l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f	typeref:typename:l_noret
luaH_free	lua\\ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f	typeref:typename:void
luaH_get	lua\\ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f	typeref:typename:const TValue *
luaH_getint	lua\\ltable.c	/^const TValue *luaH_getint (Table *t, lua_Integer key) {$/;"	f	typeref:typename:const TValue *
luaH_getn	lua\\ltable.c	/^lua_Unsigned luaH_getn (Table *t) {$/;"	f	typeref:typename:lua_Unsigned
luaH_getshortstr	lua\\ltable.c	/^const TValue *luaH_getshortstr (Table *t, TString *key) {$/;"	f	typeref:typename:const TValue *
luaH_getstr	lua\\ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f	typeref:typename:const TValue *
luaH_isdummy	lua\\ltable.c	/^int luaH_isdummy (const Table *t) { return isdummy(t); }$/;"	f	typeref:typename:int
luaH_mainposition	lua\\ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f	typeref:typename:Node *
luaH_new	lua\\ltable.c	/^Table *luaH_new (lua_State *L) {$/;"	f	typeref:typename:Table *
luaH_newkey	lua\\ltable.c	/^TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f	typeref:typename:TValue *
luaH_next	lua\\ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f	typeref:typename:int
luaH_realasize	lua\\ltable.c	/^LUAI_FUNC unsigned int luaH_realasize (const Table *t) {$/;"	f	typeref:typename:LUAI_FUNC unsigned int
luaH_resize	lua\\ltable.c	/^void luaH_resize (lua_State *L, Table *t, unsigned int newasize,$/;"	f	typeref:typename:void
luaH_resizearray	lua\\ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {$/;"	f	typeref:typename:void
luaH_set	lua\\ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f	typeref:typename:TValue *
luaH_setint	lua\\ltable.c	/^void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {$/;"	f	typeref:typename:void
luaK_checkstack	lua\\lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f	typeref:typename:void
luaK_code	lua\\lcode.c	/^static int luaK_code (FuncState *fs, Instruction i) {$/;"	f	typeref:typename:int	file:
luaK_codeABC	lua\\lcode.h	/^#define luaK_codeABC(/;"	d
luaK_codeABCk	lua\\lcode.c	/^int luaK_codeABCk (FuncState *fs, OpCode o, int a, int b, int c, int k) {$/;"	f	typeref:typename:int
luaK_codeABx	lua\\lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f	typeref:typename:int
luaK_codeAsBx	lua\\lcode.c	/^int luaK_codeAsBx (FuncState *fs, OpCode o, int a, int bc) {$/;"	f	typeref:typename:int
luaK_codek	lua\\lcode.c	/^static int luaK_codek (FuncState *fs, int reg, int k) {$/;"	f	typeref:typename:int	file:
luaK_concat	lua\\lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f	typeref:typename:void
luaK_dischargevars	lua\\lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2K	lua\\lcode.c	/^static int luaK_exp2K (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int	file:
luaK_exp2RK	lua\\lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int
luaK_exp2anyreg	lua\\lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int
luaK_exp2anyregup	lua\\lcode.c	/^void luaK_exp2anyregup (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2nextreg	lua\\lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2val	lua\\lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_finish	lua\\lcode.c	/^void luaK_finish (FuncState *fs) {$/;"	f	typeref:typename:void
luaK_fixline	lua\\lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f	typeref:typename:void
luaK_float	lua\\lcode.c	/^static void luaK_float (FuncState *fs, int reg, lua_Number f) {$/;"	f	typeref:typename:void	file:
luaK_getlabel	lua\\lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f	typeref:typename:int
luaK_goiffalse	lua\\lcode.c	/^void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_goiftrue	lua\\lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_indexed	lua\\lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f	typeref:typename:void
luaK_infix	lua\\lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f	typeref:typename:void
luaK_int	lua\\lcode.c	/^void luaK_int (FuncState *fs, int reg, lua_Integer i) {$/;"	f	typeref:typename:void
luaK_intK	lua\\lcode.c	/^static int luaK_intK (FuncState *fs, lua_Integer n) {$/;"	f	typeref:typename:int	file:
luaK_isKint	lua\\lcode.c	/^int luaK_isKint (expdesc *e) {$/;"	f	typeref:typename:int
luaK_jump	lua\\lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f	typeref:typename:int
luaK_jumpto	lua\\lcode.h	/^#define luaK_jumpto(/;"	d
luaK_nil	lua\\lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f	typeref:typename:void
luaK_numberK	lua\\lcode.c	/^static int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f	typeref:typename:int	file:
luaK_patchlist	lua\\lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f	typeref:typename:void
luaK_patchtohere	lua\\lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f	typeref:typename:void
luaK_posfix	lua\\lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr opr,$/;"	f	typeref:typename:void
luaK_prefix	lua\\lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {$/;"	f	typeref:typename:void
luaK_reserveregs	lua\\lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f	typeref:typename:void
luaK_ret	lua\\lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f	typeref:typename:void
luaK_self	lua\\lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f	typeref:typename:void
luaK_semerror	lua\\lcode.c	/^l_noret luaK_semerror (LexState *ls, const char *msg) {$/;"	f	typeref:typename:l_noret
luaK_setlist	lua\\lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f	typeref:typename:void
luaK_setmultret	lua\\lcode.h	/^#define luaK_setmultret(/;"	d
luaK_setoneret	lua\\lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_setreturns	lua\\lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f	typeref:typename:void
luaK_storevar	lua\\lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f	typeref:typename:void
luaK_stringK	lua\\lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f	typeref:typename:int
luaL_Buffer	lua\\lauxlib.h	/^struct luaL_Buffer {$/;"	s
luaL_Buffer	lua\\lauxlib.h	/^typedef struct luaL_Buffer luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	lua\\lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	lua\\lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Stream	lua\\lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	lua\\lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_addchar	lua\\lauxlib.h	/^#define luaL_addchar(/;"	d
luaL_addgsub	lua\\lauxlib.c	/^LUALIB_API void luaL_addgsub (luaL_Buffer *b, const char *s,$/;"	f	typeref:typename:LUALIB_API void
luaL_addlstring	lua\\lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addlstring	lua\\lauxlib.h	/^LUALIB_API void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,const char * s,size_t l)
luaL_addsize	lua\\lauxlib.h	/^#define luaL_addsize(/;"	d
luaL_addstring	lua\\lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addstring	lua\\lauxlib.h	/^LUALIB_API void (luaL_addstring) (luaL_Buffer *B, const char *s);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,const char * s)
luaL_addvalue	lua\\lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addvalue	lua\\lauxlib.h	/^LUALIB_API void (luaL_addvalue) (luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B)
luaL_argcheck	lua\\lauxlib.h	/^#define luaL_argcheck(/;"	d
luaL_argerror	lua\\lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int arg, const char *extramsg) {$/;"	f	typeref:typename:LUALIB_API int
luaL_argerror	lua\\lauxlib.h	/^LUALIB_API int (luaL_argerror) (lua_State *L, int arg, const char *extramsg);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int arg,const char * extramsg)
luaL_argexpected	lua\\lauxlib.h	/^#define luaL_argexpected(/;"	d
luaL_buffaddr	lua\\lauxlib.h	/^#define luaL_buffaddr(/;"	d
luaL_buffinit	lua\\lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_buffinit	lua\\lauxlib.h	/^LUALIB_API void (luaL_buffinit) (lua_State *L, luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,luaL_Buffer * B)
luaL_buffinitsize	lua\\lauxlib.c	/^LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {$/;"	f	typeref:typename:LUALIB_API char *
luaL_buffinitsize	lua\\lauxlib.h	/^LUALIB_API char *(luaL_buffinitsize) (lua_State *L, luaL_Buffer *B, size_t sz);$/;"	v	typeref:typename:LUALIB_API char * ()(lua_State * L,luaL_Buffer * B,size_t sz)
luaL_bufflen	lua\\lauxlib.h	/^#define luaL_bufflen(/;"	d
luaL_callmeta	lua\\lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f	typeref:typename:LUALIB_API int
luaL_callmeta	lua\\lauxlib.h	/^LUALIB_API int (luaL_callmeta) (lua_State *L, int obj, const char *e);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int obj,const char * e)
luaL_checkany	lua\\lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int arg) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkany	lua\\lauxlib.h	/^LUALIB_API void (luaL_checkany) (lua_State *L, int arg);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int arg)
luaL_checkint	lua\\lauxlib.h	/^#define luaL_checkint(/;"	d
luaL_checkint	torch7\\general.h	/^#define luaL_checkint(/;"	d
luaL_checkinteger	lua\\lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int arg) {$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_checklong	lua\\lauxlib.h	/^#define luaL_checklong(/;"	d
luaL_checklong	torch7\\general.h	/^#define luaL_checklong(/;"	d
luaL_checklstring	lua\\lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int arg, size_t *len) {$/;"	f	typeref:typename:LUALIB_API const char *
luaL_checklstring	lua\\lauxlib.h	/^LUALIB_API const char *(luaL_checklstring) (lua_State *L, int arg,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int arg,size_t * l)
luaL_checknumber	lua\\lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int arg) {$/;"	f	typeref:typename:LUALIB_API lua_Number
luaL_checkoption	lua\\lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int arg, const char *def,$/;"	f	typeref:typename:LUALIB_API int
luaL_checkoption	lua\\lauxlib.h	/^LUALIB_API int (luaL_checkoption) (lua_State *L, int arg, const char *def,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int arg,const char * def,const char * const lst[])
luaL_checkstack	lua\\lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkstack	lua\\lauxlib.h	/^LUALIB_API void (luaL_checkstack) (lua_State *L, int sz, const char *msg);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int sz,const char * msg)
luaL_checkstring	lua\\lauxlib.h	/^#define luaL_checkstring(/;"	d
luaL_checktype	lua\\lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int arg, int t) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checktype	lua\\lauxlib.h	/^LUALIB_API void (luaL_checktype) (lua_State *L, int arg, int t);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int arg,int t)
luaL_checkudata	lua\\lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f	typeref:typename:LUALIB_API void *
luaL_checkudata	lua\\lauxlib.h	/^LUALIB_API void *(luaL_checkudata) (lua_State *L, int ud, const char *tname);$/;"	v	typeref:typename:LUALIB_API void * ()(lua_State * L,int ud,const char * tname)
luaL_checkunsigned	lua\\lauxlib.h	/^#define luaL_checkunsigned(/;"	d
luaL_checkversion	lua\\lauxlib.h	/^#define luaL_checkversion(/;"	d
luaL_checkversion_	lua\\lauxlib.c	/^LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver, size_t sz) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkversion_	lua\\lauxlib.h	/^LUALIB_API void (luaL_checkversion_) (lua_State *L, lua_Number ver, size_t sz);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,lua_Number ver,size_t sz)
luaL_dofile	lua\\lauxlib.h	/^#define luaL_dofile(/;"	d
luaL_dostring	lua\\lauxlib.h	/^#define luaL_dostring(/;"	d
luaL_error	lua\\lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:LUALIB_API int
luaL_error	lua\\lauxlib.h	/^LUALIB_API int (luaL_error) (lua_State *L, const char *fmt, ...);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * fmt,...)
luaL_execresult	lua\\lauxlib.c	/^LUALIB_API int luaL_execresult (lua_State *L, int stat) {$/;"	f	typeref:typename:LUALIB_API int
luaL_execresult	lua\\lauxlib.h	/^LUALIB_API int (luaL_execresult) (lua_State *L, int stat);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int stat)
luaL_fileresult	lua\\lauxlib.c	/^LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_fileresult	lua\\lauxlib.h	/^LUALIB_API int (luaL_fileresult) (lua_State *L, int stat, const char *fname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int stat,const char * fname)
luaL_getmetafield	lua\\lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f	typeref:typename:LUALIB_API int
luaL_getmetafield	lua\\lauxlib.h	/^LUALIB_API int (luaL_getmetafield) (lua_State *L, int obj, const char *e);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int obj,const char * e)
luaL_getmetatable	lua\\lauxlib.h	/^#define luaL_getmetatable(/;"	d
luaL_getsubtable	lua\\lauxlib.c	/^LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_getsubtable	lua\\lauxlib.h	/^LUALIB_API int (luaL_getsubtable) (lua_State *L, int idx, const char *fname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int idx,const char * fname)
luaL_gsub	lua\\lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s,$/;"	f	typeref:typename:LUALIB_API const char *
luaL_gsub	lua\\lauxlib.h	/^LUALIB_API const char *(luaL_gsub) (lua_State *L, const char *s,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,const char * s,const char * p,const char * r)
luaL_len	lua\\lauxlib.c	/^LUALIB_API lua_Integer luaL_len (lua_State *L, int idx) {$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_loadbuffer	lua\\lauxlib.h	/^#define luaL_loadbuffer(/;"	d
luaL_loadbufferx	lua\\lauxlib.c	/^LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,$/;"	f	typeref:typename:LUALIB_API int
luaL_loadbufferx	lua\\lauxlib.h	/^LUALIB_API int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * buff,size_t sz,const char * name,const char * mode)
luaL_loadfile	lua\\lauxlib.h	/^#define luaL_loadfile(/;"	d
luaL_loadfilex	lua\\lauxlib.c	/^LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,$/;"	f	typeref:typename:LUALIB_API int
luaL_loadfilex	lua\\lauxlib.h	/^LUALIB_API int (luaL_loadfilex) (lua_State *L, const char *filename,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * filename,const char * mode)
luaL_loadstring	lua\\lauxlib.c	/^LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {$/;"	f	typeref:typename:LUALIB_API int
luaL_loadstring	lua\\lauxlib.h	/^LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * s)
luaL_newlib	lua\\lauxlib.h	/^#define luaL_newlib(/;"	d
luaL_newlibtable	lua\\lauxlib.h	/^#define luaL_newlibtable(/;"	d
luaL_newmetatable	lua\\lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_newmetatable	lua\\lauxlib.h	/^LUALIB_API int   (luaL_newmetatable) (lua_State *L, const char *tname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * tname)
luaL_newstate	lua\\lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f	typeref:typename:LUALIB_API lua_State *
luaL_newstate	lua\\lauxlib.h	/^LUALIB_API lua_State *(luaL_newstate) (void);$/;"	v	typeref:typename:LUALIB_API lua_State * ()(void)
luaL_newstate	lua\\ltests.h	/^#define luaL_newstate(/;"	d
luaL_openlibs	lua\\linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API void
luaL_openlibs	lua\\ltests.h	/^#define luaL_openlibs(/;"	d
luaL_openlibs	lua\\lualib.h	/^LUALIB_API void (luaL_openlibs) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L)
luaL_opt	lua\\lauxlib.h	/^#define luaL_opt(/;"	d
luaL_optint	lua\\lauxlib.h	/^#define luaL_optint(/;"	d
luaL_optinteger	lua\\lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int arg,$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_optlong	lua\\lauxlib.h	/^#define luaL_optlong(/;"	d
luaL_optlong	torch7\\general.h	/^#define luaL_optlong(/;"	d
luaL_optlstring	lua\\lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int arg,$/;"	f	typeref:typename:LUALIB_API const char *
luaL_optlstring	lua\\lauxlib.h	/^LUALIB_API const char *(luaL_optlstring) (lua_State *L, int arg,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int arg,const char * def,size_t * l)
luaL_optnumber	lua\\lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number def) {$/;"	f	typeref:typename:LUALIB_API lua_Number
luaL_optstring	lua\\lauxlib.h	/^#define luaL_optstring(/;"	d
luaL_optunsigned	lua\\lauxlib.h	/^#define luaL_optunsigned(/;"	d
luaL_prepbuffer	lua\\lauxlib.h	/^#define luaL_prepbuffer(/;"	d
luaL_prepbuffsize	lua\\lauxlib.c	/^LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f	typeref:typename:LUALIB_API char *
luaL_prepbuffsize	lua\\lauxlib.h	/^LUALIB_API char *(luaL_prepbuffsize) (luaL_Buffer *B, size_t sz);$/;"	v	typeref:typename:LUALIB_API char * ()(luaL_Buffer * B,size_t sz)
luaL_pushresult	lua\\lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_pushresult	lua\\lauxlib.h	/^LUALIB_API void (luaL_pushresult) (luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B)
luaL_pushresultsize	lua\\lauxlib.c	/^LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {$/;"	f	typeref:typename:LUALIB_API void
luaL_pushresultsize	lua\\lauxlib.h	/^LUALIB_API void (luaL_pushresultsize) (luaL_Buffer *B, size_t sz);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,size_t sz)
luaL_ref	lua\\lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f	typeref:typename:LUALIB_API int
luaL_ref	lua\\lauxlib.h	/^LUALIB_API int (luaL_ref) (lua_State *L, int t);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int t)
luaL_requiref	lua\\lauxlib.c	/^LUALIB_API void luaL_requiref (lua_State *L, const char *modname,$/;"	f	typeref:typename:LUALIB_API void
luaL_requiref	lua\\lauxlib.h	/^LUALIB_API void (luaL_requiref) (lua_State *L, const char *modname,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * modname,lua_CFunction openf,int glb)
luaL_setfuncs	lua\\lauxlib.c	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f	typeref:typename:LUALIB_API void
luaL_setfuncs	lua\\lauxlib.h	/^LUALIB_API void (luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const luaL_Reg * l,int nup)
luaL_setmetatable	lua\\lauxlib.c	/^LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {$/;"	f	typeref:typename:LUALIB_API void
luaL_setmetatable	lua\\lauxlib.h	/^LUALIB_API void  (luaL_setmetatable) (lua_State *L, const char *tname);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * tname)
luaL_testudata	lua\\lauxlib.c	/^LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {$/;"	f	typeref:typename:LUALIB_API void *
luaL_testudata	lua\\lauxlib.h	/^LUALIB_API void *(luaL_testudata) (lua_State *L, int ud, const char *tname);$/;"	v	typeref:typename:LUALIB_API void * ()(lua_State * L,int ud,const char * tname)
luaL_tolstring	lua\\lauxlib.c	/^LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f	typeref:typename:LUALIB_API const char *
luaL_tolstring	lua\\lauxlib.h	/^LUALIB_API const char *(luaL_tolstring) (lua_State *L, int idx, size_t *len);$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int idx,size_t * len)
luaL_traceback	lua\\lauxlib.c	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,$/;"	f	typeref:typename:LUALIB_API void
luaL_traceback	lua\\lauxlib.h	/^LUALIB_API void (luaL_traceback) (lua_State *L, lua_State *L1,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,lua_State * L1,const char * msg,int level)
luaL_typeerror	lua\\lauxlib.c	/^int luaL_typeerror (lua_State *L, int arg, const char *tname) {$/;"	f	typeref:typename:int
luaL_typeerror	lua\\lauxlib.h	/^LUALIB_API int (luaL_typeerror) (lua_State *L, int arg, const char *tname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int arg,const char * tname)
luaL_typename	lua\\lauxlib.h	/^#define luaL_typename(/;"	d
luaL_typerror	torch7\\lib\\luaT\\luaT.h	/^static int luaL_typerror(lua_State *L, int narg, const char *tname)$/;"	f	typeref:typename:int
luaL_unref	lua\\lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f	typeref:typename:LUALIB_API void
luaL_unref	lua\\lauxlib.h	/^LUALIB_API void (luaL_unref) (lua_State *L, int t, int ref);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int t,int ref)
luaL_where	lua\\lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f	typeref:typename:LUALIB_API void
luaL_where	lua\\lauxlib.h	/^LUALIB_API void (luaL_where) (lua_State *L, int lvl);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int lvl)
luaM_checksize	lua\\lmem.h	/^#define luaM_checksize(/;"	d
luaM_error	lua\\lmem.h	/^#define luaM_error(/;"	d
luaM_free	lua\\lmem.h	/^#define luaM_free(/;"	d
luaM_free_	lua\\lmem.c	/^void luaM_free_ (lua_State *L, void *block, size_t osize) {$/;"	f	typeref:typename:void
luaM_freearray	lua\\lmem.h	/^#define luaM_freearray(/;"	d
luaM_freemem	lua\\lmem.h	/^#define luaM_freemem(/;"	d
luaM_growaux_	lua\\lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int nelems, int *psize,$/;"	f	typeref:typename:void *
luaM_growvector	lua\\lmem.h	/^#define luaM_growvector(/;"	d
luaM_limitN	lua\\lmem.h	/^#define luaM_limitN(/;"	d
luaM_malloc_	lua\\lmem.c	/^void *luaM_malloc_ (lua_State *L, size_t size, int tag) {$/;"	f	typeref:typename:void *
luaM_new	lua\\lmem.h	/^#define luaM_new(/;"	d
luaM_newobject	lua\\lmem.h	/^#define luaM_newobject(/;"	d
luaM_newvector	lua\\lmem.h	/^#define luaM_newvector(/;"	d
luaM_newvectorchecked	lua\\lmem.h	/^#define luaM_newvectorchecked(/;"	d
luaM_realloc_	lua\\lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f	typeref:typename:void *
luaM_reallocvchar	lua\\lmem.h	/^#define luaM_reallocvchar(/;"	d
luaM_reallocvector	lua\\lmem.h	/^#define luaM_reallocvector(/;"	d
luaM_saferealloc_	lua\\lmem.c	/^void *luaM_saferealloc_ (lua_State *L, void *block, size_t osize,$/;"	f	typeref:typename:void *
luaM_shrinkvector	lua\\lmem.h	/^#define luaM_shrinkvector(/;"	d
luaM_shrinkvector_	lua\\lmem.c	/^void *luaM_shrinkvector_ (lua_State *L, void *block, int *size,$/;"	f	typeref:typename:void *
luaM_testsize	lua\\lmem.h	/^#define luaM_testsize(/;"	d
luaM_toobig	lua\\lmem.c	/^l_noret luaM_toobig (lua_State *L) {$/;"	f	typeref:typename:l_noret
luaO_arith	lua\\lobject.c	/^void luaO_arith (lua_State *L, int op, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:void
luaO_ceillog2	lua\\lobject.c	/^int luaO_ceillog2 (unsigned int x) {$/;"	f	typeref:typename:int
luaO_chunkid	lua\\lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t srclen) {$/;"	f	typeref:typename:void
luaO_fb2int	lua\\lobject.c	/^int luaO_fb2int (int x) {$/;"	f	typeref:typename:int
luaO_hexavalue	lua\\lobject.c	/^int luaO_hexavalue (int c) {$/;"	f	typeref:typename:int
luaO_int2fb	lua\\lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f	typeref:typename:int
luaO_pushfstring	lua\\lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:const char *
luaO_pushvfstring	lua\\lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f	typeref:typename:const char *
luaO_rawarith	lua\\lobject.c	/^int luaO_rawarith (lua_State *L, int op, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:int
luaO_str2num	lua\\lobject.c	/^size_t luaO_str2num (const char *s, TValue *o) {$/;"	f	typeref:typename:size_t
luaO_tostring	lua\\lobject.c	/^void luaO_tostring (lua_State *L, TValue *obj) {$/;"	f	typeref:typename:void
luaO_utf8esc	lua\\lobject.c	/^int luaO_utf8esc (char *buff, unsigned long x) {$/;"	f	typeref:typename:int
luaP_opmodes	lua\\lopcodes.c	/^LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v	typeref:typename:LUAI_DDEF const lu_byte[]
luaS_clearcache	lua\\lstring.c	/^void luaS_clearcache (global_State *g) {$/;"	f	typeref:typename:void
luaS_createlngstrobj	lua\\lstring.c	/^TString *luaS_createlngstrobj (lua_State *L, size_t l) {$/;"	f	typeref:typename:TString *
luaS_eqlngstr	lua\\lstring.c	/^int luaS_eqlngstr (TString *a, TString *b) {$/;"	f	typeref:typename:int
luaS_hash	lua\\lstring.c	/^unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {$/;"	f	typeref:typename:unsigned int
luaS_hashlongstr	lua\\lstring.c	/^unsigned int luaS_hashlongstr (TString *ts) {$/;"	f	typeref:typename:unsigned int
luaS_init	lua\\lstring.c	/^void luaS_init (lua_State *L) {$/;"	f	typeref:typename:void
luaS_new	lua\\lstring.c	/^TString *luaS_new (lua_State *L, const char *str) {$/;"	f	typeref:typename:TString *
luaS_newliteral	lua\\lstring.h	/^#define luaS_newliteral(/;"	d
luaS_newlstr	lua\\lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f	typeref:typename:TString *
luaS_newudata	lua\\lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s, int nuvalue) {$/;"	f	typeref:typename:Udata *
luaS_remove	lua\\lstring.c	/^void luaS_remove (lua_State *L, TString *ts) {$/;"	f	typeref:typename:void
luaS_resize	lua\\lstring.c	/^void luaS_resize (lua_State *L, int nsize) {$/;"	f	typeref:typename:void
luaT_adjustvarargs	lua\\ltm.c	/^void luaT_adjustvarargs (lua_State *L, int nfixparams, CallInfo *ci,$/;"	f	typeref:typename:void
luaT_alloc	torch7\\lib\\luaT\\luaT.c	/^void* luaT_alloc(lua_State *L, ptrdiff_t size)$/;"	f	typeref:typename:void *
luaT_callTM	lua\\ltm.c	/^void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	typeref:typename:void
luaT_callTMres	lua\\ltm.c	/^void luaT_callTMres (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	typeref:typename:void
luaT_callorderTM	lua\\ltm.c	/^int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:int
luaT_callorderiTM	lua\\ltm.c	/^int luaT_callorderiTM (lua_State *L, const TValue *p1, int v2,$/;"	f	typeref:typename:int
luaT_cdataname	torch7\\lib\\luaT\\luaT.c	/^static const char* luaT_cdataname(lua_State *L, int ud, const char *tname)$/;"	f	typeref:typename:const char *	file:
luaT_checkboolean	torch7\\lib\\luaT\\luaT.c	/^int luaT_checkboolean(lua_State *L, int ud)$/;"	f	typeref:typename:int
luaT_checkinteger	torch7\\lib\\luaT\\luaT.c	/^ptrdiff_t luaT_checkinteger(lua_State *L, int idx)$/;"	f	typeref:typename:ptrdiff_t
luaT_checklong	torch7\\lib\\luaT\\luaT.c	/^long luaT_checklong(lua_State *L, int idx)$/;"	f	typeref:typename:long
luaT_checktypename2id	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_checktypename2id(lua_State *L, const char *tname)$/;"	f	typeref:typename:const char *
luaT_checkudata	torch7\\lib\\luaT\\luaT.c	/^void *luaT_checkudata(lua_State *L, int ud, const char *tname)$/;"	f	typeref:typename:void *
luaT_classmodulename	torch7\\lib\\luaT\\luaT.c	/^int luaT_classmodulename(const char *tname, char *parent_name)$/;"	f	typeref:typename:int
luaT_classrootname	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_classrootname(const char *tname)$/;"	f	typeref:typename:const char *
luaT_cmt__newindex	torch7\\lib\\luaT\\luaT.c	/^int luaT_cmt__newindex(lua_State *L)$/;"	f	typeref:typename:int
luaT_free	torch7\\lib\\luaT\\luaT.c	/^void luaT_free(lua_State *L, void *ptr)$/;"	f	typeref:typename:void
luaT_fullparentname	torch7\\lib\\luaT\\luaT.c	/^int luaT_fullparentname(const char *tname, char *parent_name)$/;"	f	typeref:typename:int
luaT_getfieldcheckboolean	torch7\\lib\\luaT\\luaT.c	/^int luaT_getfieldcheckboolean(lua_State *L, int ud, const char *field)$/;"	f	typeref:typename:int
luaT_getfieldcheckint	torch7\\lib\\luaT\\luaT.c	/^int luaT_getfieldcheckint(lua_State *L, int ud, const char *field)$/;"	f	typeref:typename:int
luaT_getfieldchecklightudata	torch7\\lib\\luaT\\luaT.c	/^void *luaT_getfieldchecklightudata(lua_State *L, int ud, const char *field)$/;"	f	typeref:typename:void *
luaT_getfieldchecknumber	torch7\\lib\\luaT\\luaT.c	/^double luaT_getfieldchecknumber(lua_State *L, int ud, const char *field)$/;"	f	typeref:typename:double
luaT_getfieldcheckstring	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_getfieldcheckstring(lua_State *L, int ud, const char *field)$/;"	f	typeref:typename:const char *
luaT_getfieldchecktable	torch7\\lib\\luaT\\luaT.c	/^void luaT_getfieldchecktable(lua_State *L, int ud, const char *field)$/;"	f	typeref:typename:void
luaT_getfieldcheckudata	torch7\\lib\\luaT\\luaT.c	/^void *luaT_getfieldcheckudata(lua_State *L, int ud, const char *field, const char *tname)$/;"	f	typeref:typename:void *
luaT_getinnerparent	torch7\\lib\\luaT\\luaT.c	/^void luaT_getinnerparent(lua_State *L, const char *tname)$/;"	f	typeref:typename:void
luaT_getmetaclass	torch7\\lib\\luaT\\luaT.c	/^int luaT_getmetaclass(lua_State *L, int index)$/;"	f	typeref:typename:int
luaT_gettm	lua\\ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f	typeref:typename:const TValue *
luaT_gettmbyobj	lua\\ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f	typeref:typename:const TValue *
luaT_getvarargs	lua\\ltm.c	/^void luaT_getvarargs (lua_State *L, CallInfo *ci, StkId where, int wanted) {$/;"	f	typeref:typename:void
luaT_id	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_id(lua_State *L, int ud)$/;"	f	typeref:typename:const char *
luaT_id2typename	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_id2typename(lua_State *L, const char *id)$/;"	f	typeref:typename:const char *
luaT_init	lua\\ltm.c	/^void luaT_init (lua_State *L) {$/;"	f	typeref:typename:void
luaT_innerparentname	torch7\\lib\\luaT\\luaT.c	/^int luaT_innerparentname(const char *tname, char *parent_name)$/;"	f	typeref:typename:int
luaT_iscdata	torch7\\lib\\luaT\\luaT.c	/^static int luaT_iscdata(lua_State *L, int ud)$/;"	f	typeref:typename:int	file:
luaT_isudata	torch7\\lib\\luaT\\luaT.c	/^int luaT_isudata(lua_State *L, int ud, const char *tname)$/;"	f	typeref:typename:int
luaT_lua_factory	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_factory(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_getconstructortable	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_getconstructortable(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_getenv	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_getenv(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_getmetatable	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_getmetatable(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_isequal	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_isequal(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_metatype	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_metatype(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_newmetatable	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_newmetatable(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_pointer	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_pointer(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_pushudata	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_pushudata(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_setenv	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_setenv(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_setmetatable	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_setmetatable(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_typename	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_typename(lua_State *L)$/;"	f	typeref:typename:int
luaT_lua_version	torch7\\lib\\luaT\\luaT.c	/^int luaT_lua_version(lua_State *L)$/;"	f	typeref:typename:int
luaT_mt__index	torch7\\lib\\luaT\\luaT.c	/^static int luaT_mt__index(lua_State *L)$/;"	f	typeref:typename:int	file:
luaT_mt__newindex	torch7\\lib\\luaT\\luaT.c	/^static int luaT_mt__newindex(lua_State *L)$/;"	f	typeref:typename:int	file:
luaT_newlocalmetatable	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_newlocalmetatable(lua_State *L, const char *tname, const char *parent_tname,$/;"	f	typeref:typename:const char *
luaT_newmetatable	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_newmetatable(lua_State *L, const char *tname, const char *parent_tname,$/;"	f	typeref:typename:const char *
luaT_objtypename	lua\\ltm.c	/^const char *luaT_objtypename (lua_State *L, const TValue *o) {$/;"	f	typeref:typename:const char *
luaT_optboolean	torch7\\lib\\luaT\\luaT.c	/^int luaT_optboolean(lua_State *L, int ud, int def)$/;"	f	typeref:typename:int
luaT_outerparentname	torch7\\lib\\luaT\\luaT.c	/^int luaT_outerparentname(const char *tname, char *parent_name)$/;"	f	typeref:typename:int
luaT_pushinteger	torch7\\lib\\luaT\\luaT.c	/^void luaT_pushinteger(lua_State *L, ptrdiff_t n)$/;"	f	typeref:typename:void
luaT_pushlong	torch7\\lib\\luaT\\luaT.c	/^void luaT_pushlong(lua_State *L, long n)$/;"	f	typeref:typename:void
luaT_pushmetaclass	torch7\\lib\\luaT\\luaT.c	/^int luaT_pushmetaclass(lua_State *L, const char *tname)$/;"	f	typeref:typename:int
luaT_pushmetatable	torch7\\lib\\luaT\\luaT.c	/^int luaT_pushmetatable(lua_State *L, const char *tname)$/;"	f	typeref:typename:int
luaT_pushpointer	torch7\\lib\\luaT\\luaT.c	/^static void luaT_pushpointer(lua_State *L, const void *ptr)$/;"	f	typeref:typename:void	file:
luaT_pushudata	torch7\\lib\\luaT\\luaT.c	/^void luaT_pushudata(lua_State *L, void *udata, const char *tname)$/;"	f	typeref:typename:void
luaT_realloc	torch7\\lib\\luaT\\luaT.c	/^void* luaT_realloc(lua_State *L, void *ptr, ptrdiff_t size)$/;"	f	typeref:typename:void *
luaT_registeratid	torch7\\lib\\luaT\\luaT.c	/^void luaT_registeratid(lua_State *L, const struct luaL_Reg *methods, const char *id)$/;"	f	typeref:typename:void
luaT_registeratname	torch7\\lib\\luaT\\luaT.c	/^void luaT_registeratname(lua_State *L, const struct luaL_Reg *methods, const char *name)$/;"	f	typeref:typename:void
luaT_setfuncs	torch7\\lib\\luaT\\luaT.c	/^void luaT_setfuncs(lua_State *L, const luaL_Reg *l, int nup)$/;"	f	typeref:typename:void
luaT_stackdump	torch7\\lib\\luaT\\luaT.c	/^void luaT_stackdump(lua_State *L)$/;"	f	typeref:typename:void
luaT_tolong	torch7\\lib\\luaT\\luaT.c	/^long luaT_tolong(lua_State *L, int idx)$/;"	f	typeref:typename:long
luaT_toudata	torch7\\lib\\luaT\\luaT.c	/^void *luaT_toudata(lua_State *L, int ud, const char *tname)$/;"	f	typeref:typename:void *
luaT_trybinTM	lua\\ltm.c	/^void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:void
luaT_trybinassocTM	lua\\ltm.c	/^void luaT_trybinassocTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:void
luaT_trybiniTM	lua\\ltm.c	/^void luaT_trybiniTM (lua_State *L, const TValue *p1, lua_Integer i2,$/;"	f	typeref:typename:void
luaT_typename	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_typename(lua_State *L, int ud)$/;"	f	typeref:typename:const char *
luaT_typename2id	torch7\\lib\\luaT\\luaT.c	/^const char* luaT_typename2id(lua_State *L, const char *tname)$/;"	f	typeref:typename:const char *
luaT_typenameid	torch7\\lib\\luaT\\luaT.c	/^const char *luaT_typenameid(lua_State *L, const char *tname)$/;"	f	typeref:typename:const char *
luaT_typenames_	lua\\ltm.c	/^LUAI_DDEF const char *const luaT_typenames_[LUA_TOTALTAGS] = {$/;"	v	typeref:typename:LUAI_DDEF const char * const[]
luaT_typerror	torch7\\lib\\luaT\\luaT.c	/^int luaT_typerror(lua_State *L, int ud, const char *tname)$/;"	f	typeref:typename:int
luaTorchArgErrorHandlerFunction	torch7\\utils.c	/^static void luaTorchArgErrorHandlerFunction(int argNumber, const char *msg, void *data)$/;"	f	typeref:typename:void	file:
luaTorchErrorHandlerFunction	torch7\\utils.c	/^static void luaTorchErrorHandlerFunction(const char *msg, void *data)$/;"	f	typeref:typename:void	file:
luaTorchGCFunction	torch7\\utils.c	/^static void luaTorchGCFunction(void *data)$/;"	f	typeref:typename:void	file:
luaU_dump	lua\\ldump.c	/^int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data,$/;"	f	typeref:typename:int
luaU_undump	lua\\lundump.c	/^LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {$/;"	f	typeref:typename:LClosure *
luaV_concat	lua\\lvm.c	/^void luaV_concat (lua_State *L, int total) {$/;"	f	typeref:typename:void
luaV_equalobj	lua\\lvm.c	/^int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f	typeref:typename:int
luaV_execute	lua\\lvm.c	/^void luaV_execute (lua_State *L, CallInfo *ci) {$/;"	f	typeref:typename:void
luaV_fastget	lua\\lvm.h	/^#define luaV_fastget(/;"	d
luaV_fastgeti	lua\\lvm.h	/^#define luaV_fastgeti(/;"	d
luaV_finishOp	lua\\lvm.c	/^void luaV_finishOp (lua_State *L) {$/;"	f	typeref:typename:void
luaV_finishfastset	lua\\lvm.h	/^#define luaV_finishfastset(/;"	d
luaV_finishget	lua\\lvm.c	/^void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,$/;"	f	typeref:typename:void
luaV_finishset	lua\\lvm.c	/^void luaV_finishset (lua_State *L, const TValue *t, TValue *key,$/;"	f	typeref:typename:void
luaV_flttointeger	lua\\lvm.c	/^int luaV_flttointeger (lua_Number n, lua_Integer *p, int mode) {$/;"	f	typeref:typename:int
luaV_idiv	lua\\lvm.c	/^lua_Integer luaV_idiv (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f	typeref:typename:lua_Integer
luaV_lessequal	lua\\lvm.c	/^int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int
luaV_lessthan	lua\\lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int
luaV_mod	lua\\lvm.c	/^lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f	typeref:typename:lua_Integer
luaV_modf	lua\\lvm.c	/^lua_Number luaV_modf (lua_State *L, lua_Number m, lua_Number n) {$/;"	f	typeref:typename:lua_Number
luaV_objlen	lua\\lvm.c	/^void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {$/;"	f	typeref:typename:void
luaV_rawequalobj	lua\\lvm.h	/^#define luaV_rawequalobj(/;"	d
luaV_shiftl	lua\\lvm.c	/^lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {$/;"	f	typeref:typename:lua_Integer
luaV_tointeger	lua\\lvm.c	/^int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode) {$/;"	f	typeref:typename:int
luaV_tointegerns	lua\\lvm.c	/^int luaV_tointegerns (const TValue *obj, lua_Integer *p, int mode) {$/;"	f	typeref:typename:int
luaV_tonumber_	lua\\lvm.c	/^int luaV_tonumber_ (const TValue *obj, lua_Number *n) {$/;"	f	typeref:typename:int
luaX_init	lua\\llex.c	/^void luaX_init (lua_State *L) {$/;"	f	typeref:typename:void
luaX_lookahead	lua\\llex.c	/^int luaX_lookahead (LexState *ls) {$/;"	f	typeref:typename:int
luaX_newstring	lua\\llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f	typeref:typename:TString *
luaX_next	lua\\llex.c	/^void luaX_next (LexState *ls) {$/;"	f	typeref:typename:void
luaX_setinput	lua\\llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,$/;"	f	typeref:typename:void
luaX_syntaxerror	lua\\llex.c	/^l_noret luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f	typeref:typename:l_noret
luaX_token2str	lua\\llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f	typeref:typename:const char *
luaX_tokens	lua\\llex.c	/^static const char *const luaX_tokens [] = {$/;"	v	typeref:typename:const char * const[]	file:
luaY_parser	lua\\lparser.c	/^LClosure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	f	typeref:typename:LClosure *
luaZ_buffer	lua\\lzio.h	/^#define luaZ_buffer(/;"	d
luaZ_bufflen	lua\\lzio.h	/^#define luaZ_bufflen(/;"	d
luaZ_buffremove	lua\\lzio.h	/^#define luaZ_buffremove(/;"	d
luaZ_fill	lua\\lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f	typeref:typename:int
luaZ_freebuffer	lua\\lzio.h	/^#define luaZ_freebuffer(/;"	d
luaZ_init	lua\\lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f	typeref:typename:void
luaZ_initbuffer	lua\\lzio.h	/^#define luaZ_initbuffer(/;"	d
luaZ_read	lua\\lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f	typeref:typename:size_t
luaZ_resetbuffer	lua\\lzio.h	/^#define luaZ_resetbuffer(/;"	d
luaZ_resizebuffer	lua\\lzio.h	/^#define luaZ_resizebuffer(/;"	d
luaZ_sizebuffer	lua\\lzio.h	/^#define luaZ_sizebuffer(/;"	d
lua_Alloc	lua\\lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t	typeref:typename:void * (*)(void * ud,void * ptr,size_t osize,size_t nsize)
lua_CFunction	lua\\lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t	typeref:typename:int (*)(lua_State * L)
lua_Debug	lua\\lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	lua\\lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	lua\\lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t	typeref:typename:void (*)(lua_State * L,lua_Debug * ar)
lua_Integer	lua\\lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t	typeref:typename:LUA_INTEGER
lua_KContext	lua\\lua.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t	typeref:typename:LUA_KCONTEXT
lua_KFunction	lua\\lua.h	/^typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t	typeref:typename:int (*)(lua_State * L,int status,lua_KContext ctx)
lua_Number	lua\\lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t	typeref:typename:LUA_NUMBER
lua_Reader	lua\\lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t	typeref:typename:const char * (*)(lua_State * L,void * ud,size_t * sz)
lua_State	lua\\lstate.h	/^struct lua_State {$/;"	s
lua_State	lua\\lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_Unsigned	lua\\lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t	typeref:typename:LUA_UNSIGNED
lua_WarnFunction	lua\\lua.h	/^typedef void (*lua_WarnFunction) (void *ud, const char *msg, int tocont);$/;"	t	typeref:typename:void (*)(void * ud,const char * msg,int tocont)
lua_Writer	lua\\lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);$/;"	t	typeref:typename:int (*)(lua_State * L,const void * p,size_t sz,void * ud)
lua_abs_index	dmlc-core\\include\\dmlc\\lua.h	/^inline int lua_abs_index(lua_State* L, int index) {$/;"	f	namespace:dmlc::lua_stack	typeref:typename:int
lua_absindex	lua\\lapi.c	/^LUA_API int lua_absindex (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_absindex	lua\\lua.h	/^LUA_API int   (lua_absindex) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_arith	lua\\lapi.c	/^LUA_API void lua_arith (lua_State *L, int op) {$/;"	f	typeref:typename:LUA_API void
lua_arith	lua\\lua.h	/^LUA_API void  (lua_arith) (lua_State *L, int op);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int op)
lua_assert	lua\\llimits.h	/^#define lua_assert(/;"	d
lua_assert	lua\\ltests.h	/^#define lua_assert(/;"	d
lua_assert	lua\\lualib.h	/^#define lua_assert(/;"	d
lua_atpanic	lua\\lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f	typeref:typename:LUA_API lua_CFunction
lua_c	lua\\lua.c	/^#define lua_c$/;"	d	file:
lua_call	lua\\lua.h	/^#define lua_call(/;"	d
lua_callk	lua\\lapi.c	/^LUA_API void lua_callk (lua_State *L, int nargs, int nresults,$/;"	f	typeref:typename:LUA_API void
lua_callk	lua\\lua.h	/^LUA_API void  (lua_callk) (lua_State *L, int nargs, int nresults,$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int nargs,int nresults,lua_KContext ctx,lua_KFunction k)
lua_checkmemory	lua\\ltests.c	/^int lua_checkmemory (lua_State *L) {$/;"	f	typeref:typename:int
lua_checkpc	lua\\ltests.c	/^static int lua_checkpc (CallInfo *ci) {$/;"	f	typeref:typename:int	file:
lua_checkstack	lua\\lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int n) {$/;"	f	typeref:typename:LUA_API int
lua_checkstack	lua\\lua.h	/^LUA_API int   (lua_checkstack) (lua_State *L, int n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int n)
lua_close	lua\\lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f	typeref:typename:LUA_API void
lua_close	lua\\lua.h	/^LUA_API void       (lua_close) (lua_State *L);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L)
lua_compare	lua\\lapi.c	/^LUA_API int lua_compare (lua_State *L, int index1, int index2, int op) {$/;"	f	typeref:typename:LUA_API int
lua_compare	lua\\lua.h	/^LUA_API int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx1,int idx2,int op)
lua_concat	lua\\lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f	typeref:typename:LUA_API void
lua_concat	lua\\lua.h	/^LUA_API void  (lua_concat) (lua_State *L, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int n)
lua_copy	lua\\lapi.c	/^LUA_API void lua_copy (lua_State *L, int fromidx, int toidx) {$/;"	f	typeref:typename:LUA_API void
lua_copy	lua\\lua.h	/^LUA_API void  (lua_copy) (lua_State *L, int fromidx, int toidx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int fromidx,int toidx)
lua_createtable	lua\\lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f	typeref:typename:LUA_API void
lua_createtable	lua\\lua.h	/^LUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int narr,int nrec)
lua_dump	lua\\lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {$/;"	f	typeref:typename:LUA_API int
lua_dump	lua\\lua.h	/^LUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_Writer writer,void * data,int strip)
lua_equal	lua\\luaconf.h	/^#define lua_equal(/;"	d
lua_error	lua\\lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_error	lua\\lua.h	/^LUA_API int   (lua_error) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_freeline	lua\\lua.c	/^#define lua_freeline(/;"	d	file:
lua_gc	lua\\lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, ...) {$/;"	f	typeref:typename:LUA_API int
lua_gc	lua\\lua.h	/^LUA_API int (lua_gc) (lua_State *L, int what, ...);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int what,...)
lua_getallocf	lua\\lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f	typeref:typename:LUA_API lua_Alloc
lua_getextraspace	lua\\lua.h	/^#define lua_getextraspace(/;"	d
lua_getfield	lua\\lapi.c	/^LUA_API int lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f	typeref:typename:LUA_API int
lua_getfield	lua\\lua.h	/^LUA_API int (lua_getfield) (lua_State *L, int idx, const char *k);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,const char * k)
lua_getglobal	lua\\lapi.c	/^LUA_API int lua_getglobal (lua_State *L, const char *name) {$/;"	f	typeref:typename:LUA_API int
lua_getglobal	lua\\lua.h	/^LUA_API int (lua_getglobal) (lua_State *L, const char *name);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,const char * name)
lua_gethook	lua\\ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f	typeref:typename:LUA_API lua_Hook
lua_gethookcount	lua\\ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gethookcount	lua\\lua.h	/^LUA_API int (lua_gethookcount) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_gethookmask	lua\\ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gethookmask	lua\\lua.h	/^LUA_API int (lua_gethookmask) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_geti	lua\\lapi.c	/^LUA_API int lua_geti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API int
lua_geti	lua\\lua.h	/^LUA_API int (lua_geti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,lua_Integer n)
lua_getinfo	lua\\ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f	typeref:typename:LUA_API int
lua_getinfo	lua\\lua.h	/^LUA_API int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,const char * what,lua_Debug * ar)
lua_getiuservalue	lua\\lapi.c	/^LUA_API int lua_getiuservalue (lua_State *L, int idx, int n) {$/;"	f	typeref:typename:LUA_API int
lua_getiuservalue	lua\\lua.h	/^LUA_API int  (lua_getiuservalue) (lua_State *L, int idx, int n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,int n)
lua_getlocal	lua\\ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_getlocal	lua\\lua.h	/^LUA_API const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const lua_Debug * ar,int n)
lua_getlocaledecpoint	lua\\luaconf.h	/^#define lua_getlocaledecpoint(/;"	d
lua_getmetatable	lua\\lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f	typeref:typename:LUA_API int
lua_getmetatable	lua\\lua.h	/^LUA_API int   (lua_getmetatable) (lua_State *L, int objindex);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int objindex)
lua_getstack	lua\\ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f	typeref:typename:LUA_API int
lua_getstack	lua\\lua.h	/^LUA_API int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int level,lua_Debug * ar)
lua_gettable	lua\\lapi.c	/^LUA_API int lua_gettable (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_gettable	lua\\lua.h	/^LUA_API int (lua_gettable) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_gettop	lua\\lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gettop	lua\\lua.h	/^LUA_API int   (lua_gettop) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_getupvalue	lua\\lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_getupvalue	lua\\lua.h	/^LUA_API const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int funcindex,int n)
lua_getuservalue	lua\\lua.h	/^#define lua_getuservalue(/;"	d
lua_getuservalue	torch7\\lib\\luaT\\luaT.h	/^# define lua_getuservalue /;"	d
lua_h	lua\\lua.h	/^#define lua_h$/;"	d
lua_ident	lua\\lapi.c	/^const char lua_ident[] =$/;"	v	typeref:typename:const char[]
lua_initreadline	lua\\lua.c	/^#define lua_initreadline(/;"	d	file:
lua_insert	lua\\lua.h	/^#define lua_insert(/;"	d
lua_integer2str	lua\\luaconf.h	/^#define lua_integer2str(/;"	d
lua_isboolean	lua\\lua.h	/^#define lua_isboolean(/;"	d
lua_iscfunction	lua\\lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_iscfunction	lua\\lua.h	/^LUA_API int             (lua_iscfunction) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isfunction	lua\\lua.h	/^#define lua_isfunction(/;"	d
lua_isinteger	lua\\lapi.c	/^LUA_API int lua_isinteger (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isinteger	lua\\lua.h	/^LUA_API int             (lua_isinteger) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_islightuserdata	lua\\lua.h	/^#define lua_islightuserdata(/;"	d
lua_isnil	lua\\lua.h	/^#define lua_isnil(/;"	d
lua_isnone	lua\\lua.h	/^#define lua_isnone(/;"	d
lua_isnoneornil	lua\\lua.h	/^#define lua_isnoneornil(/;"	d
lua_isnumber	lua\\lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isnumber	lua\\lua.h	/^LUA_API int             (lua_isnumber) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isstring	lua\\lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isstring	lua\\lua.h	/^LUA_API int             (lua_isstring) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_istable	lua\\lua.h	/^#define lua_istable(/;"	d
lua_isthread	lua\\lua.h	/^#define lua_isthread(/;"	d
lua_isuserdata	lua\\lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isuserdata	lua\\lua.h	/^LUA_API int             (lua_isuserdata) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isyieldable	lua\\ldo.c	/^LUA_API int lua_isyieldable (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_isyieldable	lua\\lua.h	/^LUA_API int (lua_isyieldable) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_len	lua\\lapi.c	/^LUA_API void lua_len (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_len	lua\\lua.h	/^LUA_API void  (lua_len)    (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_lessthan	lua\\luaconf.h	/^#define lua_lessthan(/;"	d
lua_load	lua\\lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f	typeref:typename:LUA_API int
lua_load	lua\\lua.h	/^LUA_API int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_Reader reader,void * dt,const char * chunkname,const char * mode)
lua_lock	lua\\llimits.h	/^#define lua_lock(/;"	d
lua_lock	lua\\ltests.h	/^#define lua_lock(/;"	d
lua_longassert	lua\\llimits.h	/^#define lua_longassert(/;"	d
lua_longjmp	lua\\ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_max	torch7\\test\\test.lua	/^   function lua_max(t, dim)$/;"	f
lua_min	torch7\\test\\test.lua	/^   function lua_min(t, dim)$/;"	f
lua_newstate	lua\\lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_newstate	lua\\lua.h	/^LUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_Alloc f,void * ud)
lua_newtable	lua\\lua.h	/^#define lua_newtable(/;"	d
lua_newthread	lua\\lstate.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_newthread	lua\\lua.h	/^LUA_API lua_State *(lua_newthread) (lua_State *L);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_State * L)
lua_newuserdata	lua\\lua.h	/^#define lua_newuserdata(/;"	d
lua_newuserdatauv	lua\\lapi.c	/^LUA_API void *lua_newuserdatauv (lua_State *L, size_t size, int nuvalue) {$/;"	f	typeref:typename:LUA_API void *
lua_newuserdatauv	lua\\lua.h	/^LUA_API void *(lua_newuserdatauv) (lua_State *L, size_t sz, int nuvalue);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,size_t sz,int nuvalue)
lua_next	lua\\lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_next	lua\\lua.h	/^LUA_API int   (lua_next) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_number2str	lua\\luaconf.h	/^#define lua_number2str(/;"	d
lua_number2strx	lua\\lstrlib.c	/^static int lua_number2strx (lua_State *L, char *buff, int sz,$/;"	f	typeref:typename:int	file:
lua_number2strx	lua\\luaconf.h	/^#define lua_number2strx(/;"	d
lua_numbertointeger	lua\\luaconf.h	/^#define lua_numbertointeger(/;"	d
lua_objlen	lua\\luaconf.h	/^#define lua_objlen(/;"	d
lua_objlen	torch7\\lib\\luaT\\luaT.h	/^# define lua_objlen /;"	d
lua_pcall	lua\\lua.h	/^#define lua_pcall(/;"	d
lua_pcallk	lua\\lapi.c	/^LUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,$/;"	f	typeref:typename:LUA_API int
lua_pcallk	lua\\lua.h	/^LUA_API int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int nargs,int nresults,int errfunc,lua_KContext ctx,lua_KFunction k)
lua_pointer2str	lua\\luaconf.h	/^#define lua_pointer2str(/;"	d
lua_pop	lua\\lua.h	/^#define lua_pop(/;"	d
lua_pushboolean	lua\\lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f	typeref:typename:LUA_API void
lua_pushboolean	lua\\lua.h	/^LUA_API void  (lua_pushboolean) (lua_State *L, int b);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int b)
lua_pushcclosure	lua\\lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f	typeref:typename:LUA_API void
lua_pushcclosure	lua\\lua.h	/^LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_CFunction fn,int n)
lua_pushcfunction	lua\\lua.h	/^#define lua_pushcfunction(/;"	d
lua_pushfstring	lua\\lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:LUA_API const char *
lua_pushfstring	lua\\lua.h	/^LUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * fmt,...)
lua_pushglobaltable	lua\\lua.h	/^#define lua_pushglobaltable(/;"	d
lua_pushglobaltable	torch7\\lib\\luaT\\luaT.h	/^# define lua_pushglobaltable(/;"	d
lua_pushinteger	lua\\lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f	typeref:typename:LUA_API void
lua_pushinteger	lua\\lua.h	/^LUA_API void        (lua_pushinteger) (lua_State *L, lua_Integer n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Integer n)
lua_pushlightuserdata	lua\\lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f	typeref:typename:LUA_API void
lua_pushlightuserdata	lua\\lua.h	/^LUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,void * p)
lua_pushliteral	lua\\lua.h	/^#define lua_pushliteral(/;"	d
lua_pushlstring	lua\\lapi.c	/^LUA_API const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f	typeref:typename:LUA_API const char *
lua_pushlstring	lua\\lua.h	/^LUA_API const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * s,size_t len)
lua_pushnil	lua\\lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f	typeref:typename:LUA_API void
lua_pushnil	lua\\lua.h	/^LUA_API void        (lua_pushnil) (lua_State *L);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L)
lua_pushnumber	lua\\lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f	typeref:typename:LUA_API void
lua_pushnumber	lua\\lua.h	/^LUA_API void        (lua_pushnumber) (lua_State *L, lua_Number n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Number n)
lua_pushstring	lua\\lapi.c	/^LUA_API const char *lua_pushstring (lua_State *L, const char *s) {$/;"	f	typeref:typename:LUA_API const char *
lua_pushstring	lua\\lua.h	/^LUA_API const char *(lua_pushstring) (lua_State *L, const char *s);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * s)
lua_pushthread	lua\\lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_pushthread	lua\\lua.h	/^LUA_API int   (lua_pushthread) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_pushunsigned	lua\\lua.h	/^#define lua_pushunsigned(/;"	d
lua_pushvalue	lua\\lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_pushvalue	lua\\lua.h	/^LUA_API void  (lua_pushvalue) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_pushvfstring	lua\\lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f	typeref:typename:LUA_API const char *
lua_pushvfstring	lua\\lua.h	/^LUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * fmt,va_list argp)
lua_rawequal	lua\\lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f	typeref:typename:LUA_API int
lua_rawequal	lua\\lua.h	/^LUA_API int   (lua_rawequal) (lua_State *L, int idx1, int idx2);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx1,int idx2)
lua_rawget	lua\\lapi.c	/^LUA_API int lua_rawget (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_rawget	lua\\lua.h	/^LUA_API int (lua_rawget) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_rawgeti	lua\\lapi.c	/^LUA_API int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API int
lua_rawgeti	lua\\lua.h	/^LUA_API int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,lua_Integer n)
lua_rawgetp	lua\\lapi.c	/^LUA_API int lua_rawgetp (lua_State *L, int idx, const void *p) {$/;"	f	typeref:typename:LUA_API int
lua_rawgetp	lua\\lua.h	/^LUA_API int (lua_rawgetp) (lua_State *L, int idx, const void *p);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,const void * p)
lua_rawlen	lua\\lapi.c	/^LUA_API lua_Unsigned lua_rawlen (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_Unsigned
lua_rawset	lua\\lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_rawset	lua\\lua.h	/^LUA_API void  (lua_rawset) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_rawseti	lua\\lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API void
lua_rawseti	lua\\lua.h	/^LUA_API void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,lua_Integer n)
lua_rawsetp	lua\\lapi.c	/^LUA_API void lua_rawsetp (lua_State *L, int idx, const void *p) {$/;"	f	typeref:typename:LUA_API void
lua_rawsetp	lua\\lua.h	/^LUA_API void  (lua_rawsetp) (lua_State *L, int idx, const void *p);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,const void * p)
lua_readline	lua\\lua.c	/^#define lua_readline(/;"	d	file:
lua_register	lua\\lua.h	/^#define lua_register(/;"	d
lua_remove	lua\\lua.h	/^#define lua_remove(/;"	d
lua_replace	lua\\lua.h	/^#define lua_replace(/;"	d
lua_resetthread	lua\\lstate.c	/^int lua_resetthread (lua_State *L) {$/;"	f	typeref:typename:int
lua_resetthread	lua\\lua.h	/^LUA_API int        (lua_resetthread) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_resume	lua\\ldo.c	/^LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs,$/;"	f	typeref:typename:LUA_API int
lua_resume	lua\\lua.h	/^LUA_API int  (lua_resume)     (lua_State *L, lua_State *from, int narg,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_State * from,int narg,int * nres)
lua_rotate	lua\\lapi.c	/^LUA_API void lua_rotate (lua_State *L, int idx, int n) {$/;"	f	typeref:typename:LUA_API void
lua_rotate	lua\\lua.h	/^LUA_API void  (lua_rotate) (lua_State *L, int idx, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,int n)
lua_saveline	lua\\lua.c	/^#define lua_saveline(/;"	d	file:
lua_setallocf	lua\\lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f	typeref:typename:LUA_API void
lua_setallocf	lua\\lua.h	/^LUA_API void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Alloc f,void * ud)
lua_setfield	lua\\lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f	typeref:typename:LUA_API void
lua_setfield	lua\\lua.h	/^LUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,const char * k)
lua_setglobal	lua\\lapi.c	/^LUA_API void lua_setglobal (lua_State *L, const char *name) {$/;"	f	typeref:typename:LUA_API void
lua_setglobal	lua\\lua.h	/^LUA_API void  (lua_setglobal) (lua_State *L, const char *name);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,const char * name)
lua_sethook	lua\\ldebug.c	/^LUA_API void lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f	typeref:typename:LUA_API void
lua_sethook	lua\\lua.h	/^LUA_API void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Hook func,int mask,int count)
lua_seti	lua\\lapi.c	/^LUA_API void lua_seti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API void
lua_seti	lua\\lua.h	/^LUA_API void  (lua_seti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,lua_Integer n)
lua_setiuservalue	lua\\lapi.c	/^LUA_API int lua_setiuservalue (lua_State *L, int idx, int n) {$/;"	f	typeref:typename:LUA_API int
lua_setiuservalue	lua\\lua.h	/^LUA_API int   (lua_setiuservalue) (lua_State *L, int idx, int n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,int n)
lua_setlocal	lua\\ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_setlocal	lua\\lua.h	/^LUA_API const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const lua_Debug * ar,int n)
lua_setmetatable	lua\\lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f	typeref:typename:LUA_API int
lua_setmetatable	lua\\lua.h	/^LUA_API int   (lua_setmetatable) (lua_State *L, int objindex);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int objindex)
lua_settable	lua\\lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_settable	lua\\lua.h	/^LUA_API void  (lua_settable) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_settop	lua\\lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_settop	lua\\lua.h	/^LUA_API void  (lua_settop) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_setupvalue	lua\\lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_setupvalue	lua\\lua.h	/^LUA_API const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int funcindex,int n)
lua_setuservalue	lua\\lua.h	/^#define lua_setuservalue(/;"	d
lua_setuservalue	torch7\\lib\\luaT\\luaT.h	/^# define lua_setuservalue /;"	d
lua_setwarnf	lua\\lapi.c	/^void lua_setwarnf (lua_State *L, lua_WarnFunction f, void *ud) {$/;"	f	typeref:typename:void
lua_setwarnf	lua\\lua.h	/^LUA_API void (lua_setwarnf) (lua_State *L, lua_WarnFunction f, void *ud);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_WarnFunction f,void * ud)
lua_stack	dmlc-core\\include\\dmlc\\lua.h	/^namespace lua_stack {$/;"	n	namespace:dmlc
lua_stack	src\\torch\\torch_util.h	/^namespace lua_stack {$/;"	n	namespace:dmlc
lua_status	lua\\lapi.c	/^LUA_API int lua_status (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_status	lua\\lua.h	/^LUA_API int  (lua_status)     (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_stdin_is_tty	lua\\lua.c	/^#define lua_stdin_is_tty(/;"	d	file:
lua_str2number	lua\\luaconf.h	/^#define lua_str2number(/;"	d
lua_stringtonumber	lua\\lapi.c	/^LUA_API size_t lua_stringtonumber (lua_State *L, const char *s) {$/;"	f	typeref:typename:LUA_API size_t
lua_strlen	lua\\luaconf.h	/^#define lua_strlen(/;"	d
lua_strx2number	lua\\lobject.c	/^static lua_Number lua_strx2number (const char *s, char **endptr) {$/;"	f	typeref:typename:lua_Number	file:
lua_strx2number	lua\\luaconf.h	/^#define lua_strx2number(/;"	d
lua_tmpnam	lua\\loslib.c	/^#define lua_tmpnam(/;"	d	file:
lua_toboolean	lua\\lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_toboolean	lua\\lua.h	/^LUA_API int             (lua_toboolean) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_tocfunction	lua\\lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_CFunction
lua_toclose	lua\\lapi.c	/^LUA_API void lua_toclose (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_toclose	lua\\lua.h	/^LUA_API void  (lua_toclose) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_tointeger	lua\\lua.h	/^#define lua_tointeger(/;"	d
lua_tointegerx	lua\\lapi.c	/^LUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {$/;"	f	typeref:typename:LUA_API lua_Integer
lua_tolstring	lua\\lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f	typeref:typename:LUA_API const char *
lua_tolstring	lua\\lua.h	/^LUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int idx,size_t * len)
lua_tonumber	lua\\lua.h	/^#define lua_tonumber(/;"	d
lua_tonumberx	lua\\lapi.c	/^LUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {$/;"	f	typeref:typename:LUA_API lua_Number
lua_topointer	lua\\lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API const void *
lua_topointer	lua\\lua.h	/^LUA_API const void     *(lua_topointer) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API const void * ()(lua_State * L,int idx)
lua_tostring	lua\\lua.h	/^#define lua_tostring(/;"	d
lua_tothread	lua\\lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_tothread	lua\\lua.h	/^LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_State * L,int idx)
lua_tounsigned	lua\\lua.h	/^#define lua_tounsigned(/;"	d
lua_tounsignedx	lua\\lua.h	/^#define lua_tounsignedx(/;"	d
lua_touserdata	lua\\lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void *
lua_touserdata	lua\\lua.h	/^LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,int idx)
lua_type	lua\\lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_type	lua\\lua.h	/^LUA_API int             (lua_type) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_typename	lua\\lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f	typeref:typename:LUA_API const char *
lua_typename	lua\\lua.h	/^LUA_API const char     *(lua_typename) (lua_State *L, int tp);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int tp)
lua_unlock	lua\\llimits.h	/^#define lua_unlock(/;"	d
lua_unlock	lua\\ltests.h	/^#define lua_unlock(/;"	d
lua_upvalueid	lua\\lapi.c	/^LUA_API void *lua_upvalueid (lua_State *L, int fidx, int n) {$/;"	f	typeref:typename:LUA_API void *
lua_upvalueid	lua\\lua.h	/^LUA_API void *(lua_upvalueid) (lua_State *L, int fidx, int n);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,int fidx,int n)
lua_upvalueindex	lua\\lua.h	/^#define lua_upvalueindex(/;"	d
lua_upvaluejoin	lua\\lapi.c	/^LUA_API void lua_upvaluejoin (lua_State *L, int fidx1, int n1,$/;"	f	typeref:typename:LUA_API void
lua_upvaluejoin	lua\\lua.h	/^LUA_API void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int fidx1,int n1,int fidx2,int n2)
lua_version	lua\\lapi.c	/^LUA_API lua_Number lua_version (lua_State *L) {$/;"	f	typeref:typename:LUA_API lua_Number
lua_warning	lua\\lapi.c	/^void lua_warning (lua_State *L, const char *msg, int tocont) {$/;"	f	typeref:typename:void
lua_warning	lua\\lua.h	/^LUA_API void (lua_warning)  (lua_State *L, const char *msg, int tocont);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,const char * msg,int tocont)
lua_writeline	lua\\lauxlib.h	/^#define lua_writeline(/;"	d
lua_writestring	lua\\lauxlib.h	/^#define lua_writestring(/;"	d
lua_writestringerror	lua\\lauxlib.h	/^#define lua_writestringerror(/;"	d
lua_xmove	lua\\lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f	typeref:typename:LUA_API void
lua_xmove	lua\\lua.h	/^LUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * from,lua_State * to,int n)
lua_yield	lua\\lua.h	/^#define lua_yield(/;"	d
lua_yieldk	lua\\ldo.c	/^LUA_API int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,$/;"	f	typeref:typename:LUA_API int
lua_yieldk	lua\\lua.h	/^LUA_API int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int nresults,lua_KContext ctx,lua_KFunction k)
luaconf_h	lua\\luaconf.h	/^#define luaconf_h$/;"	d
luai_apicheck	lua\\llimits.h	/^#define luai_apicheck(/;"	d
luai_apicheck	lua\\luaconf.h	/^#define luai_apicheck(/;"	d
luai_ctype_	lua\\lctype.c	/^LUAI_DDEF const lu_byte luai_ctype_[UCHAR_MAX + 2] = {$/;"	v	typeref:typename:LUAI_DDEF const lu_byte[]
luai_jmpbuf	lua\\ldo.c	/^#define luai_jmpbuf	/;"	d	file:
luai_makeseed	lua\\lstate.c	/^static unsigned int luai_makeseed (lua_State *L) {$/;"	f	typeref:typename:unsigned int	file:
luai_numadd	lua\\llimits.h	/^#define luai_numadd(/;"	d
luai_numdiv	lua\\llimits.h	/^#define luai_numdiv(/;"	d
luai_numeq	lua\\llimits.h	/^#define luai_numeq(/;"	d
luai_numge	lua\\llimits.h	/^#define luai_numge(/;"	d
luai_numgt	lua\\llimits.h	/^#define luai_numgt(/;"	d
luai_numidiv	lua\\llimits.h	/^#define luai_numidiv(/;"	d
luai_numisnan	lua\\llimits.h	/^#define luai_numisnan(/;"	d
luai_numle	lua\\llimits.h	/^#define luai_numle(/;"	d
luai_numlt	lua\\llimits.h	/^#define luai_numlt(/;"	d
luai_nummod	lua\\llimits.h	/^#define luai_nummod(/;"	d
luai_nummul	lua\\llimits.h	/^#define luai_nummul(/;"	d
luai_numpow	lua\\llimits.h	/^#define luai_numpow(/;"	d
luai_numsub	lua\\llimits.h	/^#define luai_numsub(/;"	d
luai_numunm	lua\\llimits.h	/^#define luai_numunm(/;"	d
luai_threadyield	lua\\llimits.h	/^#define luai_threadyield(/;"	d
luai_userstateclose	lua\\llimits.h	/^#define luai_userstateclose(/;"	d
luai_userstateclose	lua\\ltests.h	/^#define luai_userstateclose(/;"	d
luai_userstatefree	lua\\llimits.h	/^#define luai_userstatefree(/;"	d
luai_userstatefree	lua\\ltests.h	/^#define luai_userstatefree(/;"	d
luai_userstateopen	lua\\llimits.h	/^#define luai_userstateopen(/;"	d
luai_userstateopen	lua\\ltests.h	/^#define luai_userstateopen(/;"	d
luai_userstateresume	lua\\llimits.h	/^#define luai_userstateresume(/;"	d
luai_userstatethread	lua\\llimits.h	/^#define luai_userstatethread(/;"	d
luai_userstatethread	lua\\ltests.h	/^#define luai_userstatethread(/;"	d
luai_userstateyield	lua\\llimits.h	/^#define luai_userstateyield(/;"	d
luai_verifycode	lua\\lundump.c	/^#define luai_verifycode(/;"	d	file:
lualib_h	lua\\lualib.h	/^#define lualib_h$/;"	d
luaname2wrapname(name)	cwrap\\doc\\highlevelinterface.md	/^### luaname2wrapname(name) ###$/;"	S
luaopen_base	lua\\lbaselib.c	/^LUAMOD_API int luaopen_base (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_base	lua\\lualib.h	/^LUAMOD_API int (luaopen_base) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_coroutine	lua\\lcorolib.c	/^LUAMOD_API int luaopen_coroutine (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_coroutine	lua\\lualib.h	/^LUAMOD_API int (luaopen_coroutine) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_debug	lua\\ldblib.c	/^LUAMOD_API int luaopen_debug (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_debug	lua\\lualib.h	/^LUAMOD_API int (luaopen_debug) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_io	lua\\liolib.c	/^LUAMOD_API int luaopen_io (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_io	lua\\lualib.h	/^LUAMOD_API int (luaopen_io) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_lib11	lua\\testes\\libs\\lib11.c	/^LUAMOD_API int luaopen_lib11 (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_lib1_sub	lua\\testes\\libs\\lib1.c	/^LUAMOD_API int luaopen_lib1_sub (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_lib2	lua\\testes\\libs\\lib2.c	/^LUAMOD_API int luaopen_lib2 (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_lib2	lua\\testes\\libs\\lib22.c	/^LUAMOD_API int luaopen_lib2 (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_lib21	lua\\testes\\libs\\lib21.c	/^LUAMOD_API int luaopen_lib21 (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_libtorch	torch7\\init.c	/^int luaopen_libtorch(lua_State *L)$/;"	f	typeref:typename:int
luaopen_math	lua\\lmathlib.c	/^LUAMOD_API int luaopen_math (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_math	lua\\lualib.h	/^LUAMOD_API int (luaopen_math) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_os	lua\\loslib.c	/^LUAMOD_API int luaopen_os (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_os	lua\\lualib.h	/^LUAMOD_API int (luaopen_os) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_package	lua\\loadlib.c	/^LUAMOD_API int luaopen_package (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_package	lua\\lualib.h	/^LUAMOD_API int (luaopen_package) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_string	lua\\lstrlib.c	/^LUAMOD_API int luaopen_string (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_string	lua\\lualib.h	/^LUAMOD_API int (luaopen_string) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_table	lua\\ltablib.c	/^LUAMOD_API int luaopen_table (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_table	lua\\lualib.h	/^LUAMOD_API int (luaopen_table) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_utf8	lua\\lualib.h	/^LUAMOD_API int (luaopen_utf8) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_utf8	lua\\lutf8lib.c	/^LUAMOD_API int luaopen_utf8 (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
lundump.o	lua\\makefile	/^lundump.o: lundump.c lprefix.h lua.h luaconf.h ldebug.h lstate.h \\$/;"	t
lundump_c	lua\\lundump.c	/^#define lundump_c$/;"	d	file:
lundump_h	lua\\lundump.h	/^#define lundump_h$/;"	d
lutf8lib.o	lua\\makefile	/^lutf8lib.o: lutf8lib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lutf8lib_c	lua\\lutf8lib.c	/^#define lutf8lib_c$/;"	d	file:
lvm.o	lua\\makefile	/^lvm.o: lvm.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lvm_c	lua\\lvm.c	/^#define lvm_c$/;"	d	file:
lvm_c	lua\\onelua.c	/^#define lvm_c$/;"	d	file:
lvm_h	lua\\lvm.h	/^#define lvm_h$/;"	d
lz4	dmlc-core\\scripts\\packages.mk	/^lz4:  ${CACHE_PREFIX}\/include\/lz4.h$/;"	t
lzio.o	lua\\makefile	/^lzio.o: lzio.c lprefix.h lua.h luaconf.h llimits.h lmem.h lstate.h \\$/;"	t
lzio_c	lua\\lzio.c	/^#define lzio_c$/;"	d	file:
lzio_h	lua\\lzio.h	/^#define lzio_h$/;"	d
m	lua\\testes\\strings.lua	/^local m = setmetatable({}, {__tostring = function () return "hello" end,$/;"	f
m	torch7\\lib\\TH\\THRandom.c	/^#define m /;"	d	file:
m.__gc	lua\\testes\\gc.lua	/^m.__gc = function (o)$/;"	f
m_torch_ByteTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_ByteTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_ByteTensor_add	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_addmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_addmv	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_addr	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_all	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_all(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_any	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_any(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_bitand	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_bitor	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_bmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cat	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_clamp	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_clshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cmax	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cmin	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cmod	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cmul	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_conv2	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_conv3	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cpow	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cross	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_crshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_csub	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_diag	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_div	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_dot	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_eq	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_equal	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_eye	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_fill	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_fmod	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_gather	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_ge	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_geometric	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_ger	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_gt	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_le	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_lshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_lt	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_match	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_max	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_median	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_min	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_mm	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_mod	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_mode	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_mul	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_mv	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_ne	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_numel	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_ones	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_prod	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_random	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_randperm	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_range	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_remainder	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_reshape	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_rshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_scatter	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_sign	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_sort	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_sum	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_topk	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_trace	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_tril	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_triu	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_zero	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ByteTensor_zeros	bin\\torch7\\TensorMath.c	/^static int m_torch_ByteTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_CharTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_CharTensor_add	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_addmm	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_addmv	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_addr	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_bitand	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_bitor	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_bmm	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cat	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_clamp	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_clshift	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cmax	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cmin	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cmod	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cmul	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_conv2	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_conv3	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cpow	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cross	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_crshift	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_csub	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_diag	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_div	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_dot	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_eq	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_equal	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_eye	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_fill	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_fmod	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_gather	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_ge	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_geometric	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_ger	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_gt	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_le	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_lshift	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_lt	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_match	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_max	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_median	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_min	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_mm	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_mod	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_mode	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_mul	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_mv	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_ne	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_numel	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_ones	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_prod	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_random	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_randperm	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_range	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_remainder	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_reshape	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_rshift	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_scatter	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_sign	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_sort	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_sum	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_topk	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_trace	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_tril	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_triu	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_zero	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_CharTensor_zeros	bin\\torch7\\TensorMath.c	/^static int m_torch_CharTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_DoubleTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_DoubleTensor_abs	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_acos	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_acos(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_add	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_addmm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_addmv	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_addr	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_asin	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_asin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_atan	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_atan(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_atan2	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_atan2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_bhistc	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_bhistc(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_bitand	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_bitor	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_bmm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cat	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cauchy	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cauchy(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_ceil	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_ceil(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cinv	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cinv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_clamp	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_clshift	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cmax	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cmin	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cmod	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cmul	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_conv2	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_conv3	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cos	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cos(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cosh	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cosh(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cpow	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cross	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_crshift	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_csub	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_diag	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_dist	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_dist(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_div	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_dot	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_eq	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_equal	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_exp	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_exp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_exponential	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_exponential(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_eye	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_fill	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_floor	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_floor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_fmod	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_frac	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_frac(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_gather	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_ge	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_geometric	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_ger	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_gt	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_histc	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_histc(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_le	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_lerp	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_lerp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_linspace	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_linspace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_log	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_log(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_log1p	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_log1p(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_logNormal	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_logNormal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_logspace	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_logspace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_lshift	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_lt	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_match	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_max	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_mean	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_mean(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_median	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_min	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_mm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_mod	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_mode	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_mul	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_multinomial	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_multinomial(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_multinomialAliasSetup_	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_multinomialAliasSetup_(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_multinomialAlias_	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_multinomialAlias_(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_mv	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_ne	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_neg	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_neg(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_norm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_norm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_normal	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_normal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_numel	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_ones	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_pow	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_pow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_prod	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_rand	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_rand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_randn	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_randn(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_random	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_randperm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_range	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_remainder	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_renorm	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_renorm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_reshape	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_round	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_round(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_rshift	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_rsqrt	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_rsqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_scatter	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_sigmoid	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_sigmoid(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_sign	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_sin	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_sin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_sinh	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_sinh(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_sort	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_sqrt	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_sqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_std	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_std(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_sum	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_tan	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_tan(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_tanh	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_tanh(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_topk	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_trace	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_tril	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_triu	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_trunc	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_trunc(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_uniform	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_uniform(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_var	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_var(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_zero	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_DoubleTensor_zeros	bin\\torch7\\TensorMath.c	/^static int m_torch_DoubleTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_FloatTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_FloatTensor_abs	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_acos	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_acos(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_add	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_addmm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_addmv	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_addr	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_asin	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_asin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_atan	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_atan(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_atan2	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_atan2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_bhistc	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_bhistc(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_bitand	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_bitor	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_bmm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cat	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cauchy	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cauchy(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_ceil	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_ceil(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cinv	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cinv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_clamp	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_clshift	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cmax	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cmin	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cmod	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cmul	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_conv2	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_conv3	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cos	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cos(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cosh	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cosh(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cpow	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cross	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_crshift	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_csub	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_diag	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_dist	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_dist(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_div	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_dot	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_eq	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_equal	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_exp	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_exp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_exponential	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_exponential(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_eye	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_fill	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_floor	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_floor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_fmod	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_frac	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_frac(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_gather	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_ge	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_geometric	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_ger	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_gt	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_histc	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_histc(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_le	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_lerp	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_lerp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_linspace	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_linspace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_log	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_log(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_log1p	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_log1p(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_logNormal	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_logNormal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_logspace	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_logspace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_lshift	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_lt	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_match	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_max	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_mean	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_mean(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_median	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_min	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_mm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_mod	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_mode	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_mul	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_multinomial	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_multinomial(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_multinomialAliasSetup_	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_multinomialAliasSetup_(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_multinomialAlias_	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_multinomialAlias_(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_mv	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_ne	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_neg	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_neg(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_norm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_norm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_normal	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_normal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_numel	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_ones	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_pow	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_pow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_prod	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_rand	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_rand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_randn	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_randn(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_random	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_randperm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_range	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_remainder	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_renorm	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_renorm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_reshape	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_round	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_round(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_rshift	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_rsqrt	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_rsqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_scatter	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_sigmoid	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_sigmoid(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_sign	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_sin	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_sin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_sinh	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_sinh(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_sort	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_sqrt	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_sqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_std	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_std(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_sum	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_tan	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_tan(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_tanh	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_tanh(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_topk	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_trace	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_tril	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_triu	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_trunc	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_trunc(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_uniform	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_uniform(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_var	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_var(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_zero	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_FloatTensor_zeros	bin\\torch7\\TensorMath.c	/^static int m_torch_FloatTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_HalfTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_HalfTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_IntTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_IntTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_IntTensor_abs	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_add	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_addmm	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_addmv	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_addr	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_bitand	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_bitor	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_bmm	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cat	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_clamp	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_clshift	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cmax	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cmin	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cmod	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cmul	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_conv2	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_conv3	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cpow	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cross	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_crshift	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_csub	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_diag	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_div	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_dot	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_eq	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_equal	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_eye	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_fill	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_fmod	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_gather	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_ge	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_geometric	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_ger	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_gt	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_le	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_lshift	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_lt	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_match	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_max	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_median	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_min	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_mm	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_mod	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_mode	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_mul	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_mv	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_ne	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_numel	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_ones	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_prod	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_random	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_randperm	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_range	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_remainder	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_reshape	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_rshift	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_scatter	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_sign	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_sort	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_sum	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_topk	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_trace	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_tril	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_triu	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_zero	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_IntTensor_zeros	bin\\torch7\\TensorMath.c	/^static int m_torch_IntTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_LongTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_LongTensor_abs	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_add	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_addmm	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_addmv	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_addr	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_bitand	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_bitor	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_bmm	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cat	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_clamp	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_clshift	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cmax	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cmin	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cmod	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cmul	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_conv2	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_conv3	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cpow	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cross	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_crshift	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_csub	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_diag	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_div	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_dot	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_eq	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_equal	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_eye	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_fill	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_fmod	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_gather	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_ge	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_geometric	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_ger	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_gt	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_le	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_lshift	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_lt	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_match	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_max	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_median	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_min	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_mm	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_mod	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_mode	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_mul	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_mv	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_ne	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_numel	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_ones	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_prod	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_random	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_randperm	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_range	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_remainder	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_reshape	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_rshift	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_scatter	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_sign	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_sort	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_sum	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_topk	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_trace	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_tril	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_triu	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_zero	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_LongTensor_zeros	bin\\torch7\\TensorMath.c	/^static int m_torch_LongTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg m_torch_ShortTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
m_torch_ShortTensor_add	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_addmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_addmv	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_addr	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_bitand	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_bitor	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_bmm	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cat	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_clamp	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_clshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cmax	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cmin	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cmod	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cmul	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_conv2	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_conv3	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cpow	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cross	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_crshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_csub	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_diag	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_div	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_dot	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_eq	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_equal	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_eye	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_fill	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_fmod	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_gather	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_ge	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_geometric	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_ger	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_gt	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_le	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_lshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_lt	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_match	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_max	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_median	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_min	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_mm	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_mod	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_mode	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_mul	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_mv	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_ne	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_numel	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_ones	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_prod	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_random	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_randperm	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_range	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_remainder	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_reshape	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_rshift	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_scatter	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_sign	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_sort	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_sum	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_topk	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_trace	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_tril	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_triu	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_zero	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
m_torch_ShortTensor_zeros	bin\\torch7\\TensorMath.c	/^static int m_torch_ShortTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
main	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	bin\\CMakeFiles\\CheckTypeSize\\SIZE_OF_VOIDP.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	bin\\CMakeFiles\\FindOpenMP\\ompver.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	bin\\CMakeFiles\\FindOpenMP\\ompver.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	bin\\CMakeFiles\\ShowIncludes\\main.c	/^int main(){}$/;"	f	typeref:typename:int
main	bin\\CMakeFiles\\feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int
main	dmlc-core\\example\\parameter.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\scripts\\lint.py	/^def main():$/;"	f
main	dmlc-core\\scripts\\lint3.py	/^def main():$/;"	f
main	dmlc-core\\test\\csv_parser_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\dataiter_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\filesys_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\iostream_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\libsvm_parser_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\logging_test.cc	/^int main(void) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\parameter_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\recordio_test.cc	/^int main(int argc, char *argv[]) {  $/;"	f	typeref:typename:int
main	dmlc-core\\test\\registry_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\split_read_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\split_repeat_read_test.cc	/^int main(int argc, char *argv[]) {  $/;"	f	typeref:typename:int
main	dmlc-core\\test\\split_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\stream_read_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\strtonum_test.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	dmlc-core\\test\\unittest\\unittest_main.cc	/^int main(int argc, char ** argv) {$/;"	f	typeref:typename:int
main	dmlc-core\\tracker\\dmlc_tracker\\launcher.py	/^def main():$/;"	f
main	dmlc-core\\tracker\\dmlc_tracker\\submit.py	/^def main():$/;"	f
main	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^def main():$/;"	f
main	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    public static void main(String[] args) throws Exception {$/;"	m	class:ApplicationMaster
main	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    public static void main(String[] args) throws Exception {$/;"	m	class:Client
main	lua\\lua.c	/^int main (int argc, char **argv) {$/;"	f	typeref:typename:int
main	lua\\testes\\errors.lua	/^local function main()$/;"	f
main	nnvm\\tests\\cpp\\op_test.cc	/^int main(int argc, char ** argv) {$/;"	f	typeref:typename:int
main	nnvm\\tests\\cpp\\tuple_test.cc	/^int main(int argc, char ** argv) {$/;"	f	typeref:typename:int
main	torch7\\lib\\TH\\vector\\VSX.c	/^int main()$/;"	f	typeref:typename:int
main	torch7\\test\\timeSort.lua	/^function main()$/;"	f
mainfunc	lua\\lparser.c	/^static void mainfunc (LexState *ls, FuncState *fs) {$/;"	f	typeref:typename:void	file:
mainposition	lua\\ltable.c	/^static Node *mainposition (const Table *t, int ktt, const Value *kvl) {$/;"	f	typeref:typename:Node *	file:
mainpositionTV	lua\\ltable.c	/^static Node *mainpositionTV (const Table *t, const TValue *key) {$/;"	f	typeref:typename:Node *	file:
mainthread	lua\\lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:lua_State *
make	dmlc-core\\scripts\\travis\\travis_setup_env.sh	/^alias make="make -j4"$/;"	a
makeCfunc	lua\\ltests.c	/^static int makeCfunc (lua_State *L) {$/;"	f	typeref:typename:int	file:
makemask	lua\\ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	typeref:typename:int	file:
makewhite	lua\\lgc.c	/^#define makewhite(/;"	d	file:
malform	lua\\testes\\pm.lua	/^local function malform (p, m)$/;"	f
malformednum	lua\\testes\\literals.lua	/^local function malformednum (n, exp)$/;"	f
malloc	torch7\\lib\\TH\\THAllocator.h	/^  void* (*malloc)(void*, ptrdiff_t);$/;"	m	struct:THAllocator	typeref:typename:void * (*)(void *,ptrdiff_t)
man	dmlc-core\\doc\\Makefile	/^man:$/;"	t
manager	dmlc-core\\include\\dmlc\\parameter.h	/^  ParamManager manager;$/;"	m	struct:dmlc::parameter::ParamManagerSingleton	typeref:typename:ParamManager
manager	nnvm\\include\\dmlc\\parameter.h	/^  ParamManager manager;$/;"	m	struct:dmlc::parameter::ParamManagerSingleton	typeref:typename:ParamManager
manualSeed([gen,] number)	torch7\\doc\\random.md	/^### manualSeed([gen,] number) ###$/;"	S
manylines	lua\\testes\\heavy.lua	/^function manylines ()$/;"	f
map_	dmlc-core\\include\\dmlc\\json.h	/^  std::map<std::string, Entry> map_;$/;"	m	class:dmlc::JSONObjectReadHelper	typeref:typename:std::map<std::string,Entry>
map_	nnvm\\include\\dmlc\\json.h	/^  std::map<std::string, Entry> map_;$/;"	m	class:dmlc::JSONObjectReadHelper	typeref:typename:std::map<std::string,Entry>
markbeingfnz	lua\\lgc.c	/^static lu_mem markbeingfnz (global_State *g) {$/;"	f	typeref:typename:lu_mem	file:
markkey	lua\\lgc.c	/^#define markkey(/;"	d	file:
marklen	lua\\lua.c	/^#define marklen	/;"	d	file:
markmt	lua\\lgc.c	/^static void markmt (global_State *g) {$/;"	f	typeref:typename:void	file:
markobject	lua\\lgc.c	/^#define markobject(/;"	d	file:
markobjectN	lua\\lgc.c	/^#define markobjectN(/;"	d	file:
markold	lua\\lgc.c	/^static void markold (global_State *g, GCObject *from, GCObject *to) {$/;"	f	typeref:typename:void	file:
markupval	lua\\lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	typeref:typename:void	file:
markvalue	lua\\lgc.c	/^#define markvalue(/;"	d	file:
maskcolors	lua\\lgc.c	/^#define maskcolors	/;"	d	file:
maskgencolors	lua\\lgc.c	/^#define maskgencolors	/;"	d	file:
master_doc	dmlc-core\\doc\\conf.py	/^master_doc = 'index'$/;"	v
match	lua\\lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	typeref:typename:const char *	file:
match_capture	lua\\lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	typeref:typename:const char *	file:
match_class	lua\\lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	typeref:typename:int	file:
match_range_	nnvm\\src\\pass\\plan_memory.cc	/^  size_t match_range_;$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:size_t	file:
matchbalance	lua\\lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
matchbracketclass	lua\\lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	typeref:typename:int	file:
matchdepth	lua\\lstrlib.c	/^  int matchdepth;  \/* control for recursive depth (to avoid C stack overflow) *\/$/;"	m	struct:MatchState	typeref:typename:int	file:
matchhexa	lua\\testes\\strings.lua	/^  local function matchhexa (n)$/;"	f
math_abs	lua\\lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_acos	lua\\lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_asin	lua\\lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_atan	lua\\lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ceil	lua\\lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_cos	lua\\lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_cosh	lua\\lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_deg	lua\\lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_exp	lua\\lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_floor	lua\\lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_fmod	lua\\lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_frexp	lua\\lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ldexp	lua\\lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_log	lua\\lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_log10	lua\\lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_max	lua\\lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_min	lua\\lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_modf	lua\\lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_pow	lua\\lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_rad	lua\\lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_random	lua\\lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_randomseed	lua\\lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sin	lua\\lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sinh	lua\\lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sqrt	lua\\lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_tan	lua\\lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_tanh	lua\\lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_toint	lua\\lmathlib.c	/^static int math_toint (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_type	lua\\lmathlib.c	/^static int math_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ult	lua\\lmathlib.c	/^static int math_ult (lua_State *L) {$/;"	f	typeref:typename:int	file:
mathlib	lua\\lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
matrixmultiply	torch7\\test\\test.lua	/^   local function matrixmultiply(mat1,mat2)$/;"	f
maxNumAttempt	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int maxNumAttempt = 3;$/;"	f	class:ApplicationMaster	file:
max_buffer_size_	dmlc-core\\src\\io\\s3_filesys.cc	/^  size_t max_buffer_size_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:size_t	file:
max_bytes	nnvm\\src\\pass\\plan_memory.cc	/^    size_t max_bytes{0};$/;"	m	struct:nnvm::pass::__anon235b49ae0110::GraphAllocator::StorageEntry	typeref:typename:size_t	file:
max_capacity_	dmlc-core\\include\\dmlc\\threadediter.h	/^  size_t max_capacity_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:size_t
max_error_retry_	dmlc-core\\src\\io\\s3_filesys.cc	/^  int max_error_retry_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:int	file:
max_expand	lua\\lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
max_index	dmlc-core\\src\\data\\row_block.h	/^  IndexType max_index;$/;"	m	struct:dmlc::data::RowBlockContainer	typeref:typename:IndexType
max_pool	python\\tinyflow\\nn.py	/^def max_pool(data,$/;"	f
maxalign	lua\\lstrlib.c	/^  int maxalign;$/;"	m	struct:Header	typeref:typename:int	file:
maxcap	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^  int maxcap;$/;"	m	struct:producer_test::IntProducer	typeref:typename:int	file:
maxdiff	torch7\\test\\test.lua	/^local function maxdiff(x,y)$/;"	f
maxmem	lua\\ltests.h	/^  unsigned long maxmem;$/;"	m	struct:Memcontrol	typeref:typename:unsigned long
maxstacksize	lua\\lobject.h	/^  lu_byte maxstacksize;  \/* number of registers needed by this function *\/$/;"	m	struct:Proto	typeref:typename:lu_byte
maybeTriggerGC	torch7\\lib\\TH\\THGeneral.c	/^static void maybeTriggerGC(ptrdiff_t curHeapSize) {$/;"	f	typeref:typename:void	file:
mcurl_	dmlc-core\\src\\io\\s3_filesys.cc	/^  CURL *mcurl_, *ecurl_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:CURL *	file:
mem_query	lua\\ltests.c	/^static int mem_query (lua_State *L) {$/;"	f	typeref:typename:int	file:
memerrmsg	lua\\lstate.h	/^  TString *memerrmsg;  \/* message for memory-allocation errors *\/$/;"	m	struct:global_State	typeref:typename:TString *
memlimit	lua\\ltests.h	/^  unsigned long memlimit;$/;"	m	struct:Memcontrol	typeref:typename:unsigned long
meta_assert_failure	torch7\\test\\test_Tester.lua	/^local function meta_assert_failure(success, message)$/;"	f
meta_assert_success	torch7\\test\\test_Tester.lua	/^local function meta_assert_success(success, message)$/;"	f
metatable	lua\\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table *
metatable	lua\\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata	typeref:struct:Table *
metatable	lua\\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata0	typeref:struct:Table *
metatable:__index	torch7\\TestSuite.lua	/^   function metatable:__index(key)$/;"	f
metatable:__newindex	torch7\\TestSuite.lua	/^   function metatable:__newindex(key, value)$/;"	f
method.luaname2wrapname	torch7\\TensorMath.lua	/^   function method.luaname2wrapname(self, name)$/;"	f
min_expand	lua\\lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
minimize	python\\tinyflow\\train.py	/^    def minimize(self, obj):$/;"	m	class:AdamOptimizer
minimize	python\\tinyflow\\train.py	/^    def minimize(self, obj):$/;"	m	class:GradientDescentOptimizer
mnist	example\\mnist_lenet.py	/^mnist = get_mnist(flatten=False, onehot=False)$/;"	v
mnist	example\\mnist_mlp_auto_shape_inference.py	/^mnist = get_mnist(flatten=True, onehot=False)$/;"	v
mnist	example\\mnist_softmax.py	/^mnist = get_mnist(flatten=True, onehot=True)$/;"	v
mnist	example\\mnist_softmax_minimum.py	/^mnist = get_mnist(flatten=True, onehot=True)$/;"	v
mode	lua\\ldo.c	/^  const char *mode;$/;"	m	struct:SParser	typeref:typename:const char *	file:
movegotosout	lua\\lparser.c	/^static void movegotosout (FuncState *fs, BlockCnt *bl) {$/;"	f	typeref:typename:void	file:
moveresults	lua\\ldo.c	/^static void moveresults (lua_State *L, StkId res, int nres, int wanted) {$/;"	f	typeref:typename:void	file:
mpi_submit	dmlc-core\\tracker\\dmlc_tracker\\mpi.py	/^    def mpi_submit(nworker, nserver, pass_envs):$/;"	f	function:submit	file:
ms	lua\\lstrlib.c	/^  MatchState ms;  \/* match state *\/$/;"	m	struct:GMatchState	typeref:typename:MatchState	file:
msg	lua\\testes\\bitwise.lua	/^  local st, msg = pcall(function () return 4 & "a" end)$/;"	f
msg	lua\\testes\\bitwise.lua	/^  local st, msg = pcall(function () return ~"a" end)$/;"	f
msg	lua\\testes\\calls.lua	/^f, msg = load(function () return table.remove(t, 1) end)$/;"	f
msg	lua\\testes\\db.lua	/^  local st, msg = (function () return pcall end)()(debug.traceback)$/;"	f
msg	lua\\testes\\errors.lua	/^  local res, msg = pcall(function () error(t) end)$/;"	f
msg	lua\\testes\\errors.lua	/^  local res, msg = xpcall(loop, function (m)$/;"	f
msg	lua\\testes\\errors.lua	/^  local st, msg = pcall(function()$/;"	f
msg	lua\\testes\\errors.lua	/^  res, msg = pcall(function () assert(false) end)$/;"	f
msg	lua\\testes\\errors.lua	/^  res, msg = pcall(function () error(nil) end)$/;"	f
msg	lua\\testes\\errors.lua	/^  res, msg = xpcall(f, function (r) return {msg=r.msg..'y'} end)$/;"	f
msg	lua\\testes\\heavy.lua	/^    local st, msg = pcall(function ()$/;"	f
msg	lua\\testes\\heavy.lua	/^  local st, msg = pcall(function ()$/;"	f
msg_	dmlc-core\\src\\config.cc	/^  string msg_;$/;"	m	class:dmlc::TokenizeError	typeref:typename:string	file:
msghandler	lua\\lua.c	/^static int msghandler (lua_State *L) {$/;"	f	typeref:typename:int	file:
mt	lua\\lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:Table * []
mt	lua\\testes\\api.lua	/^mt = {__add = function (a,b) return setmetatable({a[1] + b[1]}, mt) end,$/;"	f
mt	lua\\testes\\events.lua	/^mt = {__index = function (a,b) return a+b end,$/;"	f
mt	lua\\testes\\gc.lua	/^  local mt = {__gc = function (o)$/;"	f
mt.__add	lua\\testes\\events.lua	/^mt.__add = function (a,b) return (a or 1) + (b or 2) end$/;"	f
mt.__gc	lua\\testes\\all.lua	/^  mt.__gc = function (o)$/;"	f
mt.__index	lua\\testes\\events.lua	/^mt.__index = function (a,b) return a or b end$/;"	f
mt.__len	lua\\testes\\nextvar.lua	/^  mt.__len = function () return #tab end$/;"	f
mthread_submit	dmlc-core\\tracker\\dmlc_tracker\\local.py	/^    def mthread_submit(nworker, nserver, envs):$/;"	f	function:submit	file:
muls_DISPATCHTABLE	torch7\\lib\\TH\\generic\\THVectorDispatch.c	/^static FunctionDescription THVector_(muls_DISPATCHTABLE)[] = {$/;"	v	typeref:typename:FunctionDescription THVector_ ()[]	file:
multi_value_	dmlc-core\\include\\dmlc\\config.h	/^  const bool multi_value_;$/;"	m	class:dmlc::Config	typeref:typename:const bool
multiline	lua\\lua.c	/^static int multiline (lua_State *L) {$/;"	f	typeref:typename:int	file:
mutable_input_nodes	nnvm\\include\\nnvm\\graph.h	/^  inline const std::unordered_set<uint32_t>& mutable_input_nodes() const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:const std::unordered_set<uint32_t> &
mutable_input_nodes_	nnvm\\include\\nnvm\\graph.h	/^  std::unordered_set<uint32_t> mutable_input_nodes_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::unordered_set<uint32_t>
mutex	nnvm\\src\\core\\op.cc	/^  std::recursive_mutex mutex;$/;"	m	struct:nnvm::OpManager	typeref:typename:std::recursive_mutex	file:
mutex_	dmlc-core\\include\\dmlc\\concurrency.h	/^  std::mutex mutex_;$/;"	m	class:dmlc::ConcurrentBlockingQueue	typeref:typename:std::mutex
mutex_	dmlc-core\\include\\dmlc\\lua.h	/^  std::mutex mutex_;$/;"	m	class:dmlc::LuaState	typeref:typename:std::mutex
mutex_	dmlc-core\\include\\dmlc\\thread_local.h	/^  std::mutex mutex_;$/;"	m	class:dmlc::ThreadLocalStore	typeref:typename:std::mutex
mutex_	dmlc-core\\include\\dmlc\\threadediter.h	/^  std::mutex mutex_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:std::mutex
mutex_	nnvm\\include\\dmlc\\thread_local.h	/^  std::mutex mutex_;$/;"	m	class:dmlc::ThreadLocalStore	typeref:typename:std::mutex
myTests	torch7\\test\\test_Tester.lua	/^   local myTests = {{function() end}}$/;"	f
myTests.assertAbuse	torch7\\test\\test_Tester.lua	/^   function myTests.assertAbuse()$/;"	f
myTests.t1	torch7\\test\\test_Tester.lua	/^      function myTests.t1()$/;"	f
myproject	nnvm\\example\\src\\operator.cc	/^namespace myproject {$/;"	n	file:
n	lua\\lauxlib.c	/^  int n;  \/* number of pre-read characters *\/$/;"	m	struct:LoadF	typeref:typename:int	file:
n	lua\\lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer	typeref:typename:size_t
n	lua\\liolib.c	/^  int n;  \/* number of elements in buffer 'buff' *\/$/;"	m	struct:__anona099834f0108	typeref:typename:int	file:
n	lua\\lobject.h	/^  lua_Number n;    \/* float numbers *\/$/;"	m	union:Value	typeref:typename:lua_Number
n	lua\\lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anon029e15920508	typeref:typename:int
n	lua\\lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist	typeref:typename:int
n	lua\\lstrlib.c	/^  lua_Number n;$/;"	m	union:Ftypes	typeref:typename:lua_Number	file:
n	lua\\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon7d795870030a	typeref:typename:lua_Number	file:
n	lua\\lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio	typeref:typename:size_t
n	lua\\lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer	typeref:typename:size_t
n	torch7\\lib\\TH\\THRandom.c	/^#define/;"	d	file:
nCcalls	lua\\lstate.h	/^  l_uint32 nCcalls;  \/* number of allowed nested C calls - 'nci' *\/$/;"	m	struct:lua_State	typeref:typename:l_uint32
nDimension	torch7\\lib\\TH\\generic\\THTensor.h	/^    int nDimension;$/;"	m	struct:THTensor	typeref:typename:int
na	lua\\lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
nabslineinfo	lua\\lparser.h	/^  int nabslineinfo;  \/* number of elements in 'abslineinfo' *\/$/;"	m	struct:FuncState	typeref:typename:int
nactvar	lua\\lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the block *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
nactvar	lua\\lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc	typeref:typename:lu_byte
nactvar	lua\\lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
name	dmlc-core\\example\\parameter.cc	/^  std::string name;$/;"	m	struct:MyParam	typeref:typename:std::string	file:
name	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string name;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
name	dmlc-core\\include\\dmlc\\registry.h	/^  std::string name;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::string
name	dmlc-core\\src\\io\\filesys.h	/^  std::string name;$/;"	m	struct:dmlc::io::URI	typeref:typename:std::string
name	dmlc-core\\test\\parameter_test.cc	/^  std::string name;$/;"	m	struct:Param	typeref:typename:std::string	file:
name	lua\\lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg	typeref:typename:const char *
name	lua\\ldo.c	/^  const char *name;$/;"	m	struct:SParser	typeref:typename:const char *	file:
name	lua\\lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc	typeref:typename:TString *
name	lua\\lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc	typeref:typename:TString *
name	lua\\lparser.h	/^  TString *name;$/;"	m	struct:Vardesc	typeref:typename:TString *
name	lua\\lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
name	lua\\lundump.c	/^  const char *name;$/;"	m	struct:__anon681ca6790108	typeref:typename:const char *	file:
name	nnvm\\include\\dmlc\\parameter.h	/^  std::string name;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
name	nnvm\\include\\dmlc\\registry.h	/^  std::string name;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::string
name	nnvm\\include\\nnvm\\node.h	/^  std::string name;$/;"	m	struct:nnvm::NodeAttrs	typeref:typename:std::string
name	nnvm\\include\\nnvm\\op.h	/^  std::string name;$/;"	m	class:nnvm::Op	typeref:typename:std::string
name	src\\op_nn.cc	/^  std::string name;$/;"	m	struct:tinyflow::BatchNormalizationParam	typeref:typename:std::string	file:
name	torch7\\lib\\TH\\THDiskFile.c	/^    char *name;$/;"	m	struct:THDiskFile__	typeref:typename:char *	file:
name_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string name_;$/;"	m	class:dmlc::parameter::ParamManager	typeref:typename:std::string
name_	nnvm\\include\\dmlc\\parameter.h	/^  std::string name_;$/;"	m	class:dmlc::parameter::ParamManager	typeref:typename:std::string
name_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  std::string name_;$/;"	m	class:nnvm::fusion::VariableAST	typeref:typename:std::string
name_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^  std::string name_;$/;"	m	class:nnvm::fusion::RTC	typeref:typename:std::string
namenode_	dmlc-core\\src\\io\\hdfs_filesys.h	/^  std::string namenode_;$/;"	m	class:dmlc::io::HDFSFileSystem	typeref:typename:std::string
namewhat	lua\\lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
nativeEndianEncoding()	torch7\\doc\\diskfile.md	/^### nativeEndianEncoding() ###$/;"	S
nativeendian	lua\\lstrlib.c	/^} nativeendian = {1};$/;"	v	typeref:typename:const union __anon7d795870020a
nci	lua\\lstate.h	/^  unsigned short nci;  \/* number of items in 'ci' list *\/$/;"	m	struct:lua_State	typeref:typename:unsigned short
ndim	nnvm\\include\\nnvm\\tuple.h	/^  inline index_t ndim() const {$/;"	f	class:nnvm::Tuple	typeref:typename:index_t
ndim_	nnvm\\include\\nnvm\\tuple.h	/^  index_t ndim_{0};$/;"	m	class:nnvm::Tuple	typeref:typename:index_t
ne(got, unexpected  [, tolerance] [, message])	torch7\\doc\\tester.md	/^### ne(got, unexpected  [, tolerance] [, message]) ###$/;"	S
near	torch7\\lib\\TH\\vector\\VSX.c	/^int near(double a, double b)$/;"	f	typeref:typename:int
need_attr_hint	nnvm\\src\\pass\\gradient.cc	/^  bool need_attr_hint{true};$/;"	m	struct:nnvm::pass::__anona60d04f90110::GradEntry	typeref:typename:bool	file:
need_inputs	src\\op_util.h	/^  bool need_inputs{true};$/;"	m	struct:tinyflow::NNBackwardParam	typeref:typename:bool
need_outputs	src\\op_util.h	/^  bool need_outputs{true};$/;"	m	struct:tinyflow::NNBackwardParam	typeref:typename:bool
need_value	lua\\lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	typeref:typename:int	file:
needclose	lua\\lparser.h	/^  lu_byte needclose;  \/* function needs to close upvalues when returning *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
negatecondition	lua\\lcode.c	/^static void negatecondition (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
new	lua\\testes\\coroutine.lua	/^local function new (x)$/;"	f
new()	cwrap\\doc\\highlevelinterface.md	/^### new() ###$/;"	S
new_localvar	lua\\lparser.c	/^static Vardesc *new_localvar (LexState *ls, TString *name) {$/;"	f	typeref:typename:Vardesc *	file:
new_localvarliteral	lua\\lparser.c	/^#define new_localvarliteral(/;"	d	file:
newbox	lua\\lauxlib.c	/^static void newbox (lua_State *L) {$/;"	f	typeref:typename:void	file:
newbuffsize	lua\\lauxlib.c	/^static size_t newbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f	typeref:typename:size_t	file:
newfile	lua\\liolib.c	/^static LStream *newfile (lua_State *L) {$/;"	f	typeref:typename:LStream *	file:
newgotoentry	lua\\lparser.c	/^static int newgotoentry (LexState *ls, TString *name, int line, int pc) {$/;"	f	typeref:typename:int	file:
newlabelentry	lua\\lparser.c	/^static int newlabelentry (LexState *ls, Labellist *l, TString *name,$/;"	f	typeref:typename:int	file:
newprefile	lua\\liolib.c	/^static LStream *newprefile (lua_State *L) {$/;"	f	typeref:typename:LStream *	file:
newproxy	lua\\testes\\gc.lua	/^  local function newproxy(u)$/;"	f
newresource	lua\\testes\\api.lua	/^  local function newresource ()$/;"	f
newstate	lua\\ltests.c	/^static int newstate (lua_State *L) {$/;"	f	typeref:typename:int	file:
newupval	lua\\lfunc.c	/^static UpVal *newupval (lua_State *L, int tag, StkId level, UpVal **prev) {$/;"	f	typeref:typename:UpVal *	file:
newupvalue	lua\\lparser.c	/^static int newupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	typeref:typename:int	file:
newuserdata	lua\\ltests.c	/^static int newuserdata (lua_State *L) {$/;"	f	typeref:typename:int	file:
next	dmlc-core\\include\\dmlc\\memory.h	/^    LinkedList* next{nullptr};$/;"	m	struct:dmlc::MemoryPool::LinkedList	typeref:typename:LinkedList *
next	lua\\llex.c	/^#define next(/;"	d	file:
next	lua\\lobject.h	/^      struct UpVal *next;  \/* linked list *\/$/;"	m	struct:UpVal::__anon4faed11c030a::__anon4faed11c0408	typeref:struct:UpVal *
next	lua\\lobject.h	/^    int next;  \/* for chaining *\/$/;"	m	struct:Node::NodeKey	typeref:typename:int
next	lua\\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo **
next	nnvm\\include\\dmlc\\memory.h	/^    LinkedList* next{nullptr};$/;"	m	struct:dmlc::MemoryPool::LinkedList	typeref:typename:LinkedList *
next	torch7\\lib\\TH\\THRandom.h	/^  unsigned long next;$/;"	m	struct:THGenerator	typeref:typename:unsigned long
next_batch	python\\tinyflow\\datasets.py	/^    def next_batch(self, batch_size):$/;"	m	class:ArrayPacker
next_ci	lua\\ldo.c	/^#define next_ci(/;"	d	file:
nextc	lua\\liolib.c	/^static int nextc (RN *rn) {$/;"	f	typeref:typename:int	file:
nextline	lua\\ldebug.c	/^static int nextline (const Proto *p, int currentline, int pc) {$/;"	f	typeref:typename:int	file:
nextraargs	lua\\lstate.h	/^      int nextraargs;  \/* # of extra arguments in vararg functions *\/$/;"	m	struct:CallInfo::__anonad48b566010a::__anonad48b5660208	typeref:typename:int
nextrand	lua\\lmathlib.c	/^static Rand64 nextrand (Rand64 *state) {$/;"	f	typeref:typename:Rand64	file:
nh	lua\\lparser.c	/^  int nh;  \/* total number of 'record' elements *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
nilK	lua\\lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	typeref:typename:int	file:
nilvalue	lua\\lstate.h	/^  TValue nilvalue;  \/* a nil value *\/$/;"	m	struct:global_State	typeref:typename:TValue
nk	lua\\lparser.h	/^  int nk;  \/* number of elements in 'k' *\/$/;"	m	struct:FuncState	typeref:typename:int
nleft	dmlc-core\\src\\io\\s3_filesys.cc	/^  size_t nleft;$/;"	m	struct:dmlc::io::s3::ReadStringStream	typeref:typename:size_t	file:
nlocvars	lua\\lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState	typeref:typename:short
nmClient	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private NMClientAsync nmClient = null;$/;"	f	class:ApplicationMaster	file:
nn_float	python\\tinyflow\\_session.py	/^nn_float = _ctypes.c_float$/;"	v
nn_uint	nnvm\\include\\nnvm\\c_api.h	/^typedef unsigned int nn_uint;$/;"	t	typeref:typename:unsigned int
nn_uint	nnvm\\python\\nnvm\\_base.py	/^nn_uint = ctypes.c_uint$/;"	v
nnvm	nnvm\\include\\nnvm\\base.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\graph.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\graph_attr_types.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\node.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\op.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\op_attr_types.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\pass.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\pass_functions.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\symbolic.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\include\\nnvm\\tuple.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\base.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\plugin\\nnvm-fusion\\src\\codegen.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\plugin\\nnvm-fusion\\src\\fusion.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\plugin\\nnvm-fusion\\src\\internal.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\core\\graph.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\core\\node.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\core\\op.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\core\\pass.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\core\\symbolic.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\pass\\gradient.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\pass\\graph_algorithm.h	/^namespace nnvm {$/;"	n
nnvm	nnvm\\src\\pass\\infer_shape_type.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\pass\\order_mutation.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\pass\\place_device.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\pass\\plan_memory.cc	/^namespace nnvm {$/;"	n	file:
nnvm	nnvm\\src\\pass\\saveload_json.cc	/^namespace nnvm {$/;"	n	file:
noAutoSpacing()	torch7\\doc\\file.md	/^### noAutoSpacing() ###$/;"	S
noBuffer()	torch7\\doc\\diskfile.md	/^### noBuffer() ###$/;"	S
noLuaClosure	lua\\ldebug.c	/^#define noLuaClosure(/;"	d	file:
no_bias	src\\op_nn.cc	/^  bool no_bias;$/;"	m	struct:tinyflow::ConvPoolParam	typeref:typename:bool	file:
no_bias	src\\op_nn.cc	/^  bool no_bias;$/;"	m	struct:tinyflow::LinearParam	typeref:typename:bool	file:
node	lua\\lobject.h	/^  Node *node;$/;"	m	struct:Table	typeref:typename:Node *
node	nnvm\\include\\nnvm\\node.h	/^  NodePtr node;$/;"	m	struct:nnvm::NodeEntry	typeref:typename:NodePtr
node	nnvm\\src\\pass\\saveload_json.cc	/^  NodePtr node;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONNode	typeref:typename:NodePtr	file:
node2index_	nnvm\\include\\nnvm\\graph.h	/^  std::unordered_map<const nnvm::Node*, uint32_t> node2index_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::unordered_map<const nnvm::Node *,uint32_t>
node_color_	nnvm\\src\\pass\\plan_memory.cc	/^  std::vector<uint32_t> node_color_;$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:std::vector<uint32_t>	file:
node_dtype_	src\\session.cc	/^  const DTypeVector* node_dtype_{nullptr};$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:const DTypeVector *	file:
node_id	nnvm\\include\\nnvm\\graph.h	/^    uint32_t node_id;$/;"	m	struct:nnvm::IndexedGraph::NodeEntry	typeref:typename:uint32_t
node_id	nnvm\\include\\nnvm\\graph.h	/^  inline uint32_t node_id(const nnvm::Node* node) const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:uint32_t
node_id	nnvm\\src\\pass\\saveload_json.cc	/^    uint32_t node_id;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONNode::Entry	typeref:typename:uint32_t	file:
node_row_ptr	nnvm\\src\\pass\\saveload_json.cc	/^  std::vector<uint32_t> node_row_ptr;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONGraph	typeref:typename:std::vector<uint32_t>	file:
node_rtc_	src\\session.cc	/^  RTCMap* node_rtc_{nullptr};$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:RTCMap *	file:
node_shape_	src\\session.cc	/^  const ShapeVector* node_shape_{nullptr};$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:const ShapeVector *	file:
node_states_	src\\session.cc	/^  std::vector<VarState*> node_states_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<VarState * >	file:
nodefromval	lua\\ltable.h	/^#define nodefromval(/;"	d
nodes	nnvm\\src\\pass\\saveload_json.cc	/^  std::vector<JSONNode> nodes;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONGraph	typeref:typename:std::vector<JSONNode>	file:
nodes_	nnvm\\include\\nnvm\\graph.h	/^  std::vector<Node> nodes_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::vector<Node>
noenv	lua\\loadlib.c	/^static int noenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
noexcept	dmlc-core\\include\\dmlc\\base.h	/^#define noexcept(/;"	d
noexcept	nnvm\\include\\dmlc\\base.h	/^#define noexcept(/;"	d
noexcept_false	dmlc-core\\include\\dmlc\\base.h	/^#define noexcept_false$/;"	d
noexcept_false	nnvm\\include\\dmlc\\base.h	/^#define noexcept_false$/;"	d
noexcept_true	dmlc-core\\include\\dmlc\\base.h	/^#define noexcept_true /;"	d
noexcept_true	nnvm\\include\\dmlc\\base.h	/^#define noexcept_true /;"	d
nop	lua\\testes\\gc.lua	/^local function nop () end$/;"	f
normal	python\\tinyflow\\_ops.py	/^def normal(shape, stdev=1.0):$/;"	f
normal_is_valid	torch7\\lib\\TH\\THRandom.h	/^  int normal_is_valid; \/* = 0; *\/$/;"	m	struct:THGenerator	typeref:typename:int
normal_rho	torch7\\lib\\TH\\THRandom.h	/^  double normal_rho;$/;"	m	struct:THGenerator	typeref:typename:double
normal_x	torch7\\lib\\TH\\THRandom.h	/^  double normal_x;$/;"	m	struct:THGenerator	typeref:typename:double
normal_y	torch7\\lib\\TH\\THRandom.h	/^  double normal_y;$/;"	m	struct:THGenerator	typeref:typename:double
nospecials	lua\\lstrlib.c	/^static int nospecials (const char *p, size_t l) {$/;"	f	typeref:typename:int	file:
notm	lua\\ltm.h	/^#define notm(/;"	d
novariant	lua\\lobject.h	/^#define novariant(/;"	d
np	example\\cifar_resnet.py	/^import numpy as np$/;"	I
np	lua\\lparser.h	/^  int np;  \/* number of elements in 'p' *\/$/;"	m	struct:FuncState	typeref:typename:int
np	nnvm\\python\\nnvm\\_base.py	/^import numpy as np$/;"	I
np	python\\tinyflow\\_session.py	/^import numpy as np$/;"	I
np	python\\tinyflow\\datasets.py	/^import numpy as np$/;"	I
np	tests\\python\\test_gradients.py	/^import numpy as np$/;"	I
np	tests\\python\\test_ops.py	/^import numpy as np$/;"	I
np	tests\\python\\test_states.py	/^import numpy as np$/;"	I
nparams	lua\\lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug	typeref:typename:unsigned char
nread	torch7\\lib\\TH\\THDiskFile.c	/^  size_t nread = 0L;$/;"	v	typeref:typename:size_t
nresults	lua\\lapi.c	/^  int nresults;$/;"	m	struct:CallS	typeref:typename:int	file:
nresults	lua\\lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo	typeref:typename:short
nthread_	dmlc-core\\src\\data\\text_parser.h	/^  int nthread_;$/;"	m	class:dmlc::data::TextParserBase	typeref:typename:int
ntransfer	lua\\lstate.h	/^      unsigned short ntransfer;  \/* number of values transfered *\/$/;"	m	struct:CallInfo::__anonad48b566040a::__anonad48b5660508	typeref:typename:unsigned short
ntransfer	lua\\lua.h	/^  unsigned short ntransfer;   \/* (r) number of transferred values *\/$/;"	m	struct:lua_Debug	typeref:typename:unsigned short
num2int	lua\\ltests.c	/^static int num2int (lua_State *L) {$/;"	f	typeref:typename:int	file:
num2straux	lua\\lstrlib.c	/^static int num2straux (char *buff, int sz, lua_Number x) {$/;"	f	typeref:typename:int	file:
numServer	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int numServer = 0;$/;"	f	class:ApplicationMaster	file:
numTasks	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int numTasks;$/;"	f	class:ApplicationMaster	file:
numWorker	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int numWorker = 1;$/;"	f	class:ApplicationMaster	file:
num_batch	example\\cifar_resnet.py	/^num_batch  = 600$/;"	v
num_batch	example\\mnist_lenet.py	/^    num_batch = 600$/;"	v
num_batch	example\\mnist_mlp_auto_shape_inference.py	/^    num_batch = 600$/;"	v
num_col_	dmlc-core\\src\\data\\disk_row_iter.h	/^  size_t num_col_;$/;"	m	class:dmlc::data::DiskRowIter	typeref:typename:size_t
num_data	dmlc-core\\test\\parameter_test.cc	/^  int num_data;$/;"	m	struct:SecondParam	typeref:typename:int	file:
num_epoch	example\\cifar_resnet.py	/^num_epoch  = 10$/;"	v
num_filter	src\\op_nn.cc	/^  uint32_t num_filter;$/;"	m	struct:tinyflow::ConvPoolParam	typeref:typename:uint32_t	file:
num_heap_allocated_	nnvm\\include\\nnvm\\tuple.h	/^  index_t num_heap_allocated_{0};$/;"	m	class:nnvm::Tuple	typeref:typename:index_t
num_hidden	dmlc-core\\example\\parameter.cc	/^  int num_hidden;$/;"	m	struct:MyParam	typeref:typename:int	file:
num_hidden	dmlc-core\\test\\parameter_test.cc	/^  int num_hidden;$/;"	m	struct:Param	typeref:typename:int	file:
num_hidden	src\\op_nn.cc	/^  uint32_t num_hidden;$/;"	m	struct:tinyflow::LinearParam	typeref:typename:uint32_t	file:
num_inputs	nnvm\\include\\nnvm\\node.h	/^inline uint32_t Node::num_inputs() const {$/;"	f	class:nnvm::Node	typeref:typename:uint32_t
num_inputs	nnvm\\include\\nnvm\\op.h	/^  uint32_t num_inputs = 1;$/;"	m	class:nnvm::Op	typeref:typename:uint32_t
num_match_color_	nnvm\\src\\pass\\plan_memory.cc	/^  uint32_t num_match_color_{1};$/;"	m	class:nnvm::pass::__anon235b49ae0110::GraphAllocator	typeref:typename:uint32_t	file:
num_no_grad_inputs	src\\op_util.h	/^  uint32_t num_no_grad_inputs{0};$/;"	m	struct:tinyflow::NNBackwardParam	typeref:typename:uint32_t
num_node_entries	nnvm\\include\\nnvm\\graph.h	/^  inline size_t num_node_entries() const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:size_t
num_nodes	nnvm\\include\\nnvm\\graph.h	/^  inline size_t num_nodes() const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:size_t
num_outputs	nnvm\\include\\nnvm\\node.h	/^inline uint32_t Node::num_outputs() const {$/;"	f	class:nnvm::Node	typeref:typename:uint32_t
num_outputs	nnvm\\include\\nnvm\\op.h	/^  uint32_t num_outputs = 1;$/;"	m	class:nnvm::Op	typeref:typename:uint32_t
num_states	src\\op_util.h	/^  uint32_t num_states{0};$/;"	m	struct:tinyflow::NNBackwardParam	typeref:typename:uint32_t
numarith	lua\\lobject.c	/^static lua_Number numarith (lua_State *L, int op, lua_Number v1,$/;"	f	typeref:typename:lua_Number	file:
numblocks	lua\\ltests.h	/^  unsigned long numblocks;$/;"	m	struct:Memcontrol	typeref:typename:unsigned long
numeric_types	nnvm\\python\\nnvm\\_base.py	/^    numeric_types = (float, int, long, np.float32, np.int32)$/;"	v
numeric_types	nnvm\\python\\nnvm\\_base.py	/^    numeric_types = (float, int, np.float32, np.int32)$/;"	v
numparams	lua\\lobject.h	/^  lu_byte numparams;  \/* number of fixed (named) parameters *\/$/;"	m	struct:Proto	typeref:typename:lu_byte
numusearray	lua\\ltable.c	/^static unsigned int numusearray (const Table *t, unsigned int *nums) {$/;"	f	typeref:typename:unsigned int	file:
numusehash	lua\\ltable.c	/^static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {$/;"	f	typeref:typename:int	file:
nups	lua\\lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
nups	lua\\lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug	typeref:typename:unsigned char
nuse	lua\\lstate.h	/^  int nuse;  \/* number of elements *\/$/;"	m	struct:stringtable	typeref:typename:int
nuvalue	lua\\lobject.h	/^  unsigned short nuvalue;  \/* number of user values *\/$/;"	m	struct:Udata	typeref:typename:unsigned short
nuvalue	lua\\lobject.h	/^  unsigned short nuvalue;  \/* number of user values *\/$/;"	m	struct:Udata0	typeref:typename:unsigned short
nval	lua\\lparser.h	/^    lua_Number nval;  \/* for VKFLT *\/$/;"	m	union:expdesc::__anon029e1592020a	typeref:typename:lua_Number
nvalue	lua\\lobject.h	/^#define nvalue(/;"	d
nwait_consumer_	dmlc-core\\include\\dmlc\\concurrency.h	/^  int nwait_consumer_;$/;"	m	class:dmlc::ConcurrentBlockingQueue	typeref:typename:int
nwait_consumer_	dmlc-core\\include\\dmlc\\threadediter.h	/^  unsigned nwait_consumer_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:unsigned
nwait_producer_	dmlc-core\\include\\dmlc\\threadediter.h	/^  unsigned nwait_producer_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:unsigned
nyield	lua\\lstate.h	/^    int nyield;  \/* number of values yielded *\/$/;"	m	union:CallInfo::__anonad48b566040a	typeref:typename:int
o	lua\\makefile	/^o:	$(ALL_O)$/;"	t
obj2gco	lua\\lstate.h	/^#define obj2gco(/;"	d
obj_at	lua\\ltests.c	/^#define obj_at(/;"	d	file:
objcount	lua\\ltests.h	/^  unsigned long objcount[LUA_NUMTAGS];$/;"	m	struct:Memcontrol	typeref:typename:unsigned long[]
off64_t	dmlc-core\\include\\dmlc\\base.h	/^#define off64_t /;"	d
off64_t	nnvm\\include\\dmlc\\base.h	/^#define off64_t /;"	d
offset	dmlc-core\\include\\dmlc\\data.h	/^  const size_t *offset;$/;"	m	struct:dmlc::RowBlock	typeref:typename:const size_t *
offset	dmlc-core\\src\\data\\row_block.h	/^  std::vector<size_t> offset;$/;"	m	struct:dmlc::data::RowBlockContainer	typeref:typename:std::vector<size_t>
offset_	dmlc-core\\include\\dmlc\\parameter.h	/^  ptrdiff_t offset_;$/;"	m	class:dmlc::parameter::FieldEntryBase	typeref:typename:ptrdiff_t
offset_	nnvm\\include\\dmlc\\parameter.h	/^  ptrdiff_t offset_;$/;"	m	class:dmlc::parameter::FieldEntryBase	typeref:typename:ptrdiff_t
offset_begin_	dmlc-core\\src\\io\\input_split_base.h	/^  size_t offset_begin_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:size_t
offset_curr_	dmlc-core\\src\\io\\input_split_base.h	/^  size_t offset_curr_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:size_t
offset_end_	dmlc-core\\src\\io\\input_split_base.h	/^  size_t offset_end_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:size_t
ok	torch7\\test\\test.lua	/^                local ok = pcall(function() res2[i][j] = sm1[i][j] \/ sm2[idx1d] end)$/;"	f
ok	torch7\\test\\test.lua	/^            local ok = pcall(function() res2[{ i,3 }] = res2[{ i,3 }] \/ 2 end)$/;"	f
old	lua\\lstate.h	/^  GCObject *old;  \/* start of old objects *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
old_errfunc	lua\\lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anonad48b566010a::__anonad48b5660308	typeref:typename:ptrdiff_t
oldpc	lua\\lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State	typeref:typename:const Instruction *
omp_get_num_procs	dmlc-core\\include\\dmlc\\omp.h	/^inline int omp_get_num_procs() { return 1; }$/;"	f	typeref:typename:int
omp_get_num_threads	dmlc-core\\include\\dmlc\\omp.h	/^inline int omp_get_num_threads() { return 1; }$/;"	f	typeref:typename:int
omp_get_thread_num	dmlc-core\\include\\dmlc\\omp.h	/^inline int omp_get_thread_num() { return 0; }$/;"	f	typeref:typename:int
omp_set_num_threads	dmlc-core\\include\\dmlc\\omp.h	/^inline void omp_set_num_threads(int nthread) {}$/;"	f	typeref:typename:void
omp_uint	dmlc-core\\include\\dmlc\\omp.h	/^typedef int omp_uint;$/;"	t	namespace:dmlc	typeref:typename:int
omp_ulong	dmlc-core\\include\\dmlc\\omp.h	/^typedef long omp_ulong;  \/\/ NOLINT(*)$/;"	t	namespace:dmlc	typeref:typename:long
ompver_str	bin\\CMakeFiles\\FindOpenMP\\ompver.c	/^const char ompver_str[] = { 'I', 'N', 'F', 'O', ':', 'O', 'p', 'e', 'n', 'M',$/;"	v	typeref:typename:const char[]
ompver_str	bin\\CMakeFiles\\FindOpenMP\\ompver.cpp	/^const char ompver_str[] = { 'I', 'N', 'F', 'O', ':', 'O', 'p', 'e', 'n', 'M',$/;"	v	typeref:typename:const char[]
onContainerStarted	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onContainerStarted(ContainerId cid,$/;"	m	class:ApplicationMaster.NMCallbackHandler
onContainerStatusReceived	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onContainerStatusReceived(ContainerId cid,$/;"	m	class:ApplicationMaster.NMCallbackHandler
onContainerStopped	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onContainerStopped(ContainerId cid) {$/;"	m	class:ApplicationMaster.NMCallbackHandler
onContainersAllocated	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onContainersAllocated(List<Container> containers) {$/;"	m	class:ApplicationMaster.RMCallbackHandler
onContainersAllocated	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void onContainersAllocated(List<Container> containers) {$/;"	m	class:ApplicationMaster	file:
onContainersCompleted	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onContainersCompleted(List<ContainerStatus> status) {$/;"	m	class:ApplicationMaster.RMCallbackHandler
onContainersCompleted	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void onContainersCompleted(List<ContainerStatus> status) {$/;"	m	class:ApplicationMaster	file:
onError	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onError(Throwable ex) {$/;"	m	class:ApplicationMaster.RMCallbackHandler
onGetContainerStatusError	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onGetContainerStatusError(ContainerId cid, Throwable ex) {$/;"	m	class:ApplicationMaster.NMCallbackHandler
onNodesUpdated	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onNodesUpdated(List<NodeReport> nodereport) {$/;"	m	class:ApplicationMaster.RMCallbackHandler
onShutdownRequest	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onShutdownRequest() {$/;"	m	class:ApplicationMaster.RMCallbackHandler
onStartContainerError	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onStartContainerError(ContainerId cid, Throwable ex) {$/;"	m	class:ApplicationMaster.NMCallbackHandler
onStartContainerError	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void onStartContainerError(ContainerId cid) {$/;"	m	class:ApplicationMaster	file:
onStopContainerError	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^        public void onStopContainerError(ContainerId cid, Throwable ex) {$/;"	m	class:ApplicationMaster.NMCallbackHandler
onefunction	lua\\testes\\libs\\lib1.c	/^LUAMOD_API int onefunction (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
oneless	lua\\testes\\vararg.lua	/^function oneless (a, ...) return ... end$/;"	f
op	nnvm\\include\\nnvm\\node.h	/^  const Op *op{nullptr};$/;"	m	struct:nnvm::NodeAttrs	typeref:typename:const Op *
op	nnvm\\include\\nnvm\\node.h	/^inline const Op* Node::op() const {$/;"	f	class:nnvm::Node	typeref:typename:const Op *
op_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  char op_;$/;"	m	class:nnvm::fusion::BinaryAST	typeref:typename:char
op_arith	lua\\lvm.c	/^#define op_arith(/;"	d	file:
op_arithI	lua\\lvm.c	/^#define op_arithI(/;"	d	file:
op_arithK	lua\\lvm.c	/^#define op_arithK(/;"	d	file:
op_arithf	lua\\lvm.c	/^#define op_arithf(/;"	d	file:
op_arithfI	lua\\lvm.c	/^#define op_arithfI(/;"	d	file:
op_arithfI_aux	lua\\lvm.c	/^#define op_arithfI_aux(/;"	d	file:
op_arithfK	lua\\lvm.c	/^#define op_arithfK(/;"	d	file:
op_arithf_aux	lua\\lvm.c	/^#define op_arithf_aux(/;"	d	file:
op_attr_dependency	nnvm\\include\\nnvm\\pass.h	/^  std::vector<std::string> op_attr_dependency;$/;"	m	struct:nnvm::PassFunctionReg	typeref:typename:std::vector<std::string>
op_bitwise	lua\\lvm.c	/^#define op_bitwise(/;"	d	file:
op_bitwiseK	lua\\lvm.c	/^#define op_bitwiseK(/;"	d	file:
op_counter	nnvm\\src\\core\\op.cc	/^  std::atomic<int> op_counter{0};$/;"	m	struct:nnvm::OpManager	typeref:typename:std::atomic<int>	file:
op_exec_modules_	src\\session.cc	/^  std::vector<LuaRef> op_exec_modules_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<LuaRef>	file:
op_execs_	src\\session.cc	/^  std::vector<FOpExec> op_execs_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<FOpExec>	file:
op_group	nnvm\\src\\core\\op.cc	/^  std::vector<std::unordered_set<std::string> > op_group;$/;"	m	struct:nnvm::OpManager	typeref:typename:std::vector<std::unordered_set<std::string>>	file:
op_order	lua\\lvm.c	/^#define op_order(/;"	d	file:
op_orderI	lua\\lvm.c	/^#define op_orderI(/;"	d	file:
open	lua\\lobject.h	/^    } open;$/;"	m	union:UpVal::__anon4faed11c030a	typeref:struct:UpVal::__anon4faed11c030a::__anon4faed11c0408
open	lua\\testes\\locals.lua	/^  local function open (x)$/;"	f
open_func	lua\\lparser.c	/^static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {$/;"	f	typeref:typename:void	file:
opencheck	lua\\liolib.c	/^static void opencheck (lua_State *L, const char *fname, const char *mode) {$/;"	f	typeref:typename:void	file:
openupval	lua\\lstate.h	/^  UpVal *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State	typeref:typename:UpVal *
operator !=	dmlc-core\\src\\config.cc	/^bool Config::ConfigIterator::operator!=(const Config::ConfigIterator& rhs) const {$/;"	f	class:dmlc::Config::ConfigIterator	typeref:typename:bool
operator !=	nnvm\\include\\nnvm\\tuple.h	/^  inline bool operator!=(const TShape &s) const {$/;"	f	class:nnvm::TShape	typeref:typename:bool
operator !=	nnvm\\include\\nnvm\\tuple.h	/^  inline bool operator!=(const Tuple<ValueType> &s) const {$/;"	f	class:nnvm::Tuple	typeref:typename:bool
operator !=	nnvm\\include\\nnvm\\tuple.h	/^  inline bool operator!=(const mshadow::Shape<dim> &s) const {$/;"	f	class:nnvm::TShape	typeref:typename:bool
operator &	dmlc-core\\include\\dmlc\\logging.h	/^  void operator&(std::ostream&) {}$/;"	f	class:dmlc::LogMessageVoidify	typeref:typename:void
operator &	nnvm\\include\\dmlc\\logging.h	/^  void operator&(std::ostream&) {}$/;"	f	class:dmlc::LogMessageVoidify	typeref:typename:void
operator ()	dmlc-core\\include\\dmlc\\lua.h	/^  inline void operator()(const T& v) const {$/;"	f	struct:dmlc::lua_stack::PushArg	typeref:typename:void
operator ()	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef LuaRef::operator()(Args&& ...args) const {$/;"	f	class:dmlc::LuaRef	typeref:typename:LuaRef
operator () 	nnvm\\src\\core\\symbolic.cc	/^Symbol Symbol::operator () (const array_view<const Symbol*>& args,$/;"	f	class:nnvm::Symbol	typeref:typename:Symbol
operator *	dmlc-core\\include\\dmlc\\memory.h	/^  inline T* operator*() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:T *
operator *	dmlc-core\\src\\config.cc	/^Config::ConfigEntry Config::ConfigIterator::operator * () const {$/;"	f	class:dmlc::Config::ConfigIterator	typeref:typename:Config::ConfigEntry
operator *	nnvm\\include\\dmlc\\memory.h	/^  inline T* operator*() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:T *
operator *	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^inline ASTPtr operator*(ASTPtr lhs, ASTPtr rhs) {$/;"	f	namespace:nnvm::fusion	typeref:typename:ASTPtr
operator +	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^inline ASTPtr operator+(ASTPtr lhs, ASTPtr rhs) {$/;"	f	namespace:nnvm::fusion	typeref:typename:ASTPtr
operator ++	dmlc-core\\src\\config.cc	/^Config::ConfigIterator Config::ConfigIterator::operator++(int any) {$/;"	f	class:dmlc::Config::ConfigIterator	typeref:typename:Config::ConfigIterator
operator ++	dmlc-core\\src\\config.cc	/^Config::ConfigIterator& Config::ConfigIterator::operator++() {$/;"	f	class:dmlc::Config::ConfigIterator	typeref:typename:Config::ConfigIterator &
operator -	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^inline ASTPtr operator-(ASTPtr lhs, ASTPtr rhs) {$/;"	f	namespace:nnvm::fusion	typeref:typename:ASTPtr
operator ->	dmlc-core\\include\\dmlc\\memory.h	/^  inline T* operator->() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:T *
operator ->	nnvm\\include\\dmlc\\memory.h	/^  inline T* operator->() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:T *
operator /	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^inline ASTPtr operator\/(ASTPtr lhs, ASTPtr rhs) {$/;"	f	namespace:nnvm::fusion	typeref:typename:ASTPtr
operator <	dmlc-core\\include\\dmlc\\concurrency.h	/^    inline bool operator<(const Entry &b) const {$/;"	f	struct:dmlc::ConcurrentBlockingQueue::Entry	typeref:typename:bool
operator <<	dmlc-core\\include\\dmlc\\lua.h	/^std::ostream &operator<<(std::ostream &os, const LuaRef &r) {$/;"	f	namespace:dmlc	typeref:typename:std::ostream &
operator <<	nnvm\\include\\nnvm\\tuple.h	/^  friend std::ostream &operator<<(std::ostream &os, const Tuple<ValueType> &t) {$/;"	f	namespace:nnvm	typeref:typename:std::ostream &
operator =	dmlc-core\\include\\dmlc\\any.h	/^inline any& any::operator=(T&& other) {$/;"	f	class:dmlc::any	typeref:typename:any &
operator =	dmlc-core\\include\\dmlc\\any.h	/^inline any& any::operator=(any&& other) {$/;"	f	class:dmlc::any	typeref:typename:any &
operator =	dmlc-core\\include\\dmlc\\any.h	/^inline any& any::operator=(const any& other) {$/;"	f	class:dmlc::any	typeref:typename:any &
operator =	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef& LuaRef::operator=(LuaRef&& other) {$/;"	f	class:dmlc::LuaRef	typeref:typename:LuaRef &
operator =	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef& LuaRef::operator=(const LuaRef& other) {$/;"	f	class:dmlc::LuaRef	typeref:typename:LuaRef &
operator =	dmlc-core\\include\\dmlc\\memory.h	/^  inline ThreadlocalSharedPtr<T> &operator=(const ThreadlocalSharedPtr<T>& other) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:ThreadlocalSharedPtr<T> &
operator =	dmlc-core\\include\\dmlc\\memory.h	/^  inline ThreadlocalSharedPtr<T>& operator=(ThreadlocalSharedPtr<T>&& other) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:ThreadlocalSharedPtr<T> &
operator =	nnvm\\include\\dmlc\\any.h	/^inline any& any::operator=(T&& other) {$/;"	f	class:dmlc::any	typeref:typename:any &
operator =	nnvm\\include\\dmlc\\any.h	/^inline any& any::operator=(any&& other) {$/;"	f	class:dmlc::any	typeref:typename:any &
operator =	nnvm\\include\\dmlc\\any.h	/^inline any& any::operator=(const any& other) {$/;"	f	class:dmlc::any	typeref:typename:any &
operator =	nnvm\\include\\dmlc\\memory.h	/^  inline ThreadlocalSharedPtr<T> &operator=(const ThreadlocalSharedPtr<T>& other) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:ThreadlocalSharedPtr<T> &
operator =	nnvm\\include\\dmlc\\memory.h	/^  inline ThreadlocalSharedPtr<T>& operator=(ThreadlocalSharedPtr<T>&& other) {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:ThreadlocalSharedPtr<T> &
operator =	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape &operator=(const mshadow::Shape<dim> &shape) {$/;"	f	class:nnvm::TShape	typeref:typename:TShape &
operator =	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape& operator=(Tuple<index_t>&& src) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::TShape	typeref:typename:TShape &
operator =	nnvm\\include\\nnvm\\tuple.h	/^  inline TShape& operator=(const Tuple<index_t>& src) {$/;"	f	class:nnvm::TShape	typeref:typename:TShape &
operator =	nnvm\\include\\nnvm\\tuple.h	/^  inline Tuple<ValueType> &operator=(std::initializer_list<ValueType> init) {$/;"	f	class:nnvm::Tuple	typeref:typename:Tuple<ValueType> &
operator =	nnvm\\include\\nnvm\\tuple.h	/^  inline Tuple<ValueType>& operator=(Tuple<ValueType>&& src) {$/;"	f	class:nnvm::Tuple	typeref:typename:Tuple<ValueType> &
operator =	nnvm\\include\\nnvm\\tuple.h	/^  inline Tuple<ValueType>& operator=(const Tuple<ValueType>& src) {$/;"	f	class:nnvm::Tuple	typeref:typename:Tuple<ValueType> &
operator ==	dmlc-core\\include\\dmlc\\memory.h	/^  inline bool operator==(std::nullptr_t other) const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:bool
operator ==	dmlc-core\\src\\config.cc	/^bool Config::ConfigIterator::operator==(const Config::ConfigIterator& rhs) const {$/;"	f	class:dmlc::Config::ConfigIterator	typeref:typename:bool
operator ==	dmlc-core\\test\\unittest\\unittest_json.cc	/^  inline bool operator==(const MyClass &other) const {$/;"	f	class:json::MyClass	typeref:typename:bool	file:
operator ==	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  inline bool operator==(const MyClass &other) const {$/;"	f	class:MyClass	typeref:typename:bool	file:
operator ==	dmlc-core\\test\\unittest\\unittest_serializer.cc	/^  inline bool operator==(const Param &other) const {$/;"	f	struct:Param	typeref:typename:bool	file:
operator ==	nnvm\\include\\dmlc\\memory.h	/^  inline bool operator==(std::nullptr_t other) const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:bool
operator ==	nnvm\\include\\nnvm\\tuple.h	/^  inline bool operator==(const TShape &s) const {$/;"	f	class:nnvm::TShape	typeref:typename:bool
operator ==	nnvm\\include\\nnvm\\tuple.h	/^  inline bool operator==(const Tuple<ValueType> &s) const {$/;"	f	class:nnvm::Tuple	typeref:typename:bool
operator ==	nnvm\\include\\nnvm\\tuple.h	/^  inline bool operator==(const mshadow::Shape<dim> &s) const {$/;"	f	class:nnvm::TShape	typeref:typename:bool
operator >>	nnvm\\include\\nnvm\\tuple.h	/^  friend std::istream &operator>>(std::istream &is, Tuple<ValueType> &t) {$/;"	f	namespace:nnvm	typeref:typename:std::istream &
operator []	dmlc-core\\include\\dmlc\\array_view.h	/^  inline const ValueType& operator[](size_t i) const {$/;"	f	class:dmlc::array_view	typeref:typename:const ValueType &
operator []	dmlc-core\\include\\dmlc\\data.h	/^RowBlock<IndexType>::operator[](size_t rowid) const {$/;"	f	class:dmlc::RowBlock	typeref:typename:Row<IndexType>
operator []	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef LuaRef::operator[](const std::string& key) const {$/;"	f	class:dmlc::LuaRef	typeref:typename:LuaRef
operator []	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef LuaRef::operator[](size_t index) const {$/;"	f	class:dmlc::LuaRef	typeref:typename:LuaRef
operator []	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef LuaState::operator[](const std::string& key) {$/;"	f	class:dmlc::LuaState	typeref:typename:LuaRef
operator []	nnvm\\include\\dmlc\\array_view.h	/^  inline const ValueType& operator[](size_t i) const {$/;"	f	class:dmlc::array_view	typeref:typename:const ValueType &
operator []	nnvm\\include\\nnvm\\graph.h	/^  inline const Node& operator[](const nnvm::Node* node) const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:const Node &
operator []	nnvm\\include\\nnvm\\graph.h	/^  inline const Node& operator[](uint32_t node_id) const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:const Node &
operator []	nnvm\\include\\nnvm\\op.h	/^inline const ValueType& OpMap<ValueType>::operator[](const Op* op) const {$/;"	f	class:nnvm::OpMap	typeref:typename:const ValueType &
operator []	nnvm\\include\\nnvm\\tuple.h	/^  inline ValueType& operator[](index_t i) {$/;"	f	class:nnvm::Tuple	typeref:typename:ValueType &
operator []	nnvm\\include\\nnvm\\tuple.h	/^  inline const ValueType& operator[](index_t i) const {$/;"	f	class:nnvm::Tuple	typeref:typename:const ValueType &
operator [] 	nnvm\\src\\core\\symbolic.cc	/^Symbol Symbol::operator[] (size_t index) const {$/;"	f	class:nnvm::Symbol	typeref:typename:Symbol
opmode	lua\\lopcodes.h	/^#define opmode(/;"	d
opnames	lua\\lopnames.h	/^static const char *const opnames[] = {$/;"	v	typeref:typename:const char * const[]
oprint	torch7\\CmdLine.lua	/^   oprint = oprint or print -- get the current print function lazily$/;"	f
ops	lua\\ltests.c	/^static const char ops[] = "+-*%^\/\\\\&|~<>_!";$/;"	v	typeref:typename:const char[]	file:
option(name, default, help)	torch7\\doc\\cmdline.md	/^### option(name, default, help) ###$/;"	S
option_	dmlc-core\\include\\dmlc\\lua.h	/^  Option option_{kThreadLocal};$/;"	m	class:dmlc::LuaState	typeref:typename:Option
optional	dmlc-core\\include\\dmlc\\json.h	/^    bool optional;$/;"	m	struct:dmlc::JSONObjectReadHelper::Entry	typeref:typename:bool
optional	nnvm\\include\\dmlc\\json.h	/^    bool optional;$/;"	m	struct:dmlc::JSONObjectReadHelper::Entry	typeref:typename:bool
order_	dmlc-core\\include\\dmlc\\config.h	/^  std::vector<std::pair<std::string, size_t> > order_;$/;"	m	class:dmlc::Config	typeref:typename:std::vector<std::pair<std::string,size_t>>
org.apache.hadoop.yarn.dmlc	dmlc-core\\tracker\\yarn\\pom.xml	/^  <artifactId>dmlc-core-yarn<\/artifactId>$/;"	g
org.apache.hadoop.yarn.dmlc	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^package org.apache.hadoop.yarn.dmlc;$/;"	p
org.apache.hadoop.yarn.dmlc	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^package org.apache.hadoop.yarn.dmlc;$/;"	p
org.apache.hadoop.yarn.dmlc	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^package org.apache.hadoop.yarn.dmlc;$/;"	p
orgqrInPlace	torch7\\test\\test_qr.lua	/^local function orgqrInPlace(tensorFunc)$/;"	f
os_	dmlc-core\\include\\dmlc\\json.h	/^  std::ostream *os_;$/;"	m	class:dmlc::JSONWriter	typeref:typename:std::ostream *
os_	nnvm\\include\\dmlc\\json.h	/^  std::ostream *os_;$/;"	m	class:dmlc::JSONWriter	typeref:typename:std::ostream *
os_clock	lua\\loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_date	lua\\loslib.c	/^static int os_date (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_difftime	lua\\loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_execute	lua\\loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_exit	lua\\loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_getenv	lua\\loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_remove	lua\\loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_rename	lua\\loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_setlocale	lua\\loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_time	lua\\loslib.c	/^static int os_time (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_tmpname	lua\\loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	typeref:typename:int	file:
ostream	dmlc-core\\include\\dmlc\\io.h	/^  explicit ostream(Stream *stream,$/;"	f	class:dmlc::ostream
ostream	dmlc-core\\include\\dmlc\\io.h	/^class ostream : public std::basic_ostream<char> {$/;"	c	namespace:dmlc
otherwhite	lua\\lgc.h	/^#define otherwhite(/;"	d
out_data_	dmlc-core\\include\\dmlc\\threadediter.h	/^  DType *out_data_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:DType *
output_blobs_	src\\session.cc	/^  std::vector<TBlob> output_blobs_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<TBlob>	file:
outputs	nnvm\\include\\nnvm\\graph.h	/^  inline const std::vector<NodeEntry>& outputs() const {$/;"	f	class:nnvm::IndexedGraph	typeref:typename:const std::vector<NodeEntry> &
outputs	nnvm\\include\\nnvm\\graph.h	/^  std::vector<NodeEntry> outputs;$/;"	m	class:nnvm::Graph	typeref:typename:std::vector<NodeEntry>
outputs	nnvm\\include\\nnvm\\symbolic.h	/^  std::vector<NodeEntry> outputs;$/;"	m	class:nnvm::Symbol	typeref:typename:std::vector<NodeEntry>
outputs_	nnvm\\include\\nnvm\\graph.h	/^  std::vector<NodeEntry> outputs_;$/;"	m	class:nnvm::IndexedGraph	typeref:typename:std::vector<NodeEntry>
outputs_	src\\session.cc	/^  std::vector<LuaRef> outputs_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<LuaRef>	file:
overflow	dmlc-core\\include\\dmlc\\io.h	/^inline int ostream::OutBuf::overflow(int c) {$/;"	f	class:dmlc::ostream::OutBuf	typeref:typename:int
overflow_	dmlc-core\\src\\io\\input_split_base.h	/^  std::string overflow_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:std::string
overflow_	dmlc-core\\src\\io\\single_file_split.h	/^  std::string overflow_;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:std::string
p	lua\\lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto **
p	lua\\lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:Proto *
p	lua\\lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value	typeref:typename:void *
p	lua\\lstate.h	/^  struct Proto p;$/;"	m	union:GCUnion	typeref:struct:Proto
p	lua\\lstrlib.c	/^  const char *p;  \/* pattern *\/$/;"	m	struct:GMatchState	typeref:typename:const char *	file:
p	lua\\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon7d795870030a	typeref:typename:void *	file:
p	lua\\lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio	typeref:typename:const char *
p	lua\\testes\\pm.lua	/^  p = string.gsub(p, "%%([0-9])", function (s)$/;"	f
p.preload.pl	lua\\testes\\attrib.lua	/^  p.preload.pl = function (...)$/;"	f
p_buffer_	dmlc-core\\include\\dmlc\\memory_io.h	/^  char *p_buffer_;$/;"	m	struct:dmlc::MemoryFixedSizeStream	typeref:typename:char *
p_buffer_	dmlc-core\\include\\dmlc\\memory_io.h	/^  std::string *p_buffer_;$/;"	m	struct:dmlc::MemoryStringStream	typeref:typename:std::string *
p_end	lua\\lstrlib.c	/^  const char *p_end;  \/* end ('\\0') of pattern *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
pack	lua\\testes\\calls.lua	/^local pack = function (...) return (table.pack(...)) end$/;"	f
packI	lua\\lmathlib.c	/^static Rand64 packI (lu_int32 h, lu_int32 l) {$/;"	f	typeref:typename:Rand64	file:
package.preload.bit32	lua\\testes\\bitwise.lua	/^package.preload.bit32 = function ()     --{$/;"	f
packint	lua\\lstrlib.c	/^static void packint (luaL_Buffer *b, lua_Unsigned n,$/;"	f	typeref:typename:void	file:
pad	src\\op_nn.cc	/^  int pad;$/;"	m	struct:tinyflow::PadParam	typeref:typename:int	file:
pad	torch7\\CmdLine.lua	/^local function pad(str, sz)$/;"	f
padding	src\\op_nn.cc	/^  std::string padding;$/;"	m	struct:tinyflow::ConvPoolParam	typeref:typename:std::string	file:
page_ptr_	dmlc-core\\include\\dmlc\\memory.h	/^  size_t page_ptr_{0};$/;"	m	class:dmlc::MemoryPool	typeref:typename:size_t
page_ptr_	nnvm\\include\\dmlc\\memory.h	/^  size_t page_ptr_{0};$/;"	m	class:dmlc::MemoryPool	typeref:typename:size_t
panic	lua\\lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	typeref:typename:int	file:
panic	lua\\lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State	typeref:typename:lua_CFunction
panicback	lua\\ltests.c	/^static int panicback (lua_State *L) {$/;"	f	typeref:typename:int	file:
paniccode	lua\\ltests.c	/^struct Aux { jmp_buf jb; const char *paniccode; lua_State *L; };$/;"	m	struct:Aux	typeref:typename:const char *	file:
param_	dmlc-core\\src\\data\\csv_parser.h	/^  CSVParserParam param_;$/;"	m	class:dmlc::data::CSVParser	typeref:typename:CSVParserParam
parameter	dmlc-core\\include\\dmlc\\parameter.h	/^namespace parameter {$/;"	n	namespace:dmlc
parameter	nnvm\\include\\dmlc\\parameter.h	/^namespace parameter {$/;"	n	namespace:dmlc
parlist	lua\\lparser.c	/^static void parlist (LexState *ls) {$/;"	f	typeref:typename:void	file:
parsed	nnvm\\include\\nnvm\\node.h	/^  any parsed;$/;"	m	struct:nnvm::NodeAttrs	typeref:typename:any
part_ids_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::vector<size_t> part_ids_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:std::vector<size_t>	file:
partition	lua\\ltablib.c	/^static IdxT partition (lua_State *L, IdxT lo, IdxT up) {$/;"	f	typeref:typename:IdxT	file:
pass	nnvm\\include\\nnvm\\pass_functions.h	/^namespace pass {$/;"	n	namespace:nnvm
pass	nnvm\\src\\pass\\gradient.cc	/^namespace pass {$/;"	n	namespace:nnvm	file:
pass	nnvm\\src\\pass\\graph_algorithm.h	/^namespace pass {$/;"	n	namespace:nnvm
pass	nnvm\\src\\pass\\infer_shape_type.cc	/^namespace pass {$/;"	n	namespace:nnvm	file:
pass	nnvm\\src\\pass\\order_mutation.cc	/^namespace pass {$/;"	n	namespace:nnvm	file:
pass	nnvm\\src\\pass\\place_device.cc	/^namespace pass {$/;"	n	namespace:nnvm	file:
pass	nnvm\\src\\pass\\plan_memory.cc	/^namespace pass {$/;"	n	namespace:nnvm	file:
pass	nnvm\\src\\pass\\saveload_json.cc	/^namespace pass {$/;"	n	namespace:nnvm	file:
patchlistaux	lua\\lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	typeref:typename:void	file:
patchtestreg	lua\\lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	typeref:typename:int	file:
path	dmlc-core\\src\\io\\filesys.h	/^  URI path;$/;"	m	struct:dmlc::io::FileInfo	typeref:typename:URI
path_	dmlc-core\\src\\io\\s3_filesys.cc	/^  URI path_;$/;"	m	class:dmlc::io::s3::HttpReadStream	typeref:typename:URI	file:
path_	dmlc-core\\src\\io\\s3_filesys.cc	/^  URI path_;$/;"	m	class:dmlc::io::s3::ReadStream	typeref:typename:URI	file:
path_	dmlc-core\\src\\io\\s3_filesys.cc	/^  URI path_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:URI	file:
pbegin_	dmlc-core\\include\\dmlc\\recordio.h	/^  char *pbegin_, *pend_;$/;"	m	class:dmlc::RecordIOChunkReader	typeref:typename:char *
pc	lua\\lobject.h	/^  int pc;$/;"	m	struct:AbsLineInfo	typeref:typename:int
pc	lua\\lparser.h	/^  int pc;  \/* next position to code (equivalent to 'ncode') *\/$/;"	m	struct:FuncState	typeref:typename:int
pc	lua\\lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc	typeref:typename:int
pcRel	lua\\ldebug.h	/^#define pcRel(/;"	d
pclose	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define pclose /;"	d
pclose	torch7\\general.h	/^#define pclose /;"	d
pclose	torch7\\lib\\TH\\THGeneral.h.in	/^#define pclose /;"	d	file:
pedantic() [default]	torch7\\doc\\file.md	/^### pedantic() [default] ###$/;"	S
pend_	dmlc-core\\include\\dmlc\\recordio.h	/^  char *pbegin_, *pend_;$/;"	m	class:dmlc::RecordIOChunkReader	typeref:typename:char **
pendingTasks	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private final Queue<TaskRecord> pendingTasks = new java.util.LinkedList<TaskRecord>();$/;"	f	class:ApplicationMaster	file:
perm	lua\\testes\\sort.lua	/^function perm (s, n)$/;"	f
permTemp	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private static final FsPermission permTemp = new FsPermission("777");$/;"	f	class:Client	file:
pf	lua\\testes\\coroutine.lua	/^function pf (n, i)$/;"	f
pheap	dmlc-core\\include\\dmlc\\any.h	/^    void* pheap;$/;"	m	union:dmlc::any::Data	typeref:typename:void *
pheap	nnvm\\include\\dmlc\\any.h	/^    void* pheap;$/;"	m	union:dmlc::any::Data	typeref:typename:void *
pickle	dmlc-core\\doc\\Makefile	/^pickle:$/;"	t
pk_funcs	lua\\loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
placeholder	python\\tinyflow\\_base.py	/^def placeholder(dtype, shape=None, name=None):$/;"	f
placeholder_nids_	src\\session.cc	/^  std::vector<uint32_t> placeholder_nids_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<uint32_t>	file:
placeholder_tblobs_	src\\session.cc	/^  std::vector<TBlob> placeholder_tblobs_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<TBlob>	file:
plock	lua\\ltests.h	/^struct L_EXTRA { int lock; int *plock; };$/;"	m	struct:L_EXTRA	typeref:typename:int *
pluralize	torch7\\Tester.lua	/^local function pluralize(num, str)$/;"	f
pmain	lua\\lua.c	/^static int pmain (lua_State *L) {$/;"	f	typeref:typename:int	file:
point2uint	lua\\llimits.h	/^#define point2uint(/;"	d
pointer	dmlc-core\\include\\dmlc\\memory.h	/^  typedef T* pointer;$/;"	t	class:dmlc::ThreadlocalAllocator	typeref:typename:T *
pointer	nnvm\\include\\dmlc\\memory.h	/^  typedef T* pointer;$/;"	t	class:dmlc::ThreadlocalAllocator	typeref:typename:T *
pool1	example\\cifar_resnet.py	/^pool1 = tf.nn.avg_pool(res, ksize=[1, 4, 4, 1], strides=[1, 2, 2, 1], padding='SAME', data_forma/;"	v
pool1	example\\mnist_lenet.py	/^pool1 = tf.nn.max_pool(tanh1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1])$/;"	v
pool2	example\\mnist_lenet.py	/^pool2 = tf.nn.max_pool(tanh2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1])$/;"	v
popen	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define popen /;"	d
popen	torch7\\general.h	/^#define popen /;"	d
popen	torch7\\lib\\TH\\THGeneral.h.in	/^#define popen /;"	d	file:
position	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*position)(THFile *self);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self)
position	torch7\\lib\\TH\\THMemoryFile.c	/^    size_t position;$/;"	m	struct:THMemoryFile__	typeref:typename:size_t	file:
posrelatI	lua\\lstrlib.c	/^static size_t posrelatI (lua_Integer pos, size_t len) {$/;"	f	typeref:typename:size_t	file:
postTests.test_setUp	torch7\\test\\test_Tester.lua	/^function postTests.test_setUp(tester)$/;"	f
postTests.test_tearDown	torch7\\test\\test_Tester.lua	/^function postTests.test_tearDown()$/;"	f
postcall	bin\\lua\\cwrap\\types.lua	/^      postcall = function(arg)$/;"	f
postcall	bin\\lua\\cwrap\\types.lua	/^   postcall = function(arg)$/;"	f
postcall	cwrap\\types.lua	/^      postcall = function(arg)$/;"	f
postcall	cwrap\\types.lua	/^   postcall = function(arg)$/;"	f
postcall	torch7\\TensorMath.lua	/^          postcall=function(arg)$/;"	f
postcall	torch7\\torchcwrap.lua	/^      postcall = function(arg)$/;"	f
postcall	torch7\\torchcwrap.lua	/^   postcall = function(arg)$/;"	f
postcall	torch7\\torchcwrap.lua	/^  postcall = function(arg)$/;"	f
postcall(arg)	cwrap\\doc\\usertypes.md	/^### postcall(arg) ###$/;"	S
precall	bin\\lua\\cwrap\\types.lua	/^      precall = function(arg)$/;"	f
precall	bin\\lua\\cwrap\\types.lua	/^   precall = function(arg)$/;"	f
precall	cwrap\\types.lua	/^      precall = function(arg)$/;"	f
precall	cwrap\\types.lua	/^   precall = function(arg)$/;"	f
precall	torch7\\TensorMath.lua	/^          precall=function(arg)$/;"	f
precall	torch7\\torchcwrap.lua	/^      precall = function(arg)$/;"	f
precall	torch7\\torchcwrap.lua	/^   precall = function(arg)$/;"	f
precall	torch7\\torchcwrap.lua	/^  precall = function(arg)$/;"	f
precall(arg)	cwrap\\doc\\usertypes.md	/^### precall(arg) ###$/;"	S
preinit_thread	lua\\lstate.c	/^static void preinit_thread (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
prepbuffsize	lua\\lauxlib.c	/^static char *prepbuffsize (luaL_Buffer *B, size_t sz, int boxidx) {$/;"	f	typeref:typename:char *	file:
prepclosingmethod	lua\\lfunc.c	/^static int prepclosingmethod (lua_State *L, TValue *obj, TValue *err) {$/;"	f	typeref:typename:int	file:
prepfile	lua\\testes\\main.lua	/^local prepfile = function (s, p)$/;"	f
prepstate	lua\\lstrlib.c	/^static void prepstate (MatchState *ms, lua_State *L,$/;"	f	typeref:typename:void	file:
pretty_date_	dmlc-core\\include\\dmlc\\logging.h	/^  DateLogger pretty_date_;$/;"	m	class:dmlc::LogMessage	typeref:typename:DateLogger
pretty_date_	dmlc-core\\include\\dmlc\\logging.h	/^  DateLogger pretty_date_;$/;"	m	class:dmlc::LogMessageFatal	typeref:typename:DateLogger
pretty_date_	nnvm\\include\\dmlc\\logging.h	/^  DateLogger pretty_date_;$/;"	m	class:dmlc::LogMessage	typeref:typename:DateLogger
pretty_date_	nnvm\\include\\dmlc\\logging.h	/^  DateLogger pretty_date_;$/;"	m	class:dmlc::LogMessageFatal	typeref:typename:DateLogger
prev	lua\\lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign *	file:
prev	lua\\lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState *
previous	lua\\ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp *	file:
previous	lua\\lobject.h	/^      struct UpVal **previous;$/;"	m	struct:UpVal::__anon4faed11c030a::__anon4faed11c0408	typeref:struct:UpVal **
previous	lua\\lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt *	file:
previous	lua\\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo *
previousinstruction	lua\\lcode.c	/^static Instruction *previousinstruction (FuncState *fs) {$/;"	f	typeref:typename:Instruction *	file:
previousline	lua\\lparser.h	/^  int previousline;  \/* last line that was saved in 'lineinfo' *\/$/;"	m	struct:FuncState	typeref:typename:int
primaryexp	lua\\lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
print	torch7\\CmdLine.lua	/^   function print(...)$/;"	f
print(str)	cwrap\\doc\\highlevelinterface.md	/^### print(str) ###$/;"	S
printDashes	torch7\\Tester.lua	/^      local function printDashes()$/;"	f
print_period	example\\mnist_lenet.py	/^print_period = 1000$/;"	v
print_period	example\\mnist_mlp_auto_shape_inference.py	/^print_period = 1000$/;"	v
print_summary	dmlc-core\\scripts\\lint.py	/^    def print_summary(self, strm):$/;"	m	class:LintHelper
print_summary	dmlc-core\\scripts\\lint3.py	/^    def print_summary(self, strm):$/;"	m	class:LintHelper
print_usage	lua\\lua.c	/^static void print_usage (const char *badoption) {$/;"	f	typeref:typename:void	file:
print_version	lua\\lua.c	/^static void print_version (void) {$/;"	f	typeref:typename:void	file:
printcode	lua\\ltests.c	/^static int printcode (lua_State *L) {$/;"	f	typeref:typename:int	file:
printlocks	lua\\testes\\api.lua	/^function printlocks ()$/;"	f
printobj	lua\\ltests.c	/^static void printobj (global_State *g, GCObject *o) {$/;"	f	typeref:typename:void	file:
printstack	lua\\ltests.c	/^static void printstack (lua_State *L) {$/;"	f	typeref:typename:void	file:
priority	dmlc-core\\include\\dmlc\\concurrency.h	/^    int priority;$/;"	m	struct:dmlc::ConcurrentBlockingQueue::Entry	typeref:typename:int
priority	lua\\lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:typename:const struct __anon029e158d0108[]
priority_queue_	dmlc-core\\include\\dmlc\\concurrency.h	/^  std::vector<Entry> priority_queue_;$/;"	m	class:dmlc::ConcurrentBlockingQueue	typeref:typename:std::vector<Entry>
process	dmlc-core\\scripts\\lint.py	/^def process(fname, allow_type):$/;"	f
process	dmlc-core\\scripts\\lint3.py	/^def process(fname, allow_type):$/;"	f
process_cpp	dmlc-core\\scripts\\lint.py	/^    def process_cpp(self, path, suffix):$/;"	m	class:LintHelper
process_cpp	dmlc-core\\scripts\\lint3.py	/^    def process_cpp(self, path, suffix):$/;"	m	class:LintHelper
process_python	dmlc-core\\scripts\\lint.py	/^    def process_python(self, path):$/;"	m	class:LintHelper
process_python	dmlc-core\\scripts\\lint3.py	/^    def process_python(self, path):$/;"	m	class:LintHelper
produce_end_	dmlc-core\\include\\dmlc\\threadediter.h	/^  bool produce_end_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:bool
producer_cond_	dmlc-core\\include\\dmlc\\threadediter.h	/^  std::condition_variable producer_cond_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:std::condition_variable
producer_owned_	dmlc-core\\include\\dmlc\\threadediter.h	/^  Producer *producer_owned_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:Producer *
producer_sig_	dmlc-core\\include\\dmlc\\threadediter.h	/^  Signal producer_sig_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:Signal
producer_sig_processed_	dmlc-core\\include\\dmlc\\threadediter.h	/^  bool producer_sig_processed_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:bool
producer_test	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^namespace producer_test {$/;"	n	file:
producer_thread_	dmlc-core\\include\\dmlc\\threadediter.h	/^  std::thread *producer_thread_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:std::thread *
progname	lua\\lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	typeref:typename:const char *	file:
progress	lua\\testes\\cstack.lua	/^local function progress ()$/;"	f
project	dmlc-core\\doc\\conf.py	/^project = u'dmlc-core'$/;"	v
project	lua\\lmathlib.c	/^static lua_Unsigned project (lua_Unsigned ran, lua_Unsigned n,$/;"	f	typeref:typename:lua_Unsigned	file:
propagateall	lua\\lgc.c	/^static lu_mem propagateall (global_State *g) {$/;"	f	typeref:typename:lu_mem	file:
propagatemark	lua\\lgc.c	/^static lu_mem propagatemark (global_State *g) {$/;"	f	typeref:typename:lu_mem	file:
protocol	dmlc-core\\src\\io\\filesys.h	/^  std::string protocol;$/;"	m	struct:dmlc::io::URI	typeref:typename:std::string
provide_graph_attr	nnvm\\include\\nnvm\\pass.h	/^  PassFunctionReg& provide_graph_attr(const std::string& attr_name) {  \/\/ NOLINT(*)$/;"	f	struct:nnvm::PassFunctionReg	typeref:typename:PassFunctionReg &
pseudoxml	dmlc-core\\doc\\Makefile	/^pseudoxml:$/;"	t
ptm	torch7\\lib\\TH\\THAtomic.c	/^static pthread_mutex_t ptm = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
ptx_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^  char* ptx_;$/;"	m	class:nnvm::fusion::RTC	typeref:typename:char *
ptype_info	dmlc-core\\include\\dmlc\\any.h	/^    const std::type_info* ptype_info;$/;"	m	struct:dmlc::any::Type	typeref:typename:const std::type_info *
ptype_info	nnvm\\include\\dmlc\\any.h	/^    const std::type_info* ptype_info;$/;"	m	struct:dmlc::any::Type	typeref:typename:const std::type_info *
push_captures	lua\\lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	typeref:typename:int	file:
push_onecapture	lua\\lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	typeref:typename:void	file:
pushargs	lua\\lua.c	/^static int pushargs (lua_State *L) {$/;"	f	typeref:typename:int	file:
pushclosure	lua\\lvm.c	/^static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,$/;"	f	typeref:typename:void	file:
pushcode	lua\\ltests.c	/^static void pushcode (lua_State *L, int code) {$/;"	f	typeref:typename:void	file:
pushed	lua\\lobject.c	/^  int pushed;  \/* number of string pieces already on the stack *\/$/;"	m	struct:BuffFS	typeref:typename:int	file:
pusherror	lua\\loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	typeref:typename:void	file:
pusherrornotfound	lua\\loadlib.c	/^static void pusherrornotfound (lua_State *L, const char *path) {$/;"	f	typeref:typename:void	file:
pushfuncname	lua\\lauxlib.c	/^static void pushfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
pushglobalfuncname	lua\\lauxlib.c	/^static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:int	file:
pushline	lua\\lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	typeref:typename:int	file:
pushmode	lua\\lbaselib.c	/^static int pushmode (lua_State *L, int oldmode) {$/;"	f	typeref:typename:int	file:
pushnumint	lua\\lmathlib.c	/^static void pushnumint (lua_State *L, lua_Number d) {$/;"	f	typeref:typename:void	file:
pushobject	lua\\ltests.c	/^static void pushobject (lua_State *L, const TValue *o) {$/;"	f	typeref:typename:void	file:
pushstr	lua\\lobject.c	/^static void pushstr (BuffFS *buff, const char *str, size_t l) {$/;"	f	typeref:typename:void	file:
pushuserdata	lua\\ltests.c	/^static int pushuserdata (lua_State *L) {$/;"	f	typeref:typename:int	file:
pushutfchar	lua\\lutf8lib.c	/^static void pushutfchar (lua_State *L, int arg) {$/;"	f	typeref:typename:void	file:
pvalue	lua\\lobject.h	/^#define pvalue(/;"	d
pvalueraw	lua\\lobject.h	/^#define pvalueraw(/;"	d
py_str	nnvm\\python\\nnvm\\_base.py	/^    py_str = lambda x: x$/;"	f
py_str	nnvm\\python\\nnvm\\_base.py	/^    py_str = lambda x: x.decode('utf-8')$/;"	f
pygments_style	dmlc-core\\doc\\conf.py	/^pygments_style = 'sphinx'$/;"	v
pylint	dmlc-core\\Makefile	/^pylint:$/;"	t
qnxnto	bin\\CMakeFiles\\3.7.1\\CompilerIdCXX\\CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qrInPlace	torch7\\test\\test_qr.lua	/^local function qrInPlace(tensorFunc)$/;"	f
qrManual	torch7\\test\\test_qr.lua	/^local function qrManual(geqrfFunc, orgqrFunc)$/;"	f
qrReturned	torch7\\test\\test_qr.lua	/^local function qrReturned(tensorFunc)$/;"	f
qthelp	dmlc-core\\doc\\Makefile	/^qthelp:$/;"	t
queue	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private String queue = "default";$/;"	f	class:Client	file:
queue.isEmpty	torch7\\Tester.lua	/^   function queue.isEmpty()$/;"	f
queue.pop	torch7\\Tester.lua	/^   function queue.pop()$/;"	f
queue.push	torch7\\Tester.lua	/^   function queue.push(value)$/;"	f
queue_	dmlc-core\\include\\dmlc\\threadediter.h	/^  std::queue<DType*> queue_;$/;"	m	class:dmlc::ThreadedIter	typeref:typename:std::queue<DType * >
quiet()	torch7\\doc\\file.md	/^### quiet() ###$/;"	S
quotefloat	lua\\lstrlib.c	/^static int quotefloat (lua_State *L, char *buff, lua_Number n) {$/;"	f	typeref:typename:int	file:
r	lua\\llex.h	/^  lua_Number r;$/;"	m	union:__anon59ab1eae010a	typeref:typename:lua_Number
r	lua\\testes\\pm.lua	/^  r = string.gsub(s, ".", function (x)$/;"	f
r	lua\\testes\\pm.lua	/^r = string.gsub(s, '()(%w+)()', function (a,w,b)$/;"	f
randDouble	torch7\\lib\\TH\\vector\\VSX.c	/^double randDouble()$/;"	f	typeref:typename:double
randfuncs	lua\\lmathlib.c	/^static const luaL_Reg randfuncs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
random__	bin\\torch7\\random.c	/^static const struct luaL_Reg random__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
randseed	lua\\lmathlib.c	/^static void randseed (lua_State *L, RanState *state) {$/;"	f	typeref:typename:void	file:
range	lua\\testes\\pm.lua	/^local function range (i, j)$/;"	f
rawSet	lua\\testes\\events.lua	/^local function rawSet(x)$/;"	f
rawtt	lua\\lobject.h	/^#define rawtt(/;"	d
read	bin\\lua\\cwrap\\types.lua	/^      read = function(arg, idx)$/;"	f
read	bin\\lua\\cwrap\\types.lua	/^   read = function(arg, idx)$/;"	f
read	cwrap\\types.lua	/^      read = function(arg, idx)$/;"	f
read	cwrap\\types.lua	/^   read = function(arg, idx)$/;"	f
read	dmlc-core\\include\\dmlc\\json.h	/^    void (*read)(JSONReader* reader, any *data);$/;"	m	struct:dmlc::json::AnyJSONManager::Entry	typeref:typename:void (*)(JSONReader * reader,any * data)
read	nnvm\\include\\dmlc\\json.h	/^    void (*read)(JSONReader* reader, any *data);$/;"	m	struct:dmlc::json::AnyJSONManager::Entry	typeref:typename:void (*)(JSONReader * reader,any * data)
read	torch7\\torchcwrap.lua	/^      read = function(arg, idx)$/;"	f
read	torch7\\torchcwrap.lua	/^   read = function(arg, idx)$/;"	f
read	torch7\\torchcwrap.lua	/^  read = function(arg, idx)$/;"	f
read(arg, idx)	cwrap\\doc\\usertypes.md	/^### read(arg, idx) ###$/;"	S
read1	lua\\testes\\calls.lua	/^function read1 (x)$/;"	f
readByte	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readByte)(THFile *self, unsigned char *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,unsigned char * data,size_t n)
readChar	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readChar)(THFile *self, char *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,char * data,size_t n)
readDouble	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readDouble)(THFile *self, double *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,double * data,size_t n)
readFloat	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readFloat)(THFile *self, float *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,float * data,size_t n)
readHalf	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readHalf)(THFile *self, THHalf *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,THHalf * data,size_t n)
readInt	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readInt)(THFile *self, int *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,int * data,size_t n)
readLong	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readLong)(THFile *self, long *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,long * data,size_t n)
readObject()	torch7\\doc\\file.md	/^### readObject() ###$/;"	S
readShort	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readShort)(THFile *self, short *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,short * data,size_t n)
readString	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*readString)(THFile *self, const char *format, char **str_);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,const char * format,char ** str_)
readURandomLong	torch7\\lib\\TH\\THRandom.c	/^static unsigned long readURandomLong()$/;"	f	typeref:typename:unsigned long	file:
read_all	lua\\liolib.c	/^static void read_all (lua_State *L, FILE *f) {$/;"	f	typeref:typename:void	file:
read_chars	lua\\liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	typeref:typename:int	file:
read_line	lua\\liolib.c	/^static int read_line (lua_State *L, FILE *f, int chop) {$/;"	f	typeref:typename:int	file:
read_long_string	lua\\llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, size_t sep) {$/;"	f	typeref:typename:void	file:
read_number	lua\\liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	typeref:typename:int	file:
read_numeral	lua\\llex.c	/^static int read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	typeref:typename:int	file:
read_ptr_	dmlc-core\\src\\io\\s3_filesys.cc	/^  size_t read_ptr_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:size_t	file:
read_string	lua\\llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	typeref:typename:void	file:
read_var_nids_	src\\session.cc	/^  std::vector<uint32_t> read_var_nids_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<uint32_t>	file:
readable	lua\\loadlib.c	/^static int readable (const char *filename) {$/;"	f	typeref:typename:int	file:
readdecesc	lua\\llex.c	/^static int readdecesc (LexState *ls) {$/;"	f	typeref:typename:int	file:
readdigits	lua\\liolib.c	/^static int readdigits (RN *rn, int hex) {$/;"	f	typeref:typename:int	file:
reader	lua\\lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio	typeref:typename:lua_Reader
readhexaesc	lua\\llex.c	/^static int readhexaesc (LexState *ls) {$/;"	f	typeref:typename:int	file:
readutf8esc	lua\\llex.c	/^static unsigned long readutf8esc (LexState *ls) {$/;"	f	typeref:typename:unsigned long	file:
real	torch7\\lib\\TH\\THGenerateByteType.h	/^#define real /;"	d
real	torch7\\lib\\TH\\THGenerateCharType.h	/^#define real /;"	d
real	torch7\\lib\\TH\\THGenerateDoubleType.h	/^#define real /;"	d
real	torch7\\lib\\TH\\THGenerateFloatType.h	/^#define real /;"	d
real	torch7\\lib\\TH\\THGenerateHalfType.h	/^#define real /;"	d
real	torch7\\lib\\TH\\THGenerateIntType.h	/^#define real /;"	d
real	torch7\\lib\\TH\\THGenerateLongType.h	/^#define real /;"	d
real	torch7\\lib\\TH\\THGenerateShortType.h	/^#define real /;"	d
real_t	dmlc-core\\include\\dmlc\\data.h	/^typedef float real_t;$/;"	t	namespace:dmlc	typeref:typename:float
real_time	torch7\\utils.c	/^static double real_time()$/;"	f	typeref:typename:double	file:
realloc	torch7\\lib\\TH\\THAllocator.h	/^  void* (*realloc)(void*, void*, ptrdiff_t);$/;"	m	struct:THAllocator	typeref:typename:void * (*)(void *,void *,ptrdiff_t)
reallymarkobject	lua\\lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	typeref:typename:void	file:
reallyold	lua\\lstate.h	/^  GCObject *reallyold;  \/* old objects with more than one cycle *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
recfield	lua\\lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
recordio.o	dmlc-core\\Makefile	/^recordio.o: src\/recordio.cc$/;"	t
recordio_split.o	dmlc-core\\Makefile	/^recordio_split.o: src\/io\/recordio_split.cc$/;"	t
recover	lua\\ldo.c	/^static int recover (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
recvall	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def recvall(self, nbytes):$/;"	m	class:ExSocket
recvint	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def recvint(self):$/;"	m	class:ExSocket
recvstr	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def recvstr(self):$/;"	m	class:ExSocket
reduction_indices	src\\op_tensor.cc	/^  Tuple<int> reduction_indices;$/;"	m	struct:tinyflow::ReduceParam	typeref:typename:Tuple<int>	file:
ref_	dmlc-core\\include\\dmlc\\lua.h	/^  int ref_;$/;"	m	class:dmlc::LuaRef	typeref:typename:int
ref_counter_	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  int *ref_counter_;$/;"	m	class:dmlc::io::HDFSStream	typeref:typename:int *	file:
ref_counter_	dmlc-core\\src\\io\\hdfs_filesys.h	/^  int *ref_counter_;$/;"	m	class:dmlc::io::HDFSFileSystem	typeref:typename:int *
refcount	torch7\\lib\\TH\\THAllocator.c	/^  int refcount;$/;"	m	struct:__anoncf22d2710108	typeref:typename:int	file:
refcount	torch7\\lib\\TH\\generic\\THStorage.h	/^    int refcount;$/;"	m	struct:THStorage	typeref:typename:int
refcount	torch7\\lib\\TH\\generic\\THTensor.h	/^    int refcount;$/;"	m	struct:THTensor	typeref:typename:int
referenced(ref)	torch7\\doc\\file.md	/^### referenced(ref) ###$/;"	S
register(name)	cwrap\\doc\\highlevelinterface.md	/^### register(name) ###$/;"	S
registerlocalvar	lua\\lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	typeref:typename:int	file:
rehash	lua\\ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	typeref:typename:void	file:
reinsert	lua\\ltable.c	/^static void reinsert (lua_State *L, Table *ot, Table *t) {$/;"	f	typeref:typename:void	file:
release	dmlc-core\\doc\\conf.py	/^release = version$/;"	v
released_by_node	nnvm\\src\\pass\\plan_memory.cc	/^    uint32_t released_by_node{0};$/;"	m	struct:nnvm::pass::__anon235b49ae0110::GraphAllocator::StorageEntry	typeref:typename:uint32_t	file:
relu1	example\\mnist_mlp_auto_shape_inference.py	/^relu1 = tf.nn.relu(fc1)$/;"	v
remarkupvals	lua\\lgc.c	/^static int remarkupvals (global_State *g) {$/;"	f	typeref:typename:int	file:
removeShmFile	torch7\\test\\test_sharedmem.lua	/^local function removeShmFile(shmFileName)$/;"	f
removefiles	lua\\testes\\attrib.lua	/^function removefiles (files)$/;"	f
removelastinstruction	lua\\lcode.c	/^static void removelastinstruction (FuncState *fs) {$/;"	f	typeref:typename:void	file:
removelastlineinfo	lua\\lcode.c	/^static void removelastlineinfo (FuncState *fs) {$/;"	f	typeref:typename:void	file:
removevalues	lua\\lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	typeref:typename:void	file:
removevars	lua\\lparser.c	/^static void removevars (FuncState *fs, int tolevel) {$/;"	f	typeref:typename:void	file:
renorm	torch7\\test\\test.lua	/^   local function renorm(matrix, value, dim, max_norm)$/;"	f
repeatstat	lua\\lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
report	lua\\lua.c	/^static int report (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
report	lua\\testes\\all.lua	/^local function report (n) print("\\n***** FILE '"..n.."'*****") end$/;"	f
reprepstate	lua\\lstrlib.c	/^static void reprepstate (MatchState *ms) {$/;"	f	typeref:typename:void	file:
res	example\\cifar_resnet.py	/^res = resnet(tanh1, 1, 16, 64)$/;"	v
res	torch7\\test\\test_writeObject.lua	/^      local ok, res = pcall(function() classTestSerializationHook1 = nil debug.getregistry()[cla/;"	f
res1	torch7\\test\\test.lua	/^   local res1 = torch.functionname(m1[{ 4,{} }])$/;"	f
res1	torch7\\test\\test.lua	/^   local res1 = torch.functionname(m1[{ {}, 4 }])$/;"	f
res2[i]	torch7\\test\\test.lua	/^      res2[i] = math.functionname(m1[4][i])$/;"	f
res2[i]	torch7\\test\\test.lua	/^      res2[i] = math.functionname(m1[i][4])$/;"	f
reset	dmlc-core\\include\\dmlc\\memory.h	/^  inline void reset() {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:void
reset	nnvm\\include\\dmlc\\memory.h	/^  inline void reset() {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:void
resetbit	lua\\lgc.h	/^#define resetbit(/;"	d
resetbits	lua\\lgc.h	/^#define resetbits(/;"	d
resethookcount	lua\\ldebug.h	/^#define resethookcount(/;"	d
residual_factory	example\\cifar_resnet.py	/^def residual_factory(x, in_filters, out_filters):$/;"	f
resizebox	lua\\lauxlib.c	/^static void *resizebox (lua_State *L, int idx, size_t newsize) {$/;"	f	typeref:typename:void *	file:
resnet	example\\cifar_resnet.py	/^def resnet(x, n, in_filters, out_filters):$/;"	f
restartcollection	lua\\lgc.c	/^static void restartcollection (global_State *g) {$/;"	f	typeref:typename:void	file:
restassign	lua\\lparser.c	/^static void restassign (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	typeref:typename:void	file:
restorestack	lua\\ldo.h	/^#define restorestack(/;"	d
resume	lua\\ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
resume_error	lua\\ldo.c	/^static int resume_error (lua_State *L, const char *msg, int narg) {$/;"	f	typeref:typename:int	file:
ret	torch7\\lib\\TH\\THDiskFile.c	/^      int ret = fscanf(dfself->handle, "%ld", &data[i]); if(ret <= 0) break; else nread++;$/;"	v	typeref:typename:int
ret2	lua\\testes\\calls.lua	/^function ret2 (a,b) return a,b end$/;"	f
ret_handles	nnvm\\src\\c_api\\c_api_common.h	/^  std::vector<void *> ret_handles;$/;"	m	struct:NNAPIThreadLocalEntry	typeref:typename:std::vector<void * >
ret_str	nnvm\\src\\c_api\\c_api_common.h	/^  std::string ret_str;$/;"	m	struct:NNAPIThreadLocalEntry	typeref:typename:std::string
ret_vec_charp	nnvm\\src\\c_api\\c_api_common.h	/^  std::vector<const char *> ret_vec_charp;$/;"	m	struct:NNAPIThreadLocalEntry	typeref:typename:std::vector<const char * >
ret_vec_str	nnvm\\src\\c_api\\c_api_common.h	/^  std::vector<std::string> ret_vec_str;$/;"	m	struct:NNAPIThreadLocalEntry	typeref:typename:std::vector<std::string>
retain()	torch7\\doc\\storage.md	/^### retain() ###$/;"	S
retain()	torch7\\doc\\tensor.md	/^### retain() ###$/;"	S
rethook	lua\\ldo.c	/^static StkId rethook (lua_State *L, CallInfo *ci, StkId firstres, int nres) {$/;"	f	typeref:typename:StkId	file:
retstat	lua\\lparser.c	/^static void retstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
return_type	dmlc-core\\include\\dmlc\\registry.h	/^  std::string return_type;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::string
return_type	nnvm\\include\\dmlc\\registry.h	/^  std::string return_type;$/;"	m	class:dmlc::FunctionRegEntryBase	typeref:typename:std::string
rev	lua\\testes\\pm.lua	/^function rev (s)$/;"	f
reverse	lua\\lapi.c	/^static void reverse (lua_State *L, StkId from, StkId to) {$/;"	f	typeref:typename:void	file:
rhs_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ASTPtr lhs_, rhs_;$/;"	m	class:nnvm::fusion::ArraySubscriptAST	typeref:typename:ASTPtr
rhs_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ASTPtr lhs_, rhs_;$/;"	m	class:nnvm::fusion::BinaryAST	typeref:typename:ASTPtr
right	lua\\lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon029e158d0108	typeref:typename:lu_byte	file:
righttt	lua\\lobject.h	/^#define righttt(/;"	d
rkname	lua\\ldebug.c	/^static void rkname (const Proto *p, int pc, Instruction i, const char **name) {$/;"	f	typeref:typename:void	file:
rmClient	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private AMRMClientAsync<ContainerRequest> rmClient = null;$/;"	f	class:ApplicationMaster	file:
rname	lua\\ldebug.c	/^static void rname (const Proto *p, int pc, int c, const char **name) {$/;"	f	typeref:typename:void	file:
ro	lua\\lparser.h	/^  lu_byte ro;  \/* true if variable is 'const' *\/$/;"	m	struct:Vardesc	typeref:typename:lu_byte
rotl	lua\\lmathlib.c	/^static Rand64 rotl (Rand64 i, int n) {$/;"	f	typeref:typename:Rand64	file:
rotl	lua\\lmathlib.c	/^static Rand64 rotl (Rand64 x, int n) {$/;"	f	typeref:typename:Rand64	file:
rotl1	lua\\lmathlib.c	/^static Rand64 rotl1 (Rand64 i, int n) {$/;"	f	typeref:typename:Rand64	file:
round	lua\\testes\\all.lua	/^  local function round (m)$/;"	f
row_	dmlc-core\\src\\data\\basic_row_iter.h	/^  RowBlock<IndexType> row_;$/;"	m	class:dmlc::data::BasicRowIter	typeref:typename:RowBlock<IndexType>
row_	dmlc-core\\src\\data\\disk_row_iter.h	/^  RowBlock<IndexType> row_;$/;"	m	class:dmlc::data::DiskRowIter	typeref:typename:RowBlock<IndexType>
run	dmlc-core\\include\\dmlc\\lua.h	/^  static inline void run(const std::tuple<Args...>& args, F f) {$/;"	f	struct:dmlc::for_each_dispatcher_	typeref:typename:void
run	dmlc-core\\tracker\\dmlc_tracker\\mpi.py	/^        def run(prog):$/;"	f	function:submit.mpi_submit	file:
run	dmlc-core\\tracker\\dmlc_tracker\\ssh.py	/^        def run(prog):$/;"	f	function:submit.ssh_submit	file:
run	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^        def run():$/;"	f	member:RabitTracker.start	file:
run	dmlc-core\\tracker\\dmlc_tracker\\yarn.py	/^    def run():$/;"	f	function:yarn_submit	file:
run	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private void run(String args[]) throws Exception {$/;"	m	class:ApplicationMaster	file:
run	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private void run(String[] args) throws Exception {$/;"	m	class:Client	file:
run	lua\\testes\\coroutine.lua	/^  local function run (f)$/;"	f
run	lua\\testes\\coroutine.lua	/^local function run (f, t)$/;"	f
run	python\\tinyflow\\_session.py	/^    def run(self, fetch, feed_dict=None):$/;"	m	class:Session
run(testNames)	torch7\\doc\\tester.md	/^### run(testNames) ###$/;"	S
runC	lua\\ltests.c	/^static int runC (lua_State *L, lua_State *L1, const char *pc) {$/;"	f	typeref:typename:int	file:
run_doxygen	dmlc-core\\doc\\conf.py	/^def run_doxygen(folder):$/;"	f
runafewfinalizers	lua\\lgc.c	/^static int runafewfinalizers (lua_State *L, int n) {$/;"	f	typeref:typename:int	file:
runargs	lua\\lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	typeref:typename:int	file:
runback	lua\\testes\\main.lua	/^  local function runback (luaprg)$/;"	f
runningTasks	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private final Map<ContainerId, TaskRecord> runningTasks = new java.util.HashMap<ContainerId,/;"	f	class:ApplicationMaster	file:
s	lua\\lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	typeref:typename:const char *	file:
s	lua\\lmathlib.c	/^  Rand64 s[4];$/;"	m	struct:__anon79b1c1a10108	typeref:typename:Rand64[4]	file:
s	lua\\testes\\errors.lua	/^local  s = "local function fooA ()\\n  local "$/;"	f
s	lua\\testes\\errors.lua	/^s = "\\nfunction foo ()\\n  local "$/;"	f
s	lua\\testes\\errors.lua	/^s = s.."function fooC () return b+c"$/;"	f
s	lua\\testes\\errors.lua	/^s = s.."local function fooB ()\\n  local "$/;"	f
s	lua\\testes\\math.lua	/^    s = string.gsub(s, "%d$", function (d)$/;"	f
s2d	lua\\ltests.c	/^static int s2d (lua_State *L) {$/;"	f	typeref:typename:int	file:
s2v	lua\\lobject.h	/^#define s2v(/;"	d
s3	dmlc-core\\src\\io\\s3_filesys.cc	/^namespace s3 {$/;"	n	namespace:dmlc::io	file:
s3_filesys.o	dmlc-core\\Makefile	/^s3_filesys.o: src\/io\/s3_filesys.cc$/;"	t
save	lua\\llex.c	/^static void save (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
save_and_next	lua\\llex.c	/^#define save_and_next(/;"	d	file:
savedpc	lua\\lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anonad48b566010a::__anonad48b5660208	typeref:typename:const Instruction *
savelineinfo	lua\\lcode.c	/^static void savelineinfo (FuncState *fs, Proto *f, int line) {$/;"	f	typeref:typename:void	file:
savepc	lua\\lvm.c	/^#define savepc(/;"	d	file:
savestack	lua\\ldo.h	/^#define savestack(/;"	d
savestate	lua\\lvm.c	/^#define savestate(/;"	d	file:
scalars	nnvm\\include\\nnvm\\node.h	/^  std::vector<double> scalars;$/;"	m	struct:nnvm::NodeAttrs	typeref:typename:std::vector<double>
scaleFIG	lua\\lmathlib.c	/^#define scaleFIG	/;"	d	file:
scaleFIG	lua\\lmathlib.c	/^#define scaleFIG /;"	d	file:
scanformat	lua\\lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	typeref:typename:const char *	file:
scope_counter_	dmlc-core\\include\\dmlc\\json.h	/^  std::vector<size_t> scope_counter_;$/;"	m	class:dmlc::JSONReader	typeref:typename:std::vector<size_t>
scope_counter_	dmlc-core\\include\\dmlc\\json.h	/^  std::vector<size_t> scope_counter_;$/;"	m	class:dmlc::JSONWriter	typeref:typename:std::vector<size_t>
scope_counter_	nnvm\\include\\dmlc\\json.h	/^  std::vector<size_t> scope_counter_;$/;"	m	class:dmlc::JSONReader	typeref:typename:std::vector<size_t>
scope_counter_	nnvm\\include\\dmlc\\json.h	/^  std::vector<size_t> scope_counter_;$/;"	m	class:dmlc::JSONWriter	typeref:typename:std::vector<size_t>
scope_multi_line_	dmlc-core\\include\\dmlc\\json.h	/^  std::vector<bool> scope_multi_line_;$/;"	m	class:dmlc::JSONWriter	typeref:typename:std::vector<bool>
scope_multi_line_	nnvm\\include\\dmlc\\json.h	/^  std::vector<bool> scope_multi_line_;$/;"	m	class:dmlc::JSONWriter	typeref:typename:std::vector<bool>
sdot_	torch7\\lib\\TH\\generic\\THBlas.c	/^inline ffloat sdot_(const int *n, const float *x, const int *incx, const float *y, const int *in/;"	f	typeref:typename:ffloat
searcher_C	lua\\loadlib.c	/^static int searcher_C (lua_State *L) {$/;"	f	typeref:typename:int	file:
searcher_Croot	lua\\loadlib.c	/^static int searcher_Croot (lua_State *L) {$/;"	f	typeref:typename:int	file:
searcher_Lua	lua\\loadlib.c	/^static int searcher_Lua (lua_State *L) {$/;"	f	typeref:typename:int	file:
searcher_preload	lua\\loadlib.c	/^static int searcher_preload (lua_State *L) {$/;"	f	typeref:typename:int	file:
searchpath	lua\\loadlib.c	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f	typeref:typename:const char *	file:
searchupvalue	lua\\lparser.c	/^static int searchupvalue (FuncState *fs, TString *name) {$/;"	f	typeref:typename:int	file:
searchvar	lua\\lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	typeref:typename:int	file:
seed	lua\\lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State	typeref:typename:unsigned int
seeded	torch7\\lib\\TH\\THRandom.h	/^  int seeded; \/* = 0; *\/$/;"	m	struct:THGenerator	typeref:typename:int
seek	torch7\\lib\\TH\\THFilePrivate.h	/^    void (*seek)(THFile *self, size_t position);$/;"	m	struct:THFileVTable	typeref:typename:void (*)(THFile * self,size_t position)
seek(position)	torch7\\doc\\file.md	/^### seek(position) ###$/;"	S
seekEnd	torch7\\lib\\TH\\THFilePrivate.h	/^    void (*seekEnd)(THFile *self);$/;"	m	struct:THFileVTable	typeref:typename:void (*)(THFile * self)
seekEnd()	torch7\\doc\\file.md	/^### seekEnd() ###$/;"	S
seek_stream_	dmlc-core\\include\\dmlc\\recordio.h	/^  SeekStream *seek_stream_;$/;"	m	class:dmlc::RecordIOReader	typeref:typename:SeekStream *
seek_stream_	dmlc-core\\include\\dmlc\\recordio.h	/^  SeekStream *seek_stream_;$/;"	m	class:dmlc::RecordIOWriter	typeref:typename:SeekStream *
self	dmlc-core\\include\\dmlc\\parameter.h	/^  inline TEntry &self() {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry &
self	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &self() {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
self	nnvm\\include\\dmlc\\parameter.h	/^  inline TEntry &self() {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry &
self	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &self() {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
seminfo	lua\\llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token	typeref:typename:SemInfo
sendint	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def sendint(self, n):$/;"	m	class:ExSocket
sendstr	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def sendstr(self, s):$/;"	m	class:ExSocket
separatetobefnz	lua\\lgc.c	/^static void separatetobefnz (global_State *g, int all) {$/;"	f	typeref:typename:void	file:
serializeAndDeserialize	torch7\\test\\test_writeObject.lua	/^local function serializeAndDeserialize(obj)$/;"	f
serializer	dmlc-core\\include\\dmlc\\serializer.h	/^namespace serializer {$/;"	n	namespace:dmlc
serverCores	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int serverCores = 1;$/;"	f	class:ApplicationMaster	file:
serverMemoryMB	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int serverMemoryMB = 10;$/;"	f	class:ApplicationMaster	file:
sess	example\\cifar_resnet.py	/^sess = tf.Session(config='gpu')$/;"	v
sess	example\\mnist_lenet.py	/^sess = tf.Session(config='gpu')$/;"	v
sess	example\\mnist_mlp_auto_shape_inference.py	/^sess = tf.Session(config='gpu')$/;"	v
sess	example\\mnist_softmax.py	/^sess = tf.Session()$/;"	v
sess	example\\mnist_softmax_minimum.py	/^sess = tf.Session()$/;"	v
set2	lua\\ltablib.c	/^static void set2 (lua_State *L, IdxT i, IdxT j) {$/;"	f	typeref:typename:void	file:
setEarlyAbort(earlyAbort)	torch7\\doc\\tester.md	/^### setEarlyAbort(earlyAbort) ###$/;"	S
setRethrowErrors(rethrowErrors)	torch7\\doc\\tester.md	/^### setRethrowErrors(rethrowErrors) ###$/;"	S
setSummaryOnly(summaryOnly)	torch7\\doc\\tester.md	/^### setSummaryOnly(summaryOnly) ###$/;"	S
set_attr	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::set_attr(  \/\/ NOLINT(*)$/;"	f	class:nnvm::Op	typeref:typename:Op &
set_attr	nnvm\\include\\nnvm\\op.h	/^inline OpGroup& OpGroup::set_attr(const std::string& attr_name,$/;"	f	class:nnvm::OpGroup	typeref:typename:OpGroup &
set_attr_parser	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::set_attr_parser(std::function<void (NodeAttrs* attrs)> fn) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::Op	typeref:typename:Op &
set_body	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &set_body(FunctionType body) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
set_body	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &set_body(FunctionType body) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
set_change_graph	nnvm\\include\\nnvm\\pass.h	/^  PassFunctionReg& set_change_graph(bool v) {  \/\/ NOLINT(*)$/;"	f	struct:nnvm::PassFunctionReg	typeref:typename:PassFunctionReg &
set_default	dmlc-core\\include\\dmlc\\parameter.h	/^  inline TEntry &set_default(const DType &default_value) {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry &
set_default	nnvm\\include\\dmlc\\parameter.h	/^  inline TEntry &set_default(const DType &default_value) {$/;"	f	class:dmlc::parameter::FieldEntryBase	typeref:typename:TEntry &
set_lower_bound	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual TEntry &set_lower_bound(DType begin) {$/;"	f	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:TEntry &
set_lower_bound	nnvm\\include\\dmlc\\parameter.h	/^  virtual TEntry &set_lower_bound(DType begin) {$/;"	f	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:TEntry &
set_max_capacity	dmlc-core\\include\\dmlc\\threadediter.h	/^  inline void set_max_capacity(size_t max_capacity) {$/;"	f	class:dmlc::ThreadedIter	typeref:typename:void
set_name	dmlc-core\\include\\dmlc\\parameter.h	/^  inline void set_name(const std::string &name) {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
set_name	nnvm\\include\\dmlc\\parameter.h	/^  inline void set_name(const std::string &name) {$/;"	f	class:dmlc::parameter::ParamManager	typeref:typename:void
set_num_inputs	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::set_num_inputs(std::function<uint32_t (const NodeAttrs& attr)> fn) {  \/\/ NOLINT/;"	f	class:nnvm::Op	typeref:typename:Op &
set_num_inputs	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::set_num_inputs(uint32_t n) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::Op	typeref:typename:Op &
set_num_outputs	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::set_num_outputs(std::function<uint32_t (const NodeAttrs& attr)> fn) {  \/\/ NOLIN/;"	f	class:nnvm::Op	typeref:typename:Op &
set_num_outputs	nnvm\\include\\nnvm\\op.h	/^inline Op& Op::set_num_outputs(uint32_t n) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::Op	typeref:typename:Op &
set_range	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual TEntry &set_range(DType begin, DType end) {$/;"	f	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:TEntry &
set_range	nnvm\\include\\dmlc\\parameter.h	/^  virtual TEntry &set_range(DType begin, DType end) {$/;"	f	class:dmlc::parameter::FieldEntryNumeric	typeref:typename:TEntry &
set_return_type	dmlc-core\\include\\dmlc\\registry.h	/^  inline EntryType &set_return_type(const std::string &type) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
set_return_type	nnvm\\include\\dmlc\\registry.h	/^  inline EntryType &set_return_type(const std::string &type) {$/;"	f	class:dmlc::FunctionRegEntryBase	typeref:typename:EntryType &
set_stream	dmlc-core\\include\\dmlc\\io.h	/^  inline void set_stream(Stream *stream) {$/;"	f	class:dmlc::istream	typeref:typename:void
set_stream	dmlc-core\\include\\dmlc\\io.h	/^  inline void set_stream(Stream *stream) {$/;"	f	class:dmlc::ostream	typeref:typename:void
set_stream	dmlc-core\\include\\dmlc\\io.h	/^inline void istream::InBuf::set_stream(Stream *stream) {$/;"	f	class:dmlc::istream::InBuf	typeref:typename:void
set_stream	dmlc-core\\include\\dmlc\\io.h	/^inline void ostream::OutBuf::set_stream(Stream *stream) {$/;"	f	class:dmlc::ostream::OutBuf	typeref:typename:void
setage	lua\\lgc.h	/^#define setage(/;"	d
setallfields	lua\\loslib.c	/^static void setallfields (lua_State *L, struct tm *stm) {$/;"	f	typeref:typename:void	file:
setarg	lua\\lopcodes.h	/^#define setarg(/;"	d
setbits	lua\\lgc.h	/^#define setbits(/;"	d
setboolfield	lua\\loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	typeref:typename:void	file:
setbvalue	lua\\lobject.h	/^#define setbvalue(/;"	d
setclCvalue	lua\\lobject.h	/^#define setclCvalue(/;"	d
setclLvalue	lua\\lobject.h	/^#define setclLvalue(/;"	d
setclLvalue2s	lua\\lobject.h	/^#define setclLvalue2s(/;"	d
setdeadkey	lua\\lobject.h	/^#define setdeadkey(/;"	d
setempty	lua\\lobject.h	/^#define setempty(/;"	d
setfield	lua\\loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	typeref:typename:void	file:
setfltvalue	lua\\lobject.h	/^#define setfltvalue(/;"	d
setfvalue	lua\\lobject.h	/^#define setfvalue(/;"	d
setgcovalue	lua\\lobject.h	/^#define setgcovalue(/;"	d
setgcparam	lua\\lgc.h	/^#define setgcparam(/;"	d
setglobal	lua\\testes\\pm.lua	/^  local function setglobal (n,v) rawset(_G, n, v) end$/;"	f
sethook	lua\\ltests.c	/^static int sethook (lua_State *L) {$/;"	f	typeref:typename:int	file:
sethookaux	lua\\ltests.c	/^static void sethookaux (lua_State *L, int mask, int count, const char *scpt) {$/;"	f	typeref:typename:void	file:
sethvalue	lua\\lobject.h	/^#define sethvalue(/;"	d
sethvalue2s	lua\\lobject.h	/^#define sethvalue2s(/;"	d
setivalue	lua\\lobject.h	/^#define setivalue(/;"	d
setlimittosize	lua\\ltable.c	/^static unsigned int setlimittosize (Table *t) {$/;"	f	typeref:typename:unsigned int	file:
setminordebt	lua\\lgc.c	/^static void setminordebt (global_State *g) {$/;"	f	typeref:typename:void	file:
setnameval	lua\\ltests.c	/^static void setnameval (lua_State *L, const char *name, int val) {$/;"	f	typeref:typename:void	file:
setnilkey	lua\\lobject.h	/^#define setnilkey(/;"	d
setnilvalue	lua\\lobject.h	/^#define setnilvalue(/;"	d
setnodekey	lua\\lobject.h	/^#define setnodekey(/;"	d
setnodevector	lua\\ltable.c	/^static void setnodevector (lua_State *L, Table *t, unsigned int size) {$/;"	f	typeref:typename:void	file:
setnorealasize	lua\\lobject.h	/^#define setnorealasize(/;"	d
setoah	lua\\lstate.h	/^#define setoah(/;"	d
setobj	lua\\lobject.h	/^#define setobj(/;"	d
setobj2n	lua\\lobject.h	/^#define setobj2n	/;"	d
setobj2s	lua\\lobject.h	/^#define setobj2s(/;"	d
setobj2t	lua\\lobject.h	/^#define setobj2t	/;"	d
setobjs2s	lua\\lobject.h	/^#define setobjs2s(/;"	d
setobjt2t	lua\\lobject.h	/^#define setobjt2t	/;"	d
setpath	lua\\loadlib.c	/^static void setpath (lua_State *L, const char *fieldname,$/;"	f	typeref:typename:void	file:
setpause	lua\\lgc.c	/^static void setpause (global_State *g) {$/;"	f	typeref:typename:void	file:
setprogdir	lua\\loadlib.c	/^#define setprogdir(/;"	d	file:
setprogdir	lua\\loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	typeref:typename:void	file:
setpvalue	lua\\lobject.h	/^#define setpvalue(/;"	d
setrandfunc	lua\\lmathlib.c	/^static void setrandfunc (lua_State *L) {$/;"	f	typeref:typename:void	file:
setrealasize	lua\\lobject.h	/^#define setrealasize(/;"	d
setseed	lua\\lmathlib.c	/^static void setseed (Rand64 *state, lua_Unsigned n1, lua_Unsigned n2) {$/;"	f	typeref:typename:void	file:
setsvalue	lua\\lobject.h	/^#define setsvalue(/;"	d
setsvalue2n	lua\\lobject.h	/^#define setsvalue2n	/;"	d
setsvalue2s	lua\\lobject.h	/^#define setsvalue2s(/;"	d
settabsb	lua\\ldblib.c	/^static void settabsb (lua_State *L, const char *k, int v) {$/;"	f	typeref:typename:void	file:
settabsi	lua\\ldblib.c	/^static void settabsi (lua_State *L, const char *k, int v) {$/;"	f	typeref:typename:void	file:
settabss	lua\\ldblib.c	/^static void settabss (lua_State *L, const char *k, const char *v) {$/;"	f	typeref:typename:void	file:
setthvalue	lua\\lobject.h	/^#define setthvalue(/;"	d
setthvalue2s	lua\\lobject.h	/^#define setthvalue2s(/;"	d
settraps	lua\\ldebug.c	/^static void settraps (CallInfo *ci) {$/;"	f	typeref:typename:void	file:
settrick	lua\\ltests.c	/^static int settrick (lua_State *L) {$/;"	f	typeref:typename:int	file:
settt_	lua\\lobject.h	/^#define settt_(/;"	d
setup	dmlc-core\\doc\\conf.py	/^def setup(app):$/;"	f
setupCacheFiles	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private Map<String, LocalResource> setupCacheFiles(ApplicationId appId) throws IOException {$/;"	m	class:Client	file:
setupTokens	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private ByteBuffer setupTokens() {$/;"	m	class:ApplicationMaster	file:
setupTokens	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private ByteBuffer setupTokens() throws IOException {$/;"	m	class:Client	file:
setuvalue	lua\\lobject.h	/^#define setuvalue(/;"	d
setvararg	lua\\lparser.c	/^static void setvararg (FuncState *fs, int nparams) {$/;"	f	typeref:typename:void	file:
sge_submit	dmlc-core\\tracker\\dmlc_tracker\\sge.py	/^    def sge_submit(nworker, nserver, pass_envs):$/;"	f	function:submit	file:
shape	include\\tinyflow\\base.h	/^  TShape shape;$/;"	m	struct:tinyflow::TBlob	typeref:typename:TShape
shape	src\\op_tensor.cc	/^  TShape shape;$/;"	m	struct:tinyflow::ZeroParam	typeref:typename:TShape	file:
shape_data	src\\c_api.cc	/^  std::vector<const nn_uint*> shape_data;$/;"	m	struct:TinyAPIThreadLocalEntry	typeref:typename:std::vector<const nn_uint * >	file:
shape_ndim	src\\c_api.cc	/^  std::vector<nn_uint> shape_ndim;$/;"	m	struct:TinyAPIThreadLocalEntry	typeref:typename:std::vector<nn_uint>	file:
shift64_FIG	lua\\lmathlib.c	/^#define shift64_FIG /;"	d	file:
shiftHI	lua\\lmathlib.c	/^#define shiftHI	/;"	d	file:
shiftLOW	lua\\lmathlib.c	/^#define shiftLOW	/;"	d	file:
shmFilePath	torch7\\test\\test_sharedmem.lua	/^local function shmFilePath(shmName)$/;"	f
short_src	lua\\lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:char[]
showmem	lua\\testes\\all.lua	/^  showmem = function ()$/;"	f
shrlen	lua\\lobject.h	/^  lu_byte shrlen;  \/* length for short strings *\/$/;"	m	struct:TString	typeref:typename:lu_byte
sig	lua\\testes\\verybig.lua	/^local function sig (x)$/;"	f
silent()	torch7\\doc\\cmdline.md	/^### silent() ###$/;"	S
simpleexp	lua\\lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
singlehtml	dmlc-core\\doc\\Makefile	/^singlehtml:$/;"	t
singlematch	lua\\lstrlib.c	/^static int singlematch (MatchState *ms, const char *s, const char *p,$/;"	f	typeref:typename:int	file:
singlestep	lua\\lgc.c	/^static lu_mem singlestep (lua_State *L) {$/;"	f	typeref:typename:lu_mem	file:
singlevar	lua\\lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	typeref:typename:void	file:
singlevaraux	lua\\lparser.c	/^static void singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	typeref:typename:void	file:
size	dmlc-core\\include\\dmlc\\array_view.h	/^  inline size_t size() const {$/;"	f	class:dmlc::array_view	typeref:typename:size_t
size	dmlc-core\\include\\dmlc\\data.h	/^  size_t size;$/;"	m	struct:dmlc::RowBlock	typeref:typename:size_t
size	dmlc-core\\include\\dmlc\\io.h	/^    size_t size;$/;"	m	struct:dmlc::InputSplit::Blob	typeref:typename:size_t
size	dmlc-core\\src\\io\\filesys.h	/^  size_t size;$/;"	m	struct:dmlc::io::FileInfo	typeref:typename:size_t
size	lua\\lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	typeref:typename:size_t	file:
size	lua\\lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer	typeref:typename:size_t
size	lua\\lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anon029e15920508	typeref:typename:int
size	lua\\lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist	typeref:typename:int
size	lua\\lstate.h	/^  int size;$/;"	m	struct:stringtable	typeref:typename:int
size	lua\\ltests.c	/^    size_t size;$/;"	m	struct:Header::__anond88b85530108	typeref:typename:size_t	file:
size	nnvm\\include\\dmlc\\array_view.h	/^  inline size_t size() const {$/;"	f	class:dmlc::array_view	typeref:typename:size_t
size	torch7\\lib\\TH\\THAllocator.c	/^  ptrdiff_t size; \/* mapped size *\/$/;"	m	struct:THMapAllocatorContext_	typeref:typename:ptrdiff_t	file:
size	torch7\\lib\\TH\\THMemoryFile.c	/^    size_t size;$/;"	m	struct:THMemoryFile__	typeref:typename:size_t	file:
size	torch7\\lib\\TH\\generic\\THStorage.h	/^    ptrdiff_t size;$/;"	m	struct:THStorage	typeref:typename:ptrdiff_t
size	torch7\\lib\\TH\\generic\\THTensor.h	/^    long *size;$/;"	m	struct:THTensor	typeref:typename:long *
sizeCclosure	lua\\lfunc.h	/^#define sizeCclosure(/;"	d
sizeLclosure	lua\\lfunc.h	/^#define sizeLclosure(/;"	d
size_	dmlc-core\\include\\dmlc\\array_view.h	/^  size_t size_{0};$/;"	m	class:dmlc::array_view	typeref:typename:size_t
size_	nnvm\\include\\dmlc\\array_view.h	/^  size_t size_{0};$/;"	m	class:dmlc::array_view	typeref:typename:size_t
sizeabslineinfo	lua\\lobject.h	/^  int sizeabslineinfo;  \/* size of 'abslineinfo' *\/$/;"	m	struct:Proto	typeref:typename:int
sizecode	lua\\lobject.h	/^  int sizecode;$/;"	m	struct:Proto	typeref:typename:int
sizek	lua\\lobject.h	/^  int sizek;  \/* size of 'k' *\/$/;"	m	struct:Proto	typeref:typename:int
sizelineinfo	lua\\lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto	typeref:typename:int
sizelocvars	lua\\lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto	typeref:typename:int
sizelstring	lua\\lstring.h	/^#define sizelstring(/;"	d
sizenode	lua\\lobject.h	/^#define sizenode(/;"	d
sizep	lua\\lobject.h	/^  int sizep;  \/* size of 'p' *\/$/;"	m	struct:Proto	typeref:typename:int
sizeudata	lua\\lobject.h	/^#define sizeudata(/;"	d
sizeupvalues	lua\\lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:Proto	typeref:typename:int
skip	lua\\ltests.c	/^static void skip (const char **pc) {$/;"	f	typeref:typename:void	file:
skipBOM	lua\\lauxlib.c	/^static int skipBOM (LoadF *lf) {$/;"	f	typeref:typename:int	file:
skip_sep	lua\\llex.c	/^static size_t skip_sep (LexState *ls) {$/;"	f	typeref:typename:size_t	file:
skipcomment	lua\\lauxlib.c	/^static int skipcomment (LoadF *lf, int *cp) {$/;"	f	typeref:typename:int	file:
slave_envs	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def slave_envs(self):$/;"	m	class:PSTracker
slave_envs	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def slave_envs(self):$/;"	m	class:RabitTracker
sleep	dmlc-core\\test\\unittest\\unittest_threaditer.cc	/^  int sleep;$/;"	m	struct:producer_test::IntProducer	typeref:typename:int	file:
slist_	dmlc-core\\src\\io\\s3_filesys.cc	/^  curl_slist *slist_;$/;"	m	class:dmlc::io::s3::CURLReadStreamBase	typeref:typename:curl_slist *	file:
smt.__band	lua\\testes\\bwcoercion.lua	/^smt.__band = function (x, y)$/;"	f
smt.__bnot	lua\\testes\\bwcoercion.lua	/^smt.__bnot = function (x)$/;"	f
smt.__bor	lua\\testes\\bwcoercion.lua	/^smt.__bor = function (x, y)$/;"	f
smt.__bxor	lua\\testes\\bwcoercion.lua	/^smt.__bxor = function (x, y)$/;"	f
smt.__shl	lua\\testes\\bwcoercion.lua	/^smt.__shl = function (x, y)$/;"	f
smt.__shr	lua\\testes\\bwcoercion.lua	/^smt.__shr = function (x, y)$/;"	f
snprintf	bin\\torch7\\lib\\TH\\THGeneral.h	/^#define snprintf /;"	d
snprintf	dmlc-core\\include\\dmlc\\base.h	/^#define snprintf /;"	d
snprintf	nnvm\\include\\dmlc\\base.h	/^#define snprintf /;"	d
snprintf	torch7\\general.h	/^#define snprintf /;"	d
snprintf	torch7\\lib\\TH\\THGeneral.h.in	/^#define snprintf /;"	d	file:
sof	lua\\ltablib.c	/^#define sof(/;"	d	file:
solvegoto	lua\\lparser.c	/^static void solvegoto (LexState *ls, int g, Labeldesc *label) {$/;"	f	typeref:typename:void	file:
solvegotos	lua\\lparser.c	/^static int solvegotos (LexState *ls, Labeldesc *lb) {$/;"	f	typeref:typename:int	file:
sort	lua\\ltablib.c	/^static int sort (lua_State *L) {$/;"	f	typeref:typename:int	file:
sort_comp	lua\\ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	typeref:typename:int	file:
source	lua\\llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState	typeref:typename:TString *
source	lua\\lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:Proto	typeref:typename:TString *
source	lua\\lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
source	nnvm\\include\\nnvm\\graph.h	/^    const nnvm::Node* source;$/;"	m	struct:nnvm::IndexedGraph::Node	typeref:typename:const nnvm::Node *
source_	dmlc-core\\src\\data\\text_parser.h	/^  InputSplit *source_;$/;"	m	class:dmlc::data::TextParserBase	typeref:typename:InputSplit *
source_parsers	dmlc-core\\doc\\conf.py	/^source_parsers = {$/;"	v
source_suffix	dmlc-core\\doc\\conf.py	/^source_suffix = ['.rst', '.md']$/;"	v
space	lua\\lobject.c	/^  char space[BUFVFS];  \/* holds last part of the result *\/$/;"	m	struct:BuffFS	typeref:typename:char[]	file:
spec:test	torch7\\test\\test_writeObject.lua	/^   function spec:test()$/;"	f
specifyFully	torch7\\Tensor.lua	/^local function specifyFully(size, nElements)$/;"	f
split	dmlc-core\\src\\io\\azure_filesys.cc	/^std::vector<std::string> split(std::string str, char delimiter) {$/;"	f	namespace:dmlc::io::__anon00294e480110	typeref:typename:std::vector<std::string>
src	lua\\lstrlib.c	/^  const char *src;  \/* current position *\/$/;"	m	struct:GMatchState	typeref:typename:const char *	file:
src_end	lua\\lstrlib.c	/^  const char *src_end;  \/* end ('\\0') of source string *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
src_init	lua\\lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
srclen	lua\\lua.h	/^  size_t srclen;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:size_t
ssh_submit	dmlc-core\\tracker\\dmlc_tracker\\ssh.py	/^    def ssh_submit(nworker, nserver, pass_envs):$/;"	f	function:submit	file:
ssize_t	bin\\torch7\\lib\\TH\\THGeneral.h	/^typedef SSIZE_T ssize_t;$/;"	t	typeref:typename:SSIZE_T
ssize_t	torch7\\lib\\TH\\THGeneral.h.in	/^typedef SSIZE_T ssize_t;$/;"	t	typeref:typename:SSIZE_T	file:
st	lua\\testes\\api.lua	/^  local msg, st = f(string.len)     -- function handler$/;"	f
st	lua\\testes\\api.lua	/^  local msg, st = f(string.upper)   -- function handler$/;"	f
stack	dmlc-core\\include\\dmlc\\any.h	/^    std::aligned_storage<kStack, kAlign>::type stack;$/;"	m	union:dmlc::any::Data	typeref:typename:std::aligned_storage<kStack,kAlign>::type
stack	lua\\lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State	typeref:typename:StkId
stack	nnvm\\include\\dmlc\\any.h	/^    std::aligned_storage<kStack, kAlign>::type stack;$/;"	m	union:dmlc::any::Data	typeref:typename:std::aligned_storage<kStack,kAlign>::type
stack_init	lua\\lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	typeref:typename:void	file:
stack_last	lua\\lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State	typeref:typename:StkId
stackinuse	lua\\ldo.c	/^static int stackinuse (lua_State *L) {$/;"	f	typeref:typename:int	file:
stacklevel	lua\\ltests.c	/^static int stacklevel (lua_State *L) {$/;"	f	typeref:typename:int	file:
stacksize	lua\\lstate.h	/^  int stacksize;$/;"	m	struct:lua_State	typeref:typename:int
standardDouble_adds	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardDouble_adds(double *y, const double *x, const double c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardDouble_cadd	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardDouble_cadd(double *z, const double *x,  const double *y, const double c, co/;"	f	typeref:typename:void	file:
standardDouble_cdiv	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardDouble_cdiv(double *z, const double *x,  const double *y, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardDouble_cmul	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardDouble_cmul(double *z, const double *x,  const double *y, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardDouble_divs	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardDouble_divs(double *y, const double *x, const double c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardDouble_fill	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardDouble_fill(double *x, const double c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardDouble_muls	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardDouble_muls(double *y, const double *x, const double c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardFloat_adds	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardFloat_adds(float *y, const float *x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardFloat_cadd	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardFloat_cadd(float *z, const float *x, const float *y, const float c, const pt/;"	f	typeref:typename:void	file:
standardFloat_cdiv	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardFloat_cdiv(float *z, const float *x, const float *y, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardFloat_cmul	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardFloat_cmul(float *z, const float *x, const float *y, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardFloat_divs	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardFloat_divs(float *y, const float *x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardFloat_fill	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardFloat_fill(float *x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
standardFloat_muls	torch7\\lib\\TH\\vector\\VSX.c	/^static void standardFloat_muls(float *y, const float *x, const float c, const ptrdiff_t n)$/;"	f	typeref:typename:void	file:
start	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^    def start(self, nslave):$/;"	m	class:RabitTracker
startAbort	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private boolean startAbort = false;$/;"	f	class:ApplicationMaster	file:
start_capture	lua\\lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
start_rabit_tracker	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^def start_rabit_tracker(args):$/;"	f
startpc	lua\\lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar	typeref:typename:int
startrealtime	torch7\\Timer.c	/^    TimeType startrealtime;$/;"	m	struct:_Timer	typeref:typename:TimeType	file:
startsystime	torch7\\Timer.c	/^    TimeType startsystime;$/;"	m	struct:_Timer	typeref:typename:TimeType	file:
startusertime	torch7\\Timer.c	/^    TimeType startusertime;$/;"	m	struct:_Timer	typeref:typename:TimeType	file:
stat	dmlc-core\\src\\io\\local_filesys.cc	/^#define stat /;"	d	file:
state	torch7\\lib\\TH\\THRandom.h	/^  unsigned long state[_MERSENNE_STATE_N]; \/* the array for the state vector  *\/$/;"	m	struct:THGenerator	typeref:typename:unsigned long[]
state_	dmlc-core\\include\\dmlc\\lua.h	/^  LuaState* state_{nullptr};$/;"	m	class:dmlc::LuaRef	typeref:typename:LuaState *
state_	dmlc-core\\src\\config.cc	/^  ParseState state_;$/;"	m	class:dmlc::Tokenizer	typeref:typename:ParseState	file:
statement	lua\\lparser.c	/^static void statement (LexState *ls) {$/;"	f	typeref:typename:void	file:
states_	src\\session.cc	/^  VarStateMap states_;$/;"	m	class:tinyflow::TorchSession	typeref:typename:VarStateMap	file:
statlist	lua\\lparser.c	/^static void statlist (LexState *ls) {$/;"	f	typeref:typename:void	file:
statname	lua\\lcorolib.c	/^static const char *statname[] = {"running", "dead", "suspended", "normal"};$/;"	v	typeref:typename:const char * []	file:
status	lua\\ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	typeref:typename:volatile int	file:
status	lua\\ldump.c	/^  int status;$/;"	m	struct:__anon7d8240f60108	typeref:typename:int	file:
status	lua\\lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State	typeref:typename:lu_byte
stdev	example\\cifar_resnet.py	/^stdev = 0.01$/;"	v
stdev	example\\mnist_lenet.py	/^stdev = 0.01$/;"	v
stepgenfull	lua\\lgc.c	/^static void stepgenfull (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
storage	torch7\\lib\\TH\\THMemoryFile.c	/^    THCharStorage *storage;$/;"	m	struct:THMemoryFile__	typeref:typename:THCharStorage *	file:
storage	torch7\\lib\\TH\\generic\\THTensor.h	/^    THStorage *storage;$/;"	m	struct:THTensor	typeref:typename:THStorage *
storageOffset	torch7\\lib\\TH\\generic\\THTensor.h	/^    ptrdiff_t storageOffset;$/;"	m	struct:THTensor	typeref:typename:ptrdiff_t
storage_pool_	src\\session.cc	/^  std::vector<LuaRef> storage_pool_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:std::vector<LuaRef>	file:
str	bin\\torch7\\lib\\TH\\THGeneral.h	/^    char str[TH_DESC_BUFF_LEN];$/;"	m	struct:__anonc9df4ec80108	typeref:typename:char[]
str	dmlc-core\\src\\io\\filesys.h	/^  inline std::string str(void) const {$/;"	f	struct:dmlc::io::URI	typeref:typename:std::string
str	dmlc-core\\src\\io\\s3_filesys.cc	/^  inline std::string str(void) const {$/;"	f	struct:dmlc::io::s3::XMLIter	typeref:typename:std::string	file:
str	torch7\\lib\\TH\\THGeneral.h.in	/^    char str[TH_DESC_BUFF_LEN];$/;"	m	struct:__anon6f7595180108	typeref:typename:char[]	file:
str_arg_types	bin\\torch7\\TensorMath.c	/^static void str_arg_types(lua_State *L, char *buf, int n) {$/;"	f	typeref:typename:void	file:
str_arg_types	bin\\torch7\\random.c	/^static void str_arg_types(lua_State *L, char *buf, int n) {$/;"	f	typeref:typename:void	file:
str_byte	lua\\lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_char	lua\\lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_checkname	lua\\lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	typeref:typename:TString *	file:
str_dump	lua\\lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_find	lua\\lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_find_aux	lua\\lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	typeref:typename:int	file:
str_format	lua\\lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_gsub	lua\\lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_len	lua\\lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_lower	lua\\lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_match	lua\\lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_pack	lua\\lstrlib.c	/^static int str_pack (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_packsize	lua\\lstrlib.c	/^static int str_packsize (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_rep	lua\\lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_reverse	lua\\lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_sub	lua\\lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_type	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\rtc.h	/^  static const char str_type[];$/;"	m	class:nnvm::fusion::RTC	typeref:typename:const char[]
str_type	nnvm\\plugin\\nnvm-fusion\\src\\rtc.cc	/^const char RTC::str_type[] = "float";$/;"	m	class:nnvm::fusion::RTC	typeref:typename:const char[]
str_unpack	lua\\lstrlib.c	/^static int str_unpack (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_upper	lua\\lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	typeref:typename:int	file:
strcache	lua\\lstate.h	/^  TString *strcache[STRCACHE_N][STRCACHE_M];  \/* cache for strings in API *\/$/;"	m	struct:global_State	typeref:typename:TString * [][]
stream	dmlc-core\\include\\dmlc\\logging.h	/^  std::ostream& stream() { return log_stream_; }$/;"	f	class:dmlc::CustomLogMessage	typeref:typename:std::ostream &
stream	dmlc-core\\include\\dmlc\\logging.h	/^  std::ostream& stream() { return log_stream_; }$/;"	f	class:dmlc::LogMessage	typeref:typename:std::ostream &
stream	dmlc-core\\include\\dmlc\\logging.h	/^  std::ostringstream &stream() { return log_stream_; }$/;"	f	class:dmlc::LogMessageFatal	typeref:typename:std::ostringstream &
stream	nnvm\\include\\dmlc\\logging.h	/^  std::ostream& stream() { return log_stream_; }$/;"	f	class:dmlc::CustomLogMessage	typeref:typename:std::ostream &
stream	nnvm\\include\\dmlc\\logging.h	/^  std::ostream& stream() { return log_stream_; }$/;"	f	class:dmlc::LogMessage	typeref:typename:std::ostream &
stream	nnvm\\include\\dmlc\\logging.h	/^  std::ostringstream &stream() { return log_stream_; }$/;"	f	class:dmlc::LogMessageFatal	typeref:typename:std::ostringstream &
stream_	dmlc-core\\include\\dmlc\\io.h	/^    Stream *stream_;$/;"	m	class:dmlc::istream::InBuf	typeref:typename:Stream *
stream_	dmlc-core\\include\\dmlc\\io.h	/^    Stream *stream_;$/;"	m	class:dmlc::ostream::OutBuf	typeref:typename:Stream *
stream_	dmlc-core\\include\\dmlc\\recordio.h	/^  Stream *stream_;$/;"	m	class:dmlc::RecordIOReader	typeref:typename:Stream *
stream_	dmlc-core\\include\\dmlc\\recordio.h	/^  Stream *stream_;$/;"	m	class:dmlc::RecordIOWriter	typeref:typename:Stream *
stride	torch7\\lib\\TH\\generic\\THTensor.h	/^    long *stride;$/;"	m	struct:THTensor	typeref:typename:long *
strides	src\\op_nn.cc	/^  TShape strides;$/;"	m	struct:tinyflow::ConvPoolParam	typeref:typename:TShape	file:
string_query	lua\\ltests.c	/^static int string_query (lua_State *L) {$/;"	f	typeref:typename:int	file:
string_types	nnvm\\python\\nnvm\\_base.py	/^    string_types = str,$/;"	v
stringmetamethods	lua\\lstrlib.c	/^static const luaL_Reg stringmetamethods[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
stringtable	lua\\lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	lua\\lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	lua\\ldump.c	/^  int strip;$/;"	m	struct:__anon7d8240f60108	typeref:typename:int	file:
strip	torch7\\CmdLine.lua	/^local function strip(str)$/;"	f
strlib	lua\\lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
strset	lua\\testes\\pm.lua	/^function strset (p)$/;"	f
strt	lua\\lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State	typeref:typename:stringtable
strtof	dmlc-core\\src\\data\\strtonum.h	/^inline float strtof(const char *nptr, char **endptr) {$/;"	f	namespace:dmlc::data	typeref:typename:float
strtoint	dmlc-core\\src\\data\\strtonum.h	/^inline V strtoint(const char* nptr, char **endptr, int base) {$/;"	f	namespace:dmlc::data	typeref:typename:V
strtouint	dmlc-core\\src\\data\\strtonum.h	/^inline V strtouint(const char* nptr, char **endptr, int base) {$/;"	f	namespace:dmlc::data	typeref:typename:V
strtoull	dmlc-core\\src\\data\\strtonum.h	/^strtoull(const char* nptr, char **endptr, int base) {$/;"	f	namespace:dmlc::data	typeref:typename:uint64_t
subexpr	lua\\lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {$/;"	f	typeref:typename:BinOpr	file:
submit	dmlc-core\\tracker\\dmlc_tracker\\local.py	/^def submit(args):$/;"	f
submit	dmlc-core\\tracker\\dmlc_tracker\\mpi.py	/^def submit(args):$/;"	f
submit	dmlc-core\\tracker\\dmlc_tracker\\sge.py	/^def submit(args):$/;"	f
submit	dmlc-core\\tracker\\dmlc_tracker\\ssh.py	/^def submit(args):$/;"	f
submit	dmlc-core\\tracker\\dmlc_tracker\\tracker.py	/^def submit(nworker, nserver, fun_submit, hostIP='auto', pscmd=None):$/;"	f
submit	dmlc-core\\tracker\\dmlc_tracker\\yarn.py	/^def submit(args):$/;"	f
submitTasks	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private synchronized void submitTasks(Collection<TaskRecord> tasks) {$/;"	m	class:ApplicationMaster	file:
subtester._failure	torch7\\test\\test_Tester.lua	/^subtester._failure = function(self, message) return false, message end$/;"	f
subtester._success	torch7\\test\\test_Tester.lua	/^subtester._success = function(self) return true, MESSAGE end$/;"	f
suffixedexp	lua\\lparser.c	/^static void suffixedexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
sum_loss	example\\cifar_resnet.py	/^    sum_loss = 0.0$/;"	v
sum_loss	example\\mnist_lenet.py	/^    sum_loss = 0.0$/;"	v
sum_loss	example\\mnist_mlp_auto_shape_inference.py	/^    sum_loss = 0.0$/;"	v
supportedSimdExt	torch7\\lib\\TH\\generic\\simd\\simd.h	/^  uint32_t supportedSimdExt;$/;"	m	struct:FunctionDescription	typeref:typename:uint32_t
survival	lua\\lstate.h	/^  GCObject *survival;  \/* start of objects that survived one GC cycle *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
svalue	lua\\lobject.h	/^#define svalue(/;"	d
swap	dmlc-core\\include\\dmlc\\any.h	/^inline void any::swap(any& other) { \/\/ NOLINT(*)$/;"	f	class:dmlc::any	typeref:typename:void
swap	dmlc-core\\include\\dmlc\\lua.h	/^inline void LuaRef::swap(LuaRef& other) { \/\/ NOLINT(*)$/;"	f	class:dmlc::LuaRef	typeref:typename:void
swap	nnvm\\include\\dmlc\\any.h	/^inline void any::swap(any& other) { \/\/ NOLINT(*)$/;"	f	class:dmlc::any	typeref:typename:void
swap	nnvm\\include\\nnvm\\tuple.h	/^  inline void swap(Tuple<ValueType>& other) {  \/\/ NOLINT(*)$/;"	f	class:nnvm::Tuple	typeref:typename:void
swapexps	lua\\lcode.c	/^static void swapexps (expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void	file:
sweep2old	lua\\lgc.c	/^static void sweep2old (lua_State *L, GCObject **p) {$/;"	f	typeref:typename:void	file:
sweepgc	lua\\lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list *\/$/;"	m	struct:global_State	typeref:typename:GCObject **
sweepgen	lua\\lgc.c	/^static GCObject **sweepgen (lua_State *L, global_State *g, GCObject **p,$/;"	f	typeref:typename:GCObject **	file:
sweeplist	lua\\lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, int countin,$/;"	f	typeref:typename:GCObject **	file:
sweepstep	lua\\lgc.c	/^static int sweepstep (lua_State *L, global_State *g,$/;"	f	typeref:typename:int	file:
sweeptolive	lua\\lgc.c	/^static GCObject **sweeptolive (lua_State *L, GCObject **p) {$/;"	f	typeref:typename:GCObject **	file:
sym	nnvm\\python\\nnvm\\__init__.py	/^from . import symbol as sym$/;"	x
sym	nnvm\\tests\\python\\test_gradient.py	/^import nnvm.symbol as sym$/;"	I
sym	nnvm\\tests\\python\\test_graph.py	/^import nnvm.symbol as sym$/;"	I
sym	nnvm\\tests\\python\\test_symbol.py	/^import nnvm.symbol as sym$/;"	I
symbol	nnvm\\python\\nnvm\\graph.py	/^    def symbol(self):$/;"	m	class:Graph
symbol	src\\session.cc	/^  inline const nnvm::Symbol& symbol() const {$/;"	f	class:tinyflow::TorchExecutor	typeref:typename:const nnvm::Symbol &	file:
symbol_	src\\session.cc	/^  nnvm::Symbol symbol_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:nnvm::Symbol	file:
symbol_constants	nnvm\\src\\core\\symbolic.cc	/^namespace symbol_constants {$/;"	n	namespace:nnvm	file:
symbolic variable	nnvm\\docs\\overview.md	/^# symbolic variable$/;"	c
sync	dmlc-core\\include\\dmlc\\io.h	/^inline int ostream::OutBuf::sync(void) {$/;"	f	class:dmlc::ostream::OutBuf	typeref:typename:int
sync_dir	dmlc-core\\tracker\\dmlc_tracker\\ssh.py	/^def sync_dir(local_dir, slave_node, slave_dir):$/;"	f
synchronize	torch7\\lib\\TH\\THFilePrivate.h	/^    void (*synchronize)(THFile *self);$/;"	m	struct:THFileVTable	typeref:typename:void (*)(THFile * self)
synchronize()	torch7\\doc\\file.md	/^### synchronize() ###$/;"	S
syslib	lua\\loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
t	lua\\llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState	typeref:typename:Token
t	lua\\lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	typeref:typename:expdesc *	file:
t	lua\\lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anon029e1592020a::__anon029e15920308	typeref:typename:lu_byte
t	lua\\lparser.h	/^  int t;  \/* patch list of 'exit when true' *\/$/;"	m	struct:expdesc	typeref:typename:int
t	lua\\testes\\api.lua	/^  local t = {__eq = function (a,b) return map[a] == map[b] end}$/;"	f
t	lua\\testes\\api.lua	/^local t = setmetatable({x = 20}, {__len = function (t) return t.x end})$/;"	f
t	lua\\testes\\closure.lua	/^    t = function (x) local t = y; y = x; return t end$/;"	f
t	lua\\testes\\closure.lua	/^local function t ()$/;"	f
t	lua\\testes\\db.lua	/^t = debug.getinfo(function (a,b,...) return t[a] end, "u")$/;"	f
t	lua\\testes\\db.lua	/^t = debug.getinfo(function (a,b,c) end, "u")$/;"	f
t	lua\\testes\\db.lua	/^t = {"'coroutine.yield'", "'f'", "in function <"}$/;"	f
t	lua\\testes\\events.lua	/^t = setmetatable({1,2,3}, {__len = function () return 10 end})$/;"	f
t	lua\\testes\\gc.lua	/^  t = T.totalmem("function")$/;"	f
t	lua\\testes\\pm.lua	/^t = {}; setmetatable(t, {__index = function (t,s) return string.upper(s) end})$/;"	f
t	lua\\testes\\sort.lua	/^  local t = setmetatable({}, {__len = function () return 'abc' end})$/;"	f
t	lua\\testes\\verybig.lua	/^  local t = {foo = function (self, x) return x + self.x end, x = 10}$/;"	f
t	torch7\\test\\test.lua	/^   local t = genericSingleOpTest:gsub('functionname', 'frac'):gsub('math.frac', 'TH_frac')$/;"	f
t	torch7\\test\\test.lua	/^   local t = genericSingleOpTest:gsub('functionname', 'rsqrt'):gsub('math.rsqrt', 'TH_rsqrt')$/;"	f
t	torch7\\test\\test.lua	/^   local t = genericSingleOpTest:gsub('functionname', 'trunc'):gsub('math.trunc', 'TH_trunc')$/;"	f
t.__concat	lua\\testes\\events.lua	/^t.__concat = function (a,b,c)$/;"	f
t.__eq	lua\\testes\\events.lua	/^t.__eq = function (a,b)$/;"	f
t.__le	lua\\testes\\events.lua	/^t.__le = function (a,b)$/;"	f
t.__le	lua\\testes\\events.lua	/^t.__le = function (a,b,c)$/;"	f
t.__lt	lua\\testes\\events.lua	/^t.__lt = function (a,b)$/;"	f
t.__lt	lua\\testes\\events.lua	/^t.__lt = function (a,b,c)$/;"	f
t1.__eq	lua\\testes\\events.lua	/^t1.__eq = function () return true end$/;"	f
t1.__le	lua\\testes\\events.lua	/^t1.__le = function () return false end$/;"	f
t1.__lt	lua\\testes\\events.lua	/^t1.__lt = function () return true end$/;"	f
t:_012345678901234567890123456789012345678901234567890123456789	lua\\testes\\calls.lua	/^  function t:_012345678901234567890123456789012345678901234567890123456789 ()$/;"	f
t[1]	lua\\testes\\goto.lua	/^  t[1] = function () return a, b, c, d end$/;"	f
tab_funcs	lua\\ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
table.maxn	lua\\testes\\nextvar.lua	/^function table.maxn (t)$/;"	f
table_query	lua\\ltests.c	/^static int table_query (lua_State *L) {$/;"	f	typeref:typename:int	file:
tableinsertcheck	bin\\lua\\cwrap\\cinterface.lua	/^local function tableinsertcheck(tbl, stuff)$/;"	f
tableinsertcheck	cwrap\\cinterface.lua	/^local function tableinsertcheck(tbl, stuff)$/;"	f
tablerehash	lua\\lstring.c	/^static void tablerehash (TString **vect, int osize, int nsize) {$/;"	f	typeref:typename:void	file:
tag_error	lua\\lauxlib.c	/^static void tag_error (lua_State *L, int arg, int tag) {$/;"	f	typeref:typename:void	file:
tanh1	example\\cifar_resnet.py	/^tanh1 = tf.tanh(conv1)$/;"	v
tanh1	example\\mnist_lenet.py	/^tanh1 = tf.tanh(conv1)$/;"	v
tanh2	example\\mnist_lenet.py	/^tanh2 = tf.tanh(conv2)$/;"	v
tanh3	example\\mnist_lenet.py	/^tanh3 = tf.tanh(fc1)$/;"	v
taskId	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^    public int taskId = 0;$/;"	f	class:TaskRecord
taskRole	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\TaskRecord.java	/^    public String taskRole = "worker";$/;"	f	class:TaskRecord
tcheck	lua\\testes\\api.lua	/^function tcheck (t1, t2)$/;"	f
tconcat	lua\\ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	typeref:typename:int	file:
temp	lua\\testes\\gc.lua	/^      load(string.format("function temp(a) return 'a%d' end", contCreate), "")()$/;"	f
temp_	dmlc-core\\include\\dmlc\\recordio.h	/^  std::string temp_;$/;"	m	class:dmlc::RecordIOChunkReader	typeref:typename:std::string
tempdir	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private String tempdir = "\/tmp";$/;"	f	class:Client	file:
templates_path	dmlc-core\\doc\\conf.py	/^templates_path = ['_templates']$/;"	v
tensor	src\\session.cc	/^  LuaRef tensor;$/;"	m	struct:tinyflow::VarState	typeref:typename:LuaRef	file:
tensor:csub(tensor2)	torch7\\doc\\maths.md	/^### tensor:csub(tensor2) ###$/;"	S
tensor:csub(value)	torch7\\doc\\maths.md	/^### tensor:csub(value) ###$/;"	S
test	dmlc-core\\Makefile	/^test: $(ALL_TEST)$/;"	t
test	lua\\testes\\coroutine.lua	/^  local function test ()$/;"	f
test	lua\\testes\\db.lua	/^function test (s, l, p)     -- this must be line 19$/;"	f
test	lua\\testes\\events.lua	/^local function test ()$/;"	f
test	lua\\testes\\locals.lua	/^  local function test ()$/;"	f
test	lua\\testes\\nextvar.lua	/^  local function test (proxy, t)$/;"	f
test	lua\\testes\\nextvar.lua	/^local function test (a)$/;"	f
test	nnvm\\Makefile	/^test: $(TEST)$/;"	t
test/csv_parser_test	dmlc-core\\test\\dmlc_test.mk	/^test\/csv_parser_test: test\/csv_parser_test.cc src\/data\/csv_parser.h libdmlc.a$/;"	t
test/dataiter_test	dmlc-core\\test\\dmlc_test.mk	/^test\/dataiter_test: test\/dataiter_test.cc  libdmlc.a$/;"	t
test/filesys_test	dmlc-core\\test\\dmlc_test.mk	/^test\/filesys_test: test\/filesys_test.cc src\/io\/*.h libdmlc.a$/;"	t
test/iostream_test	dmlc-core\\test\\dmlc_test.mk	/^test\/iostream_test: test\/iostream_test.cc libdmlc.a$/;"	t
test/libsvm_parser_test	dmlc-core\\test\\dmlc_test.mk	/^test\/libsvm_parser_test: test\/libsvm_parser_test.cc src\/data\/libsvm_parser.h libdmlc.a$/;"	t
test/logging_test	dmlc-core\\test\\dmlc_test.mk	/^test\/logging_test: test\/logging_test.cc$/;"	t
test/parameter_test	dmlc-core\\test\\dmlc_test.mk	/^test\/parameter_test: test\/parameter_test.cc$/;"	t
test/recordio_test	dmlc-core\\test\\dmlc_test.mk	/^test\/recordio_test: test\/recordio_test.cc libdmlc.a$/;"	t
test/registry_test	dmlc-core\\test\\dmlc_test.mk	/^test\/registry_test: test\/registry_test.cc$/;"	t
test/split_read_test	dmlc-core\\test\\dmlc_test.mk	/^test\/split_read_test: test\/split_read_test.cc libdmlc.a$/;"	t
test/split_repeat_read_test	dmlc-core\\test\\dmlc_test.mk	/^test\/split_repeat_read_test: test\/split_repeat_read_test.cc libdmlc.a$/;"	t
test/split_test	dmlc-core\\test\\dmlc_test.mk	/^test\/split_test: test\/split_test.cc libdmlc.a$/;"	t
test/stream_read_test	dmlc-core\\test\\dmlc_test.mk	/^test\/stream_read_test: test\/stream_read_test.cc libdmlc.a$/;"	t
test/strtonum_test	dmlc-core\\test\\dmlc_test.mk	/^test\/strtonum_test: test\/strtonum_test.cc src\/data\/strtonum.h$/;"	t
test2	lua\\liolib.c	/^static int test2 (RN *rn, const char *set) {$/;"	f	typeref:typename:int	file:
testAMode	lua\\lopcodes.h	/^#define testAMode(/;"	d
testC	lua\\ltests.c	/^static int testC (lua_State *L) {$/;"	f	typeref:typename:int	file:
testEqNe	torch7\\test\\test_Tester.lua	/^local function testEqNe(eqExpected, ...)$/;"	f
testG	lua\\testes\\goto.lua	/^local function testG (a)$/;"	f
testITMode	lua\\lopcodes.h	/^#define testITMode(/;"	d
testOTMode	lua\\lopcodes.h	/^#define testOTMode(/;"	d
testTMode	lua\\lopcodes.h	/^#define testTMode(/;"	d
testTableEqNe	torch7\\test\\test_Tester.lua	/^local function testTableEqNe(eqExpected, ...)$/;"	f
testTensorEqNe	torch7\\test\\test_Tester.lua	/^local function testTensorEqNe(eqExpected, alsoTestEq, ...)$/;"	f
test_THDoubleVector_adds_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THDoubleVector_adds_VSX()$/;"	f	typeref:typename:void
test_THDoubleVector_cadd_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THDoubleVector_cadd_VSX()$/;"	f	typeref:typename:void
test_THDoubleVector_cdiv_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THDoubleVector_cdiv_VSX()$/;"	f	typeref:typename:void
test_THDoubleVector_cmul_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THDoubleVector_cmul_VSX()$/;"	f	typeref:typename:void
test_THDoubleVector_divs_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THDoubleVector_divs_VSX()$/;"	f	typeref:typename:void
test_THDoubleVector_fill_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THDoubleVector_fill_VSX()$/;"	f	typeref:typename:void
test_THDoubleVector_muls_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THDoubleVector_muls_VSX()$/;"	f	typeref:typename:void
test_THFloatVector_adds_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THFloatVector_adds_VSX()$/;"	f	typeref:typename:void
test_THFloatVector_cadd_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THFloatVector_cadd_VSX()$/;"	f	typeref:typename:void
test_THFloatVector_cdiv_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THFloatVector_cdiv_VSX()$/;"	f	typeref:typename:void
test_THFloatVector_cmul_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THFloatVector_cmul_VSX()$/;"	f	typeref:typename:void
test_THFloatVector_divs_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THFloatVector_divs_VSX()$/;"	f	typeref:typename:void
test_THFloatVector_fill_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THFloatVector_fill_VSX()$/;"	f	typeref:typename:void
test_THFloatVector_muls_VSX	torch7\\lib\\TH\\vector\\VSX.c	/^void test_THFloatVector_muls_VSX()$/;"	f	typeref:typename:void
test_add_grad	tests\\python\\test_gradients.py	/^def test_add_grad():$/;"	f
test_argmax	tests\\python\\test_ops.py	/^def test_argmax():$/;"	f
test_assign	tests\\python\\test_states.py	/^def test_assign():$/;"	f
test_compose	nnvm\\tests\\python\\test_symbol.py	/^def test_compose():$/;"	f
test_control_dep	nnvm\\tests\\python\\test_symbol.py	/^def test_control_dep():$/;"	f
test_copy	nnvm\\tests\\python\\test_symbol.py	/^def test_copy():$/;"	f
test_default_input	nnvm\\tests\\python\\test_symbol.py	/^def test_default_input():$/;"	f
test_eof	lua\\liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	typeref:typename:int	file:
test_ewise	tests\\python\\test_ops.py	/^def test_ewise():$/;"	f
test_exp	tests\\python\\test_ops.py	/^def test_exp():$/;"	f
test_graph_gradient	nnvm\\tests\\python\\test_gradient.py	/^def test_graph_gradient():$/;"	f
test_graph_json_attr	nnvm\\tests\\python\\test_graph.py	/^def test_graph_json_attr():$/;"	f
test_group	tests\\python\\test_states.py	/^def test_group():$/;"	f
test_infer_shape	nnvm\\tests\\python\\test_graph.py	/^def test_infer_shape():$/;"	f
test_infer_shape_known_partial	nnvm\\tests\\python\\test_graph.py	/^def test_infer_shape_known_partial():$/;"	f
test_infer_type	nnvm\\tests\\python\\test_graph.py	/^def test_infer_type():$/;"	f
test_init	tests\\python\\test_states.py	/^def test_init():$/;"	f
test_json_pass	nnvm\\tests\\python\\test_graph.py	/^def test_json_pass():$/;"	f
test_json_pass_with_attr	nnvm\\tests\\python\\test_graph.py	/^def test_json_pass_with_attr():$/;"	f
test_list_args	nnvm\\tests\\python\\test_graph.py	/^def test_list_args():$/;"	f
test_log	tests\\python\\test_ops.py	/^def test_log():$/;"	f
test_matmul	tests\\python\\test_ops.py	/^def test_matmul():$/;"	f
test_matmul_grad	tests\\python\\test_gradients.py	/^def test_matmul_grad():$/;"	f
test_mean	tests\\python\\test_ops.py	/^def test_mean():$/;"	f
test_mean_grad	tests\\python\\test_gradients.py	/^def test_mean_grad():$/;"	f
test_mul_grad	tests\\python\\test_gradients.py	/^def test_mul_grad():$/;"	f
test_mutate_input	nnvm\\tests\\python\\test_symbol.py	/^def test_mutate_input():$/;"	f
test_order_mutation_pass	nnvm\\tests\\python\\test_graph.py	/^def test_order_mutation_pass():$/;"	f
test_pad	tests\\python\\test_ops.py	/^def test_pad():$/;"	f
test_place_device	nnvm\\tests\\python\\test_graph.py	/^def test_place_device():$/;"	f
test_plan_memory	nnvm\\tests\\python\\test_graph.py	/^def test_plan_memory():$/;"	f
test_softmax	tests\\python\\test_ops.py	/^def test_softmax():$/;"	f
test_sqrt	tests\\python\\test_ops.py	/^def test_sqrt():$/;"	f
test_sum	tests\\python\\test_ops.py	/^def test_sum():$/;"	f
test_sum_grad	tests\\python\\test_gradients.py	/^def test_sum_grad():$/;"	f
test_then_block	lua\\lparser.c	/^static void test_then_block (LexState *ls, int *escapelist) {$/;"	f	typeref:typename:void	file:
testamem	lua\\testes\\api.lua	/^function testamem (s, f)$/;"	f
testbit	lua\\lgc.h	/^#define testbit(/;"	d
testbits	lua\\lgc.h	/^#define testbits(/;"	d
testerr	lua\\testes\\files.lua	/^local function testerr (msg, f, ...)$/;"	f
testloadfile	lua\\testes\\files.lua	/^local function testloadfile (s, expres)$/;"	f
testnear	lua\\testes\\math.lua	/^local function testnear (val, ref, tol)$/;"	f
testnext	lua\\lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	typeref:typename:int	file:
testobjref	lua\\ltests.c	/^static int testobjref (global_State *g, GCObject *f, GCObject *t) {$/;"	f	typeref:typename:int	file:
testobjref1	lua\\ltests.c	/^static int testobjref1 (global_State *g, GCObject *f, GCObject *t) {$/;"	f	typeref:typename:int	file:
testpfs	lua\\testes\\strings.lua	/^  local function testpfs (op, fmt, n)$/;"	f
testprop	lua\\lctype.h	/^#define testprop(/;"	d
testrep	lua\\testes\\errors.lua	/^local function testrep (init, rep, close, repc)$/;"	f
tests._setUp	torch7\\test\\test_Tester.lua	/^function tests._setUp(name)$/;"	f
tests._tearDown	torch7\\test\\test_Tester.lua	/^function tests._tearDown(name)$/;"	f
tests.assert	torch7\\test\\test_Tester.lua	/^function tests.assert()$/;"	f
tests.assertError	torch7\\test\\test_Tester.lua	/^function tests.assertError()$/;"	f
tests.assertErrorPattern	torch7\\test\\test_Tester.lua	/^function tests.assertErrorPattern()$/;"	f
tests.assertGeneral	torch7\\test\\test_Tester.lua	/^function tests.assertGeneral()$/;"	f
tests.assertNoError	torch7\\test\\test_Tester.lua	/^function tests.assertNoError()$/;"	f
tests.assertTable	torch7\\test\\test_Tester.lua	/^function tests.assertTable()$/;"	f
tests.assertTensor	torch7\\test\\test_Tester.lua	/^function tests.assertTensor()$/;"	f
tests.assertTensorDimWarning	torch7\\test\\test_Tester.lua	/^function tests.assertTensorDimWarning()$/;"	f
tests.assertTensor_arg	torch7\\test\\test_Tester.lua	/^function tests.assertTensor_arg()$/;"	f
tests.assertTensor_epsilon	torch7\\test\\test_Tester.lua	/^function tests.assertTensor_epsilon()$/;"	f
tests.assertTensor_sizes	torch7\\test\\test_Tester.lua	/^function tests.assertTensor_sizes()$/;"	f
tests.assertTensor_types	torch7\\test\\test_Tester.lua	/^function tests.assertTensor_types()$/;"	f
tests.assertalmosteq	torch7\\test\\test_Tester.lua	/^function tests.assertalmosteq()$/;"	f
tests.asserteq	torch7\\test\\test_Tester.lua	/^function tests.asserteq()$/;"	f
tests.assertge	torch7\\test\\test_Tester.lua	/^function tests.assertge()$/;"	f
tests.assertgt	torch7\\test\\test_Tester.lua	/^function tests.assertgt()$/;"	f
tests.assertle	torch7\\test\\test_Tester.lua	/^function tests.assertle()$/;"	f
tests.assertlt	torch7\\test\\test_Tester.lua	/^function tests.assertlt()$/;"	f
tests.assertne	torch7\\test\\test_Tester.lua	/^function tests.assertne()$/;"	f
tests.checkContents	torch7\\test\\test_sharedmem.lua	/^function tests.checkContents()$/;"	f
tests.checkMaxAllowedSetUpAndTearDown	torch7\\test\\test_Tester.lua	/^function tests.checkMaxAllowedSetUpAndTearDown()$/;"	f
tests.checkNestedTestsForbidden	torch7\\test\\test_Tester.lua	/^function tests.checkNestedTestsForbidden()$/;"	f
tests.checkWarningOnAssertNeObject	torch7\\test\\test_Tester.lua	/^function tests.checkWarningOnAssertNeObject()$/;"	f
tests.checkWarningOnAssertObject	torch7\\test\\test_Tester.lua	/^function tests.checkWarningOnAssertObject()$/;"	f
tests.checkWarningOnExtraAssertArguments	torch7\\test\\test_Tester.lua	/^function tests.checkWarningOnExtraAssertArguments()$/;"	f
tests.checkWarningOnUsingTable	torch7\\test\\test_Tester.lua	/^function tests.checkWarningOnUsingTable()$/;"	f
tests.createSharedMemFile	torch7\\test\\test_sharedmem.lua	/^function tests.createSharedMemFile()$/;"	f
tests.disable	torch7\\test\\test_Tester.lua	/^function tests.disable()$/;"	f
tests.diskFileLongSize4	torch7\\test\\longSize.lua	/^function tests.diskFileLongSize4()$/;"	f
tests.diskFileLongSize8	torch7\\test\\longSize.lua	/^function tests.diskFileLongSize8()$/;"	f
tests.memoryFileLongSize4	torch7\\test\\longSize.lua	/^function tests.memoryFileLongSize4()$/;"	f
tests.memoryFileLongSize8	torch7\\test\\longSize.lua	/^function tests.memoryFileLongSize8()$/;"	f
tests.really_test_assert	torch7\\test\\test_Tester.lua	/^function tests.really_test_assert()$/;"	f
tests.runStatusAndAssertCounts	torch7\\test\\test_Tester.lua	/^function tests.runStatusAndAssertCounts()$/;"	f
tests.setEarlyAbort	torch7\\test\\test_Tester.lua	/^function tests.setEarlyAbort()$/;"	f
tests.setRethrowErrors	torch7\\test\\test_Tester.lua	/^function tests.setRethrowErrors()$/;"	f
tests.test1	torch7\\test\\test_Tester.lua	/^      function tests.test1()$/;"	f
tests.test2	torch7\\test\\test_Tester.lua	/^      function tests.test2()$/;"	f
tests.testQM	torch7\\test\\test_qr.lua	/^function tests.testQM()$/;"	f
tests.testSharing	torch7\\test\\test_sharedmem.lua	/^function tests.testSharing()$/;"	f
tests.testSuite_duplicateTests	torch7\\test\\test_Tester.lua	/^function tests.testSuite_duplicateTests()$/;"	f
tests.testThis	torch7\\test\\test_Tester.lua	/^      function tests.testThis() end$/;"	f
tests.test_SerializationHook	torch7\\test\\test_writeObject.lua	/^function tests.test_SerializationHook()$/;"	f
tests.test_a_recursive_closure	torch7\\test\\test_writeObject.lua	/^function tests.test_a_recursive_closure()$/;"	f
tests.test_a_tensor	torch7\\test\\test_writeObject.lua	/^function tests.test_a_tensor()$/;"	f
tests.test_can_write_a_nil_closure	torch7\\test\\test_writeObject.lua	/^function tests.test_can_write_a_nil_closure()$/;"	f
tests.test_empty_table	torch7\\test\\test_writeObject.lua	/^function tests.test_empty_table()$/;"	f
tests.test_error_msg	torch7\\test\\test_writeObject.lua	/^function tests.test_error_msg()$/;"	f
tests.test_global_function_in_closure	torch7\\test\\test_writeObject.lua	/^function tests.test_global_function_in_closure()$/;"	f
tests.test_nil_upvalues_in_closure	torch7\\test\\test_writeObject.lua	/^function tests.test_nil_upvalues_in_closure()$/;"	f
tests.test_referenced	torch7\\test\\test_writeObject.lua	/^function tests.test_referenced()$/;"	f
tests.test_serializeToStorage	torch7\\test\\test_writeObject.lua	/^function tests.test_serializeToStorage()$/;"	f
tests.test_setUp	torch7\\test\\test_Tester.lua	/^function tests.test_setUp()$/;"	f
tests.test_shared_upvalues	torch7\\test\\test_writeObject.lua	/^function tests.test_shared_upvalues()$/;"	f
tests.test_tearDown	torch7\\test\\test_Tester.lua	/^function tests.test_tearDown()$/;"	f
tests.test_warning_msg	torch7\\test\\test_writeObject.lua	/^function tests.test_warning_msg()$/;"	f
tests.timerTime	torch7\\test\\test_timer.lua	/^function tests.timerTime()$/;"	f
tests/cpp/%_test	nnvm\\tests\\cpp\\unittest.mk	/^tests\/cpp\/%_test: tests\/cpp\/%_test.cc lib\/libnnvm.a$/;"	t
tests[fullName]	torch7\\test\\test_qr.lua	/^        tests[fullName] = function()$/;"	f
tests_funcs	lua\\ltests.c	/^static const struct luaL_Reg tests_funcs[] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
tests_test_a_tensor	torch7\\test\\test_writeObject.lua	/^function tests_test_a_tensor(func)$/;"	f
teststring	lua\\testes\\heavy.lua	/^local function teststring ()$/;"	f
texinfo	dmlc-core\\doc\\Makefile	/^texinfo:$/;"	t
text	dmlc-core\\doc\\Makefile	/^text:$/;"	t
text(string)	torch7\\doc\\cmdline.md	/^### text(string) ###$/;"	S
tf	bin\\l.py	/^import tinyflow as tf$/;"	I
tf	example\\cifar_resnet.py	/^import tinyflow as tf$/;"	I
tf	example\\mnist_lenet.py	/^import tinyflow as tf$/;"	I
tf	example\\mnist_mlp_auto_shape_inference.py	/^import tinyflow as tf$/;"	I
tf	example\\mnist_softmax.py	/^import tinyflow as tf$/;"	I
tf	example\\mnist_softmax_minimum.py	/^import tinyflow as tf$/;"	I
tf	tests\\python\\test_gradients.py	/^import tinyflow as tf$/;"	I
tf	tests\\python\\test_ops.py	/^import tinyflow as tf$/;"	I
tf	tests\\python\\test_states.py	/^import tinyflow as tf$/;"	I
th	lua\\lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCUnion	typeref:struct:lua_State
th	lua\\testes\\api.lua	/^  local th = coroutine.create(function () end)  -- create new thread$/;"	f
th myscript.lua	torch7\\doc\\cmdline.md	/^# th myscript.lua$/;"	c
th myscript.lua -seed 456 -stroption mycustomstring	torch7\\doc\\cmdline.md	/^# th myscript.lua -seed 456 -stroption mycustomstring$/;"	c
th_isnan	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define th_isnan(/;"	d	file:
th_isnan_break	torch7\\lib\\TH\\generic\\THTensorMath.c	/^#define th_isnan_break(/;"	d	file:
the_initial_seed	torch7\\lib\\TH\\THRandom.h	/^  unsigned long the_initial_seed;$/;"	m	struct:THGenerator	typeref:typename:unsigned long
threadArgErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^static __thread THArgErrorHandlerFunction threadArgErrorHandler = NULL;$/;"	v	typeref:typename:__thread THArgErrorHandlerFunction	file:
threadArgErrorHandlerData	torch7\\lib\\TH\\THGeneral.c	/^static __thread void *threadArgErrorHandlerData;$/;"	v	typeref:typename:__thread void *	file:
threadErrorHandler	torch7\\lib\\TH\\THGeneral.c	/^static __thread THErrorHandlerFunction threadErrorHandler = NULL;$/;"	v	typeref:typename:__thread THErrorHandlerFunction	file:
threadErrorHandlerData	torch7\\lib\\TH\\THGeneral.c	/^static __thread void *threadErrorHandlerData;$/;"	v	typeref:typename:__thread void *	file:
threads[thread_id]	lua\\testes\\gc.lua	/^    threads[thread_id] = function()$/;"	f
thvalue	lua\\lobject.h	/^#define thvalue(/;"	d
time_old_sort	torch7\\test\\timeSort.lua	/^    local function time_old_sort(x)$/;"	f
time_sort	torch7\\test\\timeSort.lua	/^    local function time_sort(x)$/;"	f
times5	lua\\lmathlib.c	/^static Rand64 times5 (Rand64 i) {$/;"	f	typeref:typename:Rand64	file:
times9	lua\\lmathlib.c	/^static Rand64 times9 (Rand64 i) {$/;"	f	typeref:typename:Rand64	file:
timesort	lua\\testes\\sort.lua	/^function timesort (a, n, func, msg, pre)$/;"	f
tinsert	lua\\ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	typeref:typename:int	file:
tinyflow	include\\tinyflow\\base.h	/^namespace tinyflow {$/;"	n
tinyflow	src\\op_nn.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\op_special.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\op_tensor.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\op_util.h	/^namespace tinyflow {$/;"	n
tinyflow	src\\rtc\\op_fusion.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\session.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\torch\\op_nn_torch.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\torch\\op_special_torch.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\torch\\op_tensor_torch.cc	/^namespace tinyflow {$/;"	n	file:
tinyflow	src\\torch\\torch_util.h	/^namespace tinyflow {$/;"	n
tmap	nnvm\\src\\core\\op.cc	/^  std::unordered_map<std::string, std::vector<std::function<void(Op*)>  > > tmap;$/;"	m	struct:nnvm::OpManager	typeref:typename:std::unordered_map<std::string,std::vector<std::function<void (Op *)>>>	file:
tmname	lua\\lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State	typeref:typename:TString * []
tmove	lua\\ltablib.c	/^static int tmove (lua_State *L) {$/;"	f	typeref:typename:int	file:
tmp_	dmlc-core\\src\\data\\parser.h	/^  std::vector<RowBlockContainer<IndexType> > *tmp_;$/;"	m	class:dmlc::data::ThreadedParser	typeref:typename:std::vector<RowBlockContainer<IndexType>> *
tmp_chunk_	dmlc-core\\src\\io\\cached_input_split.h	/^  InputSplitBase::Chunk *tmp_chunk_;$/;"	m	class:dmlc::io::CachedInputSplit	typeref:typename:InputSplitBase::Chunk *
tmp_chunk_	dmlc-core\\src\\io\\input_split_base.h	/^  Chunk tmp_chunk_;$/;"	m	class:dmlc::io::InputSplitBase	typeref:typename:Chunk
tmp_chunk_	dmlc-core\\src\\io\\threaded_input_split.h	/^  InputSplitBase::Chunk *tmp_chunk_;$/;"	m	class:dmlc::io::ThreadedInputSplit	typeref:typename:InputSplitBase::Chunk *
to	lua\\testes\\api.lua	/^function to (s, x, n)$/;"	f
toSublocation	torch7\\Tester.lua	/^      local function toSublocation(key)$/;"	f
tobefnz	lua\\lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
tocloselocalstat	lua\\lparser.c	/^static void tocloselocalstat (LexState *ls, Vardesc *var) {$/;"	f	typeref:typename:void	file:
todo_include_todos	dmlc-core\\doc\\conf.py	/^todo_include_todos = False$/;"	v
tofile	lua\\liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	typeref:typename:FILE *	file:
tofile(filename)	cwrap\\doc\\highlevelinterface.md	/^### tofile(filename) ###$/;"	S
tofinalize	lua\\lgc.h	/^#define tofinalize(/;"	d
toint	lua\\testes\\bwcoercion.lua	/^local function toint (x)$/;"	f
tointeger	lua\\lvm.h	/^#define tointeger(/;"	d
tointegerns	lua\\lvm.h	/^#define tointegerns(/;"	d
token	lua\\llex.h	/^  int token;$/;"	m	struct:Token	typeref:typename:int
tolstream	lua\\liolib.c	/^#define tolstream(/;"	d	file:
tonum	lua\\lstrlib.c	/^static int tonum (lua_State *L, int arg) {$/;"	f	typeref:typename:int	file:
tonumber	lua\\lvm.h	/^#define tonumber(/;"	d
tonumberns	lua\\lvm.h	/^#define tonumberns(/;"	d
tonumeral	lua\\lcode.c	/^static int tonumeral(const expdesc *e, TValue *v) {$/;"	f	typeref:typename:int	file:
toomanyconst	lua\\testes\\heavy.lua	/^function toomanyconst ()$/;"	f
toomanyidx	lua\\testes\\heavy.lua	/^function toomanyidx ()$/;"	f
toomanyinst	lua\\testes\\heavy.lua	/^function toomanyinst ()$/;"	f
toomanystr	lua\\testes\\heavy.lua	/^function toomanystr ()$/;"	f
top	dmlc-core\\include\\dmlc\\lua.h	/^  int top;$/;"	m	struct:dmlc::LuaState::StackReset	typeref:typename:int
top	lua\\lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo	typeref:typename:StkId
top	lua\\lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State	typeref:typename:StkId
topKViaSort	torch7\\test\\test.lua	/^   local function topKViaSort(t, k, dim, dir)$/;"	f
torch.DiskFile(fileName, [mode], [quiet])	torch7\\doc\\diskfile.md	/^### torch.DiskFile(fileName, [mode], [quiet]) ###$/;"	S
torch.HalfTensor:__sub	torch7\\test\\test.lua	/^function torch.HalfTensor:__sub(other)$/;"	f
torch.HalfTensor:abs	torch7\\test\\test.lua	/^function torch.HalfTensor:abs()$/;"	f
torch.HalfTensor:add	torch7\\test\\test.lua	/^function torch.HalfTensor:add(a, b)$/;"	f
torch.HalfTensor:fill	torch7\\test\\test.lua	/^function torch.HalfTensor:fill(a)$/;"	f
torch.HalfTensor:max	torch7\\test\\test.lua	/^function torch.HalfTensor:max()$/;"	f
torch.HalfTensor:mean	torch7\\test\\test.lua	/^function torch.HalfTensor:mean(dim)$/;"	f
torch.HalfTensor:norm	torch7\\test\\test_writeObject.lua	/^function torch.HalfTensor:norm()$/;"	f
torch.HalfTensor:reshape	torch7\\test\\test.lua	/^function torch.HalfTensor:reshape(a, b)$/;"	f
torch.MemoryFile([mode])	torch7\\doc\\memoryfile.md	/^### torch.MemoryFile([mode]) ###$/;"	S
torch.MemoryFile(storage, mode)	torch7\\doc\\memoryfile.md	/^### torch.MemoryFile(storage, mode) ###$/;"	S
torch.PipeFile(command, [mode], [quiet])	torch7\\doc\\pipefile.md	/^### torch.PipeFile(command, [mode], [quiet]) ###$/;"	S
torch.TYPEStorage([size [, ptr]])	torch7\\doc\\storage.md	/^### torch.TYPEStorage([size [, ptr]]) ###$/;"	S
torch.TYPEStorage(filename [, shared [, size [, sharedMem]]])	torch7\\doc\\storage.md	/^### torch.TYPEStorage(filename [, shared [, size [, sharedMem]]]) ###$/;"	S
torch.TYPEStorage(storage [, offset [, size]])	torch7\\doc\\storage.md	/^### torch.TYPEStorage(storage [, offset [, size]]) ###$/;"	S
torch.TYPEStorage(table)	torch7\\doc\\storage.md	/^### torch.TYPEStorage(table) ###$/;"	S
torch.Tensor()	torch7\\doc\\tensor.md	/^### torch.Tensor() ###$/;"	S
torch.Tensor(sizes, [strides])	torch7\\doc\\tensor.md	/^### torch.Tensor(sizes, [strides]) ###$/;"	S
torch.Tensor(storage, [storageOffset, sizes, [strides]])	torch7\\doc\\tensor.md	/^### torch.Tensor(storage, [storageOffset, sizes, [strides]]) ###$/;"	S
torch.Tensor(storage, [storageOffset, sz1 [, st1 ... [, sz4 [, st4]]]])	torch7\\doc\\tensor.md	/^### torch.Tensor(storage, [storageOffset, sz1 [, st1 ... [, sz4 [, st4]]]]) ###$/;"	S
torch.Tensor(sz1 [,sz2 [,sz3 [,sz4]]]])	torch7\\doc\\tensor.md	/^### torch.Tensor(sz1 [,sz2 [,sz3 [,sz4]]]]) ###$/;"	S
torch.Tensor(table)	torch7\\doc\\tensor.md	/^### torch.Tensor(table) ###$/;"	S
torch.Tensor(tensor)	torch7\\doc\\tensor.md	/^### torch.Tensor(tensor) ###$/;"	S
torch.TestSuite	torch7\\TestSuite.lua	/^function torch.TestSuite()$/;"	f
torch.Tester()	torch7\\doc\\tester.md	/^### torch.Tester() ###$/;"	S
torch.Timer()	torch7\\doc\\timer.md	/^### torch.Timer() ###$/;"	S
torch.all(a)	torch7\\doc\\maths.md	/^### torch.all(a) ###$/;"	S
torch.any(a)	torch7\\doc\\maths.md	/^### torch.any(a) ###$/;"	S
torch.cdata	torch7\\FFInterface.lua	/^   function torch.cdata(self, asnumber)$/;"	f
torch.class	torch7\\init.lua	/^function torch.class(...)$/;"	f
torch.data	torch7\\FFInterface.lua	/^   function torch.data(self, asnumber)$/;"	f
torch.deserialize	torch7\\File.lua	/^function torch.deserialize(str, mode)$/;"	f
torch.deserializeFromStorage	torch7\\File.lua	/^function torch.deserializeFromStorage(storage, mode)$/;"	f
torch.dist(x, y)	torch7\\doc\\maths.md	/^### torch.dist(x, y) ###$/;"	S
torch.eig([rese, resv,] a [, 'N' or 'V'])	torch7\\doc\\maths.md	/^### torch.eig([rese, resv,] a [, 'N' or 'V']) ###$/;"	S
torch.eq(a, b)	torch7\\doc\\maths.md	/^### torch.eq(a, b) ###$/;"	S
torch.ge(a, b)	torch7\\doc\\maths.md	/^### torch.ge(a, b) ###$/;"	S
torch.gels([resb, resa,] b, a)	torch7\\doc\\maths.md	/^### torch.gels([resb, resa,] b, a) ###$/;"	S
torch.geqrf([m, tau], a)	torch7\\doc\\maths.md	/^### torch.geqrf([m, tau], a) ###$/;"	S
torch.gt(a, b)	torch7\\doc\\maths.md	/^### torch.gt(a, b) ###$/;"	S
torch.include	torch7\\init.lua	/^function torch.include(package, file)$/;"	f
torch.inverse([res,] x)	torch7\\doc\\maths.md	/^### torch.inverse([res,] x) ###$/;"	S
torch.isStorage	torch7\\init.lua	/^function torch.isStorage(obj)$/;"	f
torch.isTensor	torch7\\init.lua	/^function torch.isTensor(obj)$/;"	f
torch.isTypeOf	torch7\\init.lua	/^function torch.isTypeOf(obj, typeSpec)$/;"	f
torch.kthvalue([resval, resind,] x, k [,dim])	torch7\\doc\\maths.md	/^### torch.kthvalue([resval, resind,] x, k [,dim]) ###$/;"	S
torch.le(a, b)	torch7\\doc\\maths.md	/^### torch.le(a, b) ###$/;"	S
torch.load	torch7\\File.lua	/^function torch.load(filename, mode, referenced)$/;"	f
torch.lt(a, b)	torch7\\doc\\maths.md	/^### torch.lt(a, b) ###$/;"	S
torch.max([resval, resind,] x [,dim])	torch7\\doc\\maths.md	/^### torch.max([resval, resind,] x [,dim]) ###$/;"	S
torch.median([resval, resind,] x [,dim])	torch7\\doc\\maths.md	/^### torch.median([resval, resind,] x [,dim]) ###$/;"	S
torch.min([resval, resind,] x [,dim])	torch7\\doc\\maths.md	/^### torch.min([resval, resind,] x [,dim]) ###$/;"	S
torch.mode([resval, resind,] x [,dim])	torch7\\doc\\maths.md	/^### torch.mode([resval, resind,] x [,dim]) ###$/;"	S
torch.multinomialAlias	torch7\\init.lua	/^function torch.multinomialAlias(output, state)$/;"	f
torch.multinomialAliasSetup	torch7\\init.lua	/^function torch.multinomialAliasSetup(probs, state)$/;"	f
torch.ne(a, b)	torch7\\doc\\maths.md	/^### torch.ne(a, b) ###$/;"	S
torch.norm(x [,p] [,dim])	torch7\\doc\\maths.md	/^### torch.norm(x [,p] [,dim]) ###$/;"	S
torch.numel(x)	torch7\\doc\\maths.md	/^### torch.numel(x) ###$/;"	S
torch.orgqr([q], m, tau)	torch7\\doc\\maths.md	/^### torch.orgqr([q], m, tau) ###$/;"	S
torch.ormqr([res], m, tau, mat [, 'L' or 'R'] [, 'N' or 'T'])	torch7\\doc\\maths.md	/^### torch.ormqr([res], m, tau, mat [, 'L' or 'R'] [, 'N' or 'T']) ###$/;"	S
torch.packageLuaPath	torch7\\init.lua	/^function torch.packageLuaPath(name)$/;"	f
torch.potrf([res,] A [, 'U' or 'L'] )	torch7\\doc\\maths.md	/^### torch.potrf([res,] A [, 'U' or 'L'] ) ###$/;"	S
torch.potri([res,] chol [, 'U' or 'L'] )	torch7\\doc\\maths.md	/^### torch.potri([res,] chol [, 'U' or 'L'] ) ###$/;"	S
torch.potrs([res,] B, chol [, 'U' or 'L'] )	torch7\\doc\\maths.md	/^### torch.potrs([res,] B, chol [, 'U' or 'L'] ) ###$/;"	S
torch.pstrf([res, piv, ] A [, 'U' or 'L'] )	torch7\\doc\\maths.md	/^### torch.pstrf([res, piv, ] A [, 'U' or 'L'] ) ###$/;"	S
torch.qr([q, r], x)	torch7\\doc\\maths.md	/^### torch.qr([q, r], x) ###$/;"	S
torch.renorm([res], x, p, dim, maxnorm)	torch7\\doc\\maths.md	/^### torch.renorm([res], x, p, dim, maxnorm) ###$/;"	S
torch.save	torch7\\File.lua	/^function torch.save(filename, object, mode, referenced)$/;"	f
torch.save(filename, object [, format, referenced])	torch7\\doc\\serialization.md	/^### torch.save(filename, object [, format, referenced]) ###$/;"	S
torch.serialize	torch7\\File.lua	/^function torch.serialize(object, mode)$/;"	f
torch.serializeToStorage	torch7\\File.lua	/^function torch.serializeToStorage(object, mode)$/;"	f
torch.setdefaulttensortype	torch7\\init.lua	/^function torch.setdefaulttensortype(typename)$/;"	f
torch.setdefaulttensortype([typename])	torch7\\doc\\utility.md	/^### torch.setdefaulttensortype([typename]) ###$/;"	S
torch.setenv(function or userdata, table)	torch7\\doc\\utility.md	/^### torch.setenv(function or userdata, table) ###$/;"	S
torch.sort([resval, resind,] x [,d] [,flag])	torch7\\doc\\maths.md	/^### torch.sort([resval, resind,] x [,d] [,flag]) ###$/;"	S
torch.svd([resu, ress, resv,] a [, 'S' or 'A'])	torch7\\doc\\maths.md	/^### torch.svd([resu, ress, resv,] a [, 'S' or 'A']) ###$/;"	S
torch.symeig([rese, resv,] a [, 'N' or 'V'] [, 'U' or 'L'])	torch7\\doc\\maths.md	/^### torch.symeig([rese, resv,] a [, 'N' or 'V'] [, 'U' or 'L']) ###$/;"	S
torch.test	torch7\\test\\test.lua	/^function torch.test(tests)$/;"	f
torch.topk([resval, resind,] x, k, [,dim] [,dir] [,sort])	torch7\\doc\\maths.md	/^### torch.topk([resval, resind,] x, k, [,dim] [,dir] [,sort]) ###$/;"	S
torch.totable	torch7\\init.lua	/^function torch.totable(obj)$/;"	f
torch.trace(x)	torch7\\doc\\maths.md	/^### torch.trace(x) ###$/;"	S
torch.type	torch7\\init.lua	/^function torch.type(obj)$/;"	f
torch.updatethreadlocals	torch7\\init.lua	/^function torch.updatethreadlocals()$/;"	f
torchGCData	torch7\\lib\\TH\\THGeneral.c	/^static __thread void *torchGCData;$/;"	v	typeref:typename:__thread void *	file:
torchGCFunction	torch7\\lib\\TH\\THGeneral.c	/^static __thread void (*torchGCFunction)(void *data) = NULL;$/;"	v	typeref:typename:__thread void (*)(void * data)	file:
torch_ByteTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_ByteTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_ByteTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_ByteTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_ByteTensor_add	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_addmm	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_addmv	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_addr	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_all	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_all(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_any	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_any(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_bitand	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_bitor	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_bmm	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cat	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_clamp	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_clshift	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cmax	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cmin	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cmod	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cmul	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_conv2	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_conv3	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cpow	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cross	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_crshift	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_csub	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_diag	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_div	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_dot	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_eq	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_equal	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_eye	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_fill	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_fmod	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_gather	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_ge	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_geometric	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_ger	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_gt	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_le	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_lshift	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_lt	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_match	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_max	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_median	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_min	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_mm	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_mod	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_mode	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_mul	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_mv	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_ne	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_numel	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_ones	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_prod	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_random	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_randperm	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_range	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_remainder	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_reshape	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_rshift	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_scatter	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_sign	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_sort	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_sum	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_topk	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_trace	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_tril	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_triu	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_zero	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ByteTensor_zeros	bin\\torch7\\TensorMath.c	/^static int torch_ByteTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_CharTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_CharTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_CharTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_CharTensor_add	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_addmm	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_addmv	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_addr	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_bitand	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_bitor	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_bmm	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cat	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_clamp	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_clshift	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cmax	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cmin	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cmod	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cmul	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_conv2	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_conv3	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cpow	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cross	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_crshift	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_csub	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_diag	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_div	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_dot	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_eq	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_equal	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_eye	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_fill	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_fmod	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_gather	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_ge	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_geometric	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_ger	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_gt	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_le	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_lshift	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_lt	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_match	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_max	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_median	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_min	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_mm	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_mod	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_mode	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_mul	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_mv	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_ne	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_numel	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_ones	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_prod	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_random	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_randperm	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_range	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_remainder	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_reshape	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_rshift	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_scatter	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_sign	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_sort	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_sum	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_topk	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_trace	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_tril	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_triu	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_zero	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_CharTensor_zeros	bin\\torch7\\TensorMath.c	/^static int torch_CharTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile__	torch7\\DiskFile.c	/^static const struct luaL_Reg torch_DiskFile__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_DiskFile___tostring__	torch7\\DiskFile.c	/^static int torch_DiskFile___tostring__(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_bigEndianEncoding	torch7\\DiskFile.c	/^static int torch_DiskFile_bigEndianEncoding(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_free	torch7\\DiskFile.c	/^static int torch_DiskFile_free(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_init	torch7\\DiskFile.c	/^void torch_DiskFile_init(lua_State *L)$/;"	f	typeref:typename:void
torch_DiskFile_isBigEndianCPU	torch7\\DiskFile.c	/^static int torch_DiskFile_isBigEndianCPU(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_isLittleEndianCPU	torch7\\DiskFile.c	/^static int torch_DiskFile_isLittleEndianCPU(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_littleEndianEncoding	torch7\\DiskFile.c	/^static int torch_DiskFile_littleEndianEncoding(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_longSize	torch7\\DiskFile.c	/^static int torch_DiskFile_longSize(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_nativeEndianEncoding	torch7\\DiskFile.c	/^static int torch_DiskFile_nativeEndianEncoding(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_new	torch7\\DiskFile.c	/^static int torch_DiskFile_new(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DiskFile_noBuffer	torch7\\DiskFile.c	/^static int torch_DiskFile_noBuffer(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_DoubleTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_DoubleTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_DoubleTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_DoubleTensor_abs	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_acos	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_acos(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_add	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_addmm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_addmv	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_addr	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_asin	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_asin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_atan	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_atan(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_atan2	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_atan2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_bhistc	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_bhistc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_bitand	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_bitor	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_bmm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cat	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cauchy	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cauchy(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_ceil	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_ceil(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cinv	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cinv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_clamp	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_clshift	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cmax	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cmin	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cmod	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cmul	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_conv2	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_conv3	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cos	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cos(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cosh	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cosh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cpow	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cross	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_crshift	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_csub	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_diag	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_dist	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_dist(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_div	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_dot	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_eig	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_eig(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_eq	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_equal	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_exp	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_exp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_exponential	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_exponential(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_eye	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_fill	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_floor	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_floor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_fmod	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_frac	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_frac(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_gather	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_ge	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_gels	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_gels(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_geometric	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_geqrf	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_geqrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_ger	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_gesv	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_gesv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_gt	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_histc	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_histc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_inverse	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_inverse(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_le	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_lerp	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_lerp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_linspace	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_linspace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_log	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_log(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_log1p	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_log1p(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_logNormal	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_logNormal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_logspace	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_logspace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_lshift	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_lt	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_match	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_max	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_mean	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_mean(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_median	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_min	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_mm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_mod	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_mode	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_mul	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_multinomial	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_multinomial(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_multinomialAliasSetup_	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_multinomialAliasSetup_(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_multinomialAlias_	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_multinomialAlias_(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_mv	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_ne	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_neg	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_neg(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_norm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_norm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_normal	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_normal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_numel	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_ones	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_orgqr	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_orgqr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_ormqr	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_ormqr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_potrf	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_potrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_potri	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_potri(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_potrs	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_potrs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_pow	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_pow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_prod	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_pstrf	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_pstrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_qr	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_qr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_rand	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_rand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_randn	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_randn(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_random	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_randperm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_range	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_remainder	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_renorm	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_renorm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_reshape	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_round	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_round(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_rshift	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_rsqrt	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_rsqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_scatter	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_sigmoid	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_sigmoid(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_sign	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_sin	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_sin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_sinh	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_sinh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_sort	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_sqrt	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_sqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_std	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_std(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_sum	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_svd	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_svd(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_symeig	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_symeig(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_tan	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_tan(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_tanh	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_tanh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_topk	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_trace	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_tril	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_triu	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_trtrs	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_trtrs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_trunc	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_trunc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_uniform	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_uniform(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_var	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_var(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_zero	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_DoubleTensor_zeros	bin\\torch7\\TensorMath.c	/^static int torch_DoubleTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_File__	torch7\\File.c	/^static const struct luaL_Reg torch_File__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_File_init	torch7\\File.c	/^void torch_File_init(lua_State *L)$/;"	f	typeref:typename:void
torch_File_writeString	torch7\\File.c	/^static int torch_File_writeString(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_FloatTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_FloatTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_FloatTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_FloatTensor_abs	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_acos	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_acos(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_add	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_addmm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_addmv	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_addr	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_asin	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_asin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_atan	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_atan(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_atan2	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_atan2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_bhistc	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_bhistc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_bitand	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_bitor	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_bmm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cat	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cauchy	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cauchy(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_ceil	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_ceil(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cinv	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cinv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_clamp	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_clshift	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cmax	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cmin	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cmod	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cmul	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_conv2	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_conv3	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cos	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cos(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cosh	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cosh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cpow	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cross	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_crshift	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_csub	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_diag	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_dist	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_dist(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_div	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_dot	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_eig	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_eig(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_eq	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_equal	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_exp	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_exp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_exponential	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_exponential(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_eye	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_fill	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_floor	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_floor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_fmod	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_frac	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_frac(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_gather	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_ge	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_gels	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_gels(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_geometric	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_geqrf	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_geqrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_ger	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_gesv	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_gesv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_gt	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_histc	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_histc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_inverse	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_inverse(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_le	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_lerp	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_lerp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_linspace	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_linspace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_log	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_log(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_log1p	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_log1p(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_logNormal	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_logNormal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_logspace	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_logspace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_lshift	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_lt	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_match	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_max	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_mean	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_mean(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_median	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_min	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_mm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_mod	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_mode	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_mul	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_multinomial	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_multinomial(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_multinomialAliasSetup_	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_multinomialAliasSetup_(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_multinomialAlias_	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_multinomialAlias_(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_mv	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_ne	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_neg	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_neg(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_norm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_norm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_normal	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_normal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_numel	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_ones	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_orgqr	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_orgqr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_ormqr	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_ormqr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_potrf	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_potrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_potri	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_potri(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_potrs	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_potrs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_pow	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_pow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_prod	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_pstrf	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_pstrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_qr	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_qr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_rand	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_rand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_randn	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_randn(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_random	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_randperm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_range	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_remainder	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_renorm	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_renorm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_reshape	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_round	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_round(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_rshift	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_rsqrt	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_rsqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_scatter	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_sigmoid	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_sigmoid(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_sign	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_sin	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_sin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_sinh	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_sinh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_sort	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_sqrt	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_sqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_std	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_std(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_sum	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_svd	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_svd(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_symeig	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_symeig(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_tan	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_tan(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_tanh	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_tanh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_topk	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_trace	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_tril	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_triu	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_trtrs	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_trtrs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_trunc	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_trunc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_uniform	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_uniform(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_var	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_var(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_zero	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_FloatTensor_zeros	bin\\torch7\\TensorMath.c	/^static int torch_FloatTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Generator	torch7\\lib\\TH\\THRandom.h	/^#define torch_Generator /;"	d
torch_Generator_factory	torch7\\Generator.c	/^#define torch_Generator_factory /;"	d	file:
torch_Generator_free	torch7\\Generator.c	/^int torch_Generator_free(lua_State *L)$/;"	f	typeref:typename:int
torch_Generator_init	torch7\\Generator.c	/^void torch_Generator_init(lua_State *L)$/;"	f	typeref:typename:void
torch_Generator_new	torch7\\Generator.c	/^int torch_Generator_new(lua_State *L)$/;"	f	typeref:typename:int
torch_Generator_read	torch7\\Generator.c	/^static int torch_Generator_read(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Generator_table_	torch7\\Generator.c	/^static const struct luaL_Reg torch_Generator_table_ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_Generator_write	torch7\\Generator.c	/^static int torch_Generator_write(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_HalfTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_HalfTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_HalfTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_HalfTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_IntTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_IntTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_IntTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_IntTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_IntTensor_abs	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_add	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_addmm	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_addmv	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_addr	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_bitand	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_bitor	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_bmm	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cat	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_clamp	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_clshift	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cmax	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cmin	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cmod	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cmul	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_conv2	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_conv3	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cpow	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cross	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_crshift	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_csub	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_diag	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_div	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_dot	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_eq	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_equal	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_eye	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_fill	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_fmod	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_gather	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_ge	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_geometric	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_ger	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_gt	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_le	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_lshift	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_lt	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_match	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_max	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_median	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_min	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_mm	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_mod	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_mode	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_mul	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_mv	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_ne	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_numel	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_ones	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_prod	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_random	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_randperm	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_range	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_remainder	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_reshape	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_rshift	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_scatter	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_sign	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_sort	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_sum	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_topk	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_trace	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_tril	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_triu	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_zero	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_IntTensor_zeros	bin\\torch7\\TensorMath.c	/^static int torch_IntTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_LongTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_LongTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_LongTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_LongTensor_abs	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_add	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_addmm	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_addmv	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_addr	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_bitand	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_bitor	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_bmm	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cat	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_clamp	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_clshift	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cmax	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cmin	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cmod	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cmul	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_conv2	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_conv3	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cpow	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cross	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_crshift	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_csub	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_diag	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_div	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_dot	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_eq	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_equal	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_eye	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_fill	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_fmod	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_gather	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_ge	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_geometric	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_ger	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_gt	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_le	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_lshift	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_lt	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_match	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_max	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_median	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_min	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_mm	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_mod	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_mode	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_mul	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_mv	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_ne	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_numel	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_ones	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_prod	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_random	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_randperm	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_range	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_remainder	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_reshape	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_rshift	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_scatter	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_sign	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_sort	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_sum	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_topk	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_trace	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_tril	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_triu	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_zero	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_LongTensor_zeros	bin\\torch7\\TensorMath.c	/^static int torch_LongTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_MemoryFile__	torch7\\MemoryFile.c	/^static const struct luaL_Reg torch_MemoryFile__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_MemoryFile___tostring__	torch7\\MemoryFile.c	/^static int torch_MemoryFile___tostring__(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_MemoryFile_free	torch7\\MemoryFile.c	/^static int torch_MemoryFile_free(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_MemoryFile_init	torch7\\MemoryFile.c	/^void torch_MemoryFile_init(lua_State *L)$/;"	f	typeref:typename:void
torch_MemoryFile_new	torch7\\MemoryFile.c	/^static int torch_MemoryFile_new(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_MemoryFile_storage	torch7\\MemoryFile.c	/^static int torch_MemoryFile_storage(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_PipeFile__	torch7\\PipeFile.c	/^static const struct luaL_Reg torch_PipeFile__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_PipeFile___tostring__	torch7\\PipeFile.c	/^static int torch_PipeFile___tostring__(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_PipeFile_free	torch7\\PipeFile.c	/^static int torch_PipeFile_free(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_PipeFile_init	torch7\\PipeFile.c	/^void torch_PipeFile_init(lua_State *L)$/;"	f	typeref:typename:void
torch_PipeFile_new	torch7\\PipeFile.c	/^static int torch_PipeFile_new(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_ShortTensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_ShortTensorMath_init	bin\\torch7\\TensorMath.c	/^static void torch_ShortTensorMath_init(lua_State *L)$/;"	f	typeref:typename:void	file:
torch_ShortTensor_add	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_addmm	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_addmv	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_addr	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_bitand	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_bitor	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_bmm	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cat	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_clamp	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_clshift	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cmax	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cmin	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cmod	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cmul	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_conv2	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_conv3	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cpow	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cross	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_crshift	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_csub	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_diag	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_div	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_dot	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_eq	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_equal	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_eye	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_fill	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_fmod	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_gather	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_ge	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_geometric	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_ger	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_gt	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_le	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_lshift	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_lt	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_match	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_max	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_median	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_min	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_mm	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_mod	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_mode	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_mul	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_mv	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_ne	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_numel	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_ones	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_prod	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_random	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_randperm	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_range	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_remainder	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_reshape	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_rshift	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_scatter	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_sign	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_sort	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_sum	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_topk	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_trace	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_tril	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_triu	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_zero	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ShortTensor_zeros	bin\\torch7\\TensorMath.c	/^static int torch_ShortTensor_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage	torch7\\Storage.c	/^#define torch_Storage /;"	d	file:
torch_Storage	torch7\\Tensor.c	/^#define torch_Storage /;"	d	file:
torch_Storage_	torch7\\Storage.c	/^#define torch_Storage_(/;"	d	file:
torch_Storage_	torch7\\Tensor.c	/^#define torch_Storage_(/;"	d	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(__index__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(__len__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(__newindex__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(copy)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(elementSize)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(factory)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(fill)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(free)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(new)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(read)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(resize)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(retain)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(string)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(totable)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^static int torch_Storage_(write)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Storage_	torch7\\generic\\Storage.c	/^void torch_Storage_(init)(lua_State *L)$/;"	f	typeref:typename:void
torch_Tensor	torch7\\Tensor.c	/^#define torch_Tensor /;"	d	file:
torch_Tensor	torch7\\TensorOperator.c	/^#define torch_Tensor /;"	d	file:
torch_TensorMath__	bin\\torch7\\TensorMath.c	/^static const struct luaL_Reg torch_TensorMath__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_TensorMath_init	bin\\torch7\\TensorMath.c	/^void torch_TensorMath_init(lua_State *L)$/;"	f	typeref:typename:void
torch_TensorOperator_	torch7\\TensorOperator.c	/^#define torch_TensorOperator_(/;"	d	file:
torch_TensorOperator_	torch7\\generic\\TensorOperator.c	/^static int torch_TensorOperator_(__add__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_TensorOperator_	torch7\\generic\\TensorOperator.c	/^static int torch_TensorOperator_(__div__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_TensorOperator_	torch7\\generic\\TensorOperator.c	/^static int torch_TensorOperator_(__mod__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_TensorOperator_	torch7\\generic\\TensorOperator.c	/^static int torch_TensorOperator_(__mul__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_TensorOperator_	torch7\\generic\\TensorOperator.c	/^static int torch_TensorOperator_(__sub__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_TensorOperator_	torch7\\generic\\TensorOperator.c	/^static int torch_TensorOperator_(__unm__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_TensorOperator_	torch7\\generic\\TensorOperator.c	/^void torch_TensorOperator_(init)(lua_State *L)$/;"	f	typeref:typename:void
torch_Tensor_	torch7\\Tensor.c	/^#define torch_Tensor_(/;"	d	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(__index__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(__newindex__)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(apply)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(clone)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(contiguous)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(copy)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(elementSize)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(factory)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(free)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(indexAdd)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(indexCopy)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(indexFill)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(indexSelect)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(isContiguous)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(isSameSizeAs)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(isSetTo)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(isSize)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(map)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(map2)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(maskedCopy)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(maskedFill)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(maskedSelect)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(nDimension)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(nElement)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(narrow)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(new)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(read)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(resize)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(resizeAs)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(retain)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(select)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(set)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(size)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(storage)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(storageOffset)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(stride)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(sub)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(t)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(transpose)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(unfold)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static int torch_Tensor_(write)(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static void torch_Tensor_(c_readSizeStride)(lua_State *L, int index, int allowStride, THLongStor/;"	f	typeref:typename:void	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^static void torch_Tensor_(c_readTensorStorageSizeStride)(lua_State *L, int index, int allowNone,/;"	f	typeref:typename:void	file:
torch_Tensor_	torch7\\generic\\Tensor.c	/^void torch_Tensor_(init)(lua_State *L)$/;"	f	typeref:typename:void
torch_Tensor_id	torch7\\TensorOperator.c	/^#define torch_Tensor_id /;"	d	file:
torch_Timer__	torch7\\Timer.c	/^static const struct luaL_Reg torch_Timer__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_Timer___tostring__	torch7\\Timer.c	/^static int torch_Timer___tostring__(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Timer_free	torch7\\Timer.c	/^static int torch_Timer_free(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Timer_init	torch7\\Timer.c	/^void torch_Timer_init(lua_State *L)$/;"	f	typeref:typename:void
torch_Timer_new	torch7\\Timer.c	/^static int torch_Timer_new(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Timer_realtime	torch7\\Timer.c	/^static TimeType torch_Timer_realtime()$/;"	f	typeref:typename:TimeType	file:
torch_Timer_reset	torch7\\Timer.c	/^static int torch_Timer_reset(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Timer_resume	torch7\\Timer.c	/^static int torch_Timer_resume(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Timer_stop	torch7\\Timer.c	/^static int torch_Timer_stop(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Timer_systime	torch7\\Timer.c	/^static TimeType torch_Timer_systime()$/;"	f	typeref:typename:TimeType	file:
torch_Timer_time	torch7\\Timer.c	/^static int torch_Timer_time(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_Timer_usertime	torch7\\Timer.c	/^static TimeType torch_Timer_usertime()$/;"	f	typeref:typename:TimeType	file:
torch_abs	bin\\torch7\\TensorMath.c	/^static int torch_abs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_acos	bin\\torch7\\TensorMath.c	/^static int torch_acos(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_add	bin\\torch7\\TensorMath.c	/^static int torch_add(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_addbmm	bin\\torch7\\TensorMath.c	/^static int torch_addbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_addcdiv	bin\\torch7\\TensorMath.c	/^static int torch_addcdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_addcmul	bin\\torch7\\TensorMath.c	/^static int torch_addcmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_addmm	bin\\torch7\\TensorMath.c	/^static int torch_addmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_addmv	bin\\torch7\\TensorMath.c	/^static int torch_addmv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_addr	bin\\torch7\\TensorMath.c	/^static int torch_addr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_all	bin\\torch7\\TensorMath.c	/^static int torch_all(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_any	bin\\torch7\\TensorMath.c	/^static int torch_any(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_asin	bin\\torch7\\TensorMath.c	/^static int torch_asin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_atan	bin\\torch7\\TensorMath.c	/^static int torch_atan(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_atan2	bin\\torch7\\TensorMath.c	/^static int torch_atan2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_baddbmm	bin\\torch7\\TensorMath.c	/^static int torch_baddbmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_bernoulli	bin\\torch7\\TensorMath.c	/^static int torch_bernoulli(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_bhistc	bin\\torch7\\TensorMath.c	/^static int torch_bhistc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_bitand	bin\\torch7\\TensorMath.c	/^static int torch_bitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_bitor	bin\\torch7\\TensorMath.c	/^static int torch_bitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_bitxor	bin\\torch7\\TensorMath.c	/^static int torch_bitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_bmm	bin\\torch7\\TensorMath.c	/^static int torch_bmm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cat	bin\\torch7\\TensorMath.c	/^static int torch_cat(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cauchy	bin\\torch7\\TensorMath.c	/^static int torch_cauchy(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cbitand	bin\\torch7\\TensorMath.c	/^static int torch_cbitand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cbitor	bin\\torch7\\TensorMath.c	/^static int torch_cbitor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cbitxor	bin\\torch7\\TensorMath.c	/^static int torch_cbitxor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cdiv	bin\\torch7\\TensorMath.c	/^static int torch_cdiv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ceil	bin\\torch7\\TensorMath.c	/^static int torch_ceil(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cfmod	bin\\torch7\\TensorMath.c	/^static int torch_cfmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_checklongargs	torch7\\utils.c	/^THLongStorage* torch_checklongargs(lua_State *L, int index)$/;"	f	typeref:typename:THLongStorage *
torch_cinv	bin\\torch7\\TensorMath.c	/^static int torch_cinv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_clamp	bin\\torch7\\TensorMath.c	/^static int torch_clamp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_clshift	bin\\torch7\\TensorMath.c	/^static int torch_clshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cmax	bin\\torch7\\TensorMath.c	/^static int torch_cmax(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cmin	bin\\torch7\\TensorMath.c	/^static int torch_cmin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cmod	bin\\torch7\\TensorMath.c	/^static int torch_cmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cmul	bin\\torch7\\TensorMath.c	/^static int torch_cmul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_conv2	bin\\torch7\\TensorMath.c	/^static int torch_conv2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_conv3	bin\\torch7\\TensorMath.c	/^static int torch_conv3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cos	bin\\torch7\\TensorMath.c	/^static int torch_cos(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cosh	bin\\torch7\\TensorMath.c	/^static int torch_cosh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cpow	bin\\torch7\\TensorMath.c	/^static int torch_cpow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cremainder	bin\\torch7\\TensorMath.c	/^static int torch_cremainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cross	bin\\torch7\\TensorMath.c	/^static int torch_cross(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_crshift	bin\\torch7\\TensorMath.c	/^static int torch_crshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_csub	bin\\torch7\\TensorMath.c	/^static int torch_csub(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cumprod	bin\\torch7\\TensorMath.c	/^static int torch_cumprod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_cumsum	bin\\torch7\\TensorMath.c	/^static int torch_cumsum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_diag	bin\\torch7\\TensorMath.c	/^static int torch_diag(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_dist	bin\\torch7\\TensorMath.c	/^static int torch_dist(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_div	bin\\torch7\\TensorMath.c	/^static int torch_div(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_dot	bin\\torch7\\TensorMath.c	/^static int torch_dot(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_eig	bin\\torch7\\TensorMath.c	/^static int torch_eig(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_eq	bin\\torch7\\TensorMath.c	/^static int torch_eq(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_equal	bin\\torch7\\TensorMath.c	/^static int torch_equal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_exp	bin\\torch7\\TensorMath.c	/^static int torch_exp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_exponential	bin\\torch7\\TensorMath.c	/^static int torch_exponential(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_eye	bin\\torch7\\TensorMath.c	/^static int torch_eye(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_fill	bin\\torch7\\TensorMath.c	/^static int torch_fill(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_floor	bin\\torch7\\TensorMath.c	/^static int torch_floor(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_fmod	bin\\torch7\\TensorMath.c	/^static int torch_fmod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_frac	bin\\torch7\\TensorMath.c	/^static int torch_frac(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_gather	bin\\torch7\\TensorMath.c	/^static int torch_gather(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ge	bin\\torch7\\TensorMath.c	/^static int torch_ge(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_gels	bin\\torch7\\TensorMath.c	/^static int torch_gels(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_geometric	bin\\torch7\\TensorMath.c	/^static int torch_geometric(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_geqrf	bin\\torch7\\TensorMath.c	/^static int torch_geqrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ger	bin\\torch7\\TensorMath.c	/^static int torch_ger(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_gesv	bin\\torch7\\TensorMath.c	/^static int torch_gesv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_getdefaulttensortype	torch7\\utils.c	/^const char* torch_getdefaulttensortype(lua_State *L)$/;"	f	typeref:typename:const char *
torch_getnumcores	torch7\\utils.c	/^static int torch_getnumcores(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_getnumthreads	torch7\\utils.c	/^static int torch_getnumthreads(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_gt	bin\\torch7\\TensorMath.c	/^static int torch_gt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_histc	bin\\torch7\\TensorMath.c	/^static int torch_histc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_inverse	bin\\torch7\\TensorMath.c	/^static int torch_inverse(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_isatty	torch7\\utils.c	/^static int torch_isatty(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_islongargs	torch7\\utils.c	/^int torch_islongargs(lua_State *L, int index)$/;"	f	typeref:typename:int
torch_isnonemptytable	bin\\torch7\\TensorMath.c	/^static int torch_isnonemptytable(lua_State *L, int idx)$/;"	f	typeref:typename:int	file:
torch_istensorarray	bin\\torch7\\TensorMath.c	/^static const void* torch_istensorarray(lua_State *L, int idx)$/;"	f	typeref:typename:const void *	file:
torch_istensortype	bin\\torch7\\TensorMath.c	/^static const void* torch_istensortype(lua_State *L, const char *tname)$/;"	f	typeref:typename:const void *	file:
torch_kthvalue	bin\\torch7\\TensorMath.c	/^static int torch_kthvalue(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_le	bin\\torch7\\TensorMath.c	/^static int torch_le(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_lerp	bin\\torch7\\TensorMath.c	/^static int torch_lerp(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_linspace	bin\\torch7\\TensorMath.c	/^static int torch_linspace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_log	bin\\torch7\\TensorMath.c	/^static int torch_log(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_log1p	bin\\torch7\\TensorMath.c	/^static int torch_log1p(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_logNormal	bin\\torch7\\TensorMath.c	/^static int torch_logNormal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_logspace	bin\\torch7\\TensorMath.c	/^static int torch_logspace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_longSize	torch7\\MemoryFile.c	/^static int torch_longSize(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_lshift	bin\\torch7\\TensorMath.c	/^static int torch_lshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_lt	bin\\torch7\\TensorMath.c	/^static int torch_lt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_lua_getdefaulttensortype	torch7\\utils.c	/^static int torch_lua_getdefaulttensortype(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_lua_tic	torch7\\utils.c	/^static int torch_lua_tic(lua_State* L)$/;"	f	typeref:typename:int	file:
torch_lua_toc	torch7\\utils.c	/^static int torch_lua_toc(lua_State* L)$/;"	f	typeref:typename:int	file:
torch_match	bin\\torch7\\TensorMath.c	/^static int torch_match(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_max	bin\\torch7\\TensorMath.c	/^static int torch_max(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_mean	bin\\torch7\\TensorMath.c	/^static int torch_mean(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_median	bin\\torch7\\TensorMath.c	/^static int torch_median(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_min	bin\\torch7\\TensorMath.c	/^static int torch_min(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_mm	bin\\torch7\\TensorMath.c	/^static int torch_mm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_mod	bin\\torch7\\TensorMath.c	/^static int torch_mod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_mode	bin\\torch7\\TensorMath.c	/^static int torch_mode(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_mul	bin\\torch7\\TensorMath.c	/^static int torch_mul(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_multinomial	bin\\torch7\\TensorMath.c	/^static int torch_multinomial(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_multinomialAliasSetup_	bin\\torch7\\TensorMath.c	/^static int torch_multinomialAliasSetup_(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_multinomialAlias_	bin\\torch7\\TensorMath.c	/^static int torch_multinomialAlias_(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_mv	bin\\torch7\\TensorMath.c	/^static int torch_mv(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ne	bin\\torch7\\TensorMath.c	/^static int torch_ne(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_neg	bin\\torch7\\TensorMath.c	/^static int torch_neg(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_nonzero	bin\\torch7\\TensorMath.c	/^static int torch_nonzero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_norm	bin\\torch7\\TensorMath.c	/^static int torch_norm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_normal	bin\\torch7\\TensorMath.c	/^static int torch_normal(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_numel	bin\\torch7\\TensorMath.c	/^static int torch_numel(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ones	bin\\torch7\\TensorMath.c	/^static int torch_ones(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_orgqr	bin\\torch7\\TensorMath.c	/^static int torch_orgqr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_ormqr	bin\\torch7\\TensorMath.c	/^static int torch_ormqr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_potrf	bin\\torch7\\TensorMath.c	/^static int torch_potrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_potri	bin\\torch7\\TensorMath.c	/^static int torch_potri(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_potrs	bin\\torch7\\TensorMath.c	/^static int torch_potrs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_pow	bin\\torch7\\TensorMath.c	/^static int torch_pow(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_prod	bin\\torch7\\TensorMath.c	/^static int torch_prod(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_pstrf	bin\\torch7\\TensorMath.c	/^static int torch_pstrf(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_qr	bin\\torch7\\TensorMath.c	/^static int torch_qr(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_rand	bin\\torch7\\TensorMath.c	/^static int torch_rand(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_randn	bin\\torch7\\TensorMath.c	/^static int torch_randn(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_random	bin\\torch7\\TensorMath.c	/^static int torch_random(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_random_init	bin\\torch7\\random.c	/^void torch_random_init(lua_State *L)$/;"	f	typeref:typename:void
torch_randperm	bin\\torch7\\TensorMath.c	/^static int torch_randperm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_range	bin\\torch7\\TensorMath.c	/^static int torch_range(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_remainder	bin\\torch7\\TensorMath.c	/^static int torch_remainder(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_renorm	bin\\torch7\\TensorMath.c	/^static int torch_renorm(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_reshape	bin\\torch7\\TensorMath.c	/^static int torch_reshape(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_round	bin\\torch7\\TensorMath.c	/^static int torch_round(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_rshift	bin\\torch7\\TensorMath.c	/^static int torch_rshift(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_rsqrt	bin\\torch7\\TensorMath.c	/^static int torch_rsqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_scatter	bin\\torch7\\TensorMath.c	/^static int torch_scatter(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_setheaptracking	torch7\\utils.c	/^static int torch_setheaptracking(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_setnumthreads	torch7\\utils.c	/^static int torch_setnumthreads(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_sigmoid	bin\\torch7\\TensorMath.c	/^static int torch_sigmoid(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_sign	bin\\torch7\\TensorMath.c	/^static int torch_sign(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_sin	bin\\torch7\\TensorMath.c	/^static int torch_sin(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_sinh	bin\\torch7\\TensorMath.c	/^static int torch_sinh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_sort	bin\\torch7\\TensorMath.c	/^static int torch_sort(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_sqrt	bin\\torch7\\TensorMath.c	/^static int torch_sqrt(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_squeeze	bin\\torch7\\TensorMath.c	/^static int torch_squeeze(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_std	bin\\torch7\\TensorMath.c	/^static int torch_std(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_sum	bin\\torch7\\TensorMath.c	/^static int torch_sum(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_svd	bin\\torch7\\TensorMath.c	/^static int torch_svd(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_symeig	bin\\torch7\\TensorMath.c	/^static int torch_symeig(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_tan	bin\\torch7\\TensorMath.c	/^static int torch_tan(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_tanh	bin\\torch7\\TensorMath.c	/^static int torch_tanh(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_topk	bin\\torch7\\TensorMath.c	/^static int torch_topk(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_trace	bin\\torch7\\TensorMath.c	/^static int torch_trace(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_tril	bin\\torch7\\TensorMath.c	/^static int torch_tril(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_triu	bin\\torch7\\TensorMath.c	/^static int torch_triu(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_trtrs	bin\\torch7\\TensorMath.c	/^static int torch_trtrs(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_trunc	bin\\torch7\\TensorMath.c	/^static int torch_trunc(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_uniform	bin\\torch7\\TensorMath.c	/^static int torch_uniform(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_updateerrorhandlers	torch7\\utils.c	/^static int torch_updateerrorhandlers(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_utils__	torch7\\utils.c	/^static const struct luaL_Reg torch_utils__ [] = {$/;"	v	typeref:typename:const struct luaL_Reg[]	file:
torch_utils_init	torch7\\utils.c	/^void torch_utils_init(lua_State *L)$/;"	f	typeref:typename:void
torch_var	bin\\torch7\\TensorMath.c	/^static int torch_var(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_xcorr2	bin\\torch7\\TensorMath.c	/^static int torch_xcorr2(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_xcorr3	bin\\torch7\\TensorMath.c	/^static int torch_xcorr3(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_zero	bin\\torch7\\TensorMath.c	/^static int torch_zero(lua_State *L)$/;"	f	typeref:typename:int	file:
torch_zeros	bin\\torch7\\TensorMath.c	/^static int torch_zeros(lua_State *L)$/;"	f	typeref:typename:int	file:
torchtest.RNGState	torch7\\test\\test.lua	/^function torchtest.RNGState()$/;"	f
torchtest.RNGStateAliasing	torch7\\test\\test.lua	/^function torchtest.RNGStateAliasing()$/;"	f
torchtest.abs	torch7\\test\\test.lua	/^function torchtest.abs()$/;"	f
torchtest.acos	torch7\\test\\test.lua	/^function torchtest.acos()$/;"	f
torchtest.add	torch7\\test\\test.lua	/^function torchtest.add()$/;"	f
torchtest.addbmm	torch7\\test\\test.lua	/^function torchtest.addbmm()$/;"	f
torchtest.aliasMultinomial	torch7\\test\\test.lua	/^function torchtest.aliasMultinomial()$/;"	f
torchtest.asin	torch7\\test\\test.lua	/^function torchtest.asin()$/;"	f
torchtest.atan	torch7\\test\\test.lua	/^function torchtest.atan()$/;"	f
torchtest.baddbmm	torch7\\test\\test.lua	/^function torchtest.baddbmm()$/;"	f
torchtest.bernoulli	torch7\\test\\test.lua	/^function torchtest.bernoulli()$/;"	f
torchtest.bhistc	torch7\\test\\test.lua	/^function torchtest.bhistc()$/;"	f
torchtest.bitand	torch7\\test\\test.lua	/^function torchtest.bitand()$/;"	f
torchtest.bitor	torch7\\test\\test.lua	/^function torchtest.bitor()$/;"	f
torchtest.bmm	torch7\\test\\test.lua	/^function torchtest.bmm()$/;"	f
torchtest.cat	torch7\\test\\test.lua	/^function torchtest.cat()$/;"	f
torchtest.catArray	torch7\\test\\test.lua	/^function torchtest.catArray()$/;"	f
torchtest.catNoDim	torch7\\test\\test.lua	/^function torchtest.catNoDim()$/;"	f
torchtest.cbitxor	torch7\\test\\test.lua	/^function torchtest.cbitxor()$/;"	f
torchtest.cdiv	torch7\\test\\test.lua	/^function torchtest.cdiv()$/;"	f
torchtest.ceil	torch7\\test\\test.lua	/^function torchtest.ceil()$/;"	f
torchtest.cfmod	torch7\\test\\test.lua	/^function torchtest.cfmod()$/;"	f
torchtest.chunk	torch7\\test\\test.lua	/^function torchtest.chunk()$/;"	f
torchtest.cinv	torch7\\test\\test.lua	/^function torchtest.cinv()$/;"	f
torchtest.clamp	torch7\\test\\test.lua	/^function torchtest.clamp()$/;"	f
torchtest.classInModule	torch7\\test\\test.lua	/^function torchtest.classInModule()$/;"	f
torchtest.classNoModule	torch7\\test\\test.lua	/^function torchtest.classNoModule()$/;"	f
torchtest.cmax	torch7\\test\\test.lua	/^function torchtest.cmax()$/;"	f
torchtest.cmin	torch7\\test\\test.lua	/^function torchtest.cmin()$/;"	f
torchtest.cmul	torch7\\test\\test.lua	/^function torchtest.cmul()$/;"	f
torchtest.conv2	torch7\\test\\test.lua	/^function torchtest.conv2()$/;"	f
torchtest.conv3	torch7\\test\\test.lua	/^function torchtest.conv3()$/;"	f
torchtest.conv3_conv2_eq	torch7\\test\\test.lua	/^function torchtest.conv3_conv2_eq()$/;"	f
torchtest.cos	torch7\\test\\test.lua	/^function torchtest.cos()$/;"	f
torchtest.cosh	torch7\\test\\test.lua	/^function torchtest.cosh()$/;"	f
torchtest.cpow	torch7\\test\\test.lua	/^function torchtest.cpow()  -- [res] torch.cpow([res,] tensor1, tensor2)$/;"	f
torchtest.cremainder	torch7\\test\\test.lua	/^function torchtest.cremainder()$/;"	f
torchtest.cross	torch7\\test\\test.lua	/^function torchtest.cross()$/;"	f
torchtest.csub	torch7\\test\\test.lua	/^function torchtest.csub()$/;"	f
torchtest.csub_scalar	torch7\\test\\test.lua	/^function torchtest.csub_scalar()$/;"	f
torchtest.cumprod	torch7\\test\\test.lua	/^function torchtest.cumprod()$/;"	f
torchtest.cumsum	torch7\\test\\test.lua	/^function torchtest.cumsum()$/;"	f
torchtest.diag	torch7\\test\\test.lua	/^function torchtest.diag()$/;"	f
torchtest.div	torch7\\test\\test.lua	/^function torchtest.div()$/;"	f
torchtest.dot	torch7\\test\\test.lua	/^function torchtest.dot()$/;"	f
torchtest.easy	torch7\\test\\test_half.lua	/^function torchtest.easy()$/;"	f
torchtest.eig	torch7\\test\\test.lua	/^function torchtest.eig()$/;"	f
torchtest.eig_noncontig	torch7\\test\\test.lua	/^function torchtest.eig_noncontig()$/;"	f
torchtest.eig_reuse	torch7\\test\\test.lua	/^function torchtest.eig_reuse()$/;"	f
torchtest.elementSize	torch7\\test\\test.lua	/^function torchtest.elementSize()$/;"	f
torchtest.equal	torch7\\test\\test.lua	/^function torchtest.equal()$/;"	f
torchtest.exp	torch7\\test\\test.lua	/^function torchtest.exp()$/;"	f
torchtest.expand	torch7\\test\\test.lua	/^function torchtest.expand()$/;"	f
torchtest.eye	torch7\\test\\test.lua	/^function torchtest.eye()$/;"	f
torchtest.fconv3_fconv2_eq	torch7\\test\\test.lua	/^function torchtest.fconv3_fconv2_eq()$/;"	f
torchtest.fill	torch7\\test\\test.lua	/^function torchtest.fill()$/;"	f
torchtest.floor	torch7\\test\\test.lua	/^function torchtest.floor()$/;"	f
torchtest.fmod	torch7\\test\\test.lua	/^function torchtest.fmod()$/;"	f
torchtest.frac	torch7\\test\\test.lua	/^function torchtest.frac()$/;"	f
torchtest.fxcorr3_fxcorr2_eq	torch7\\test\\test.lua	/^function torchtest.fxcorr3_fxcorr2_eq()$/;"	f
torchtest.gather	torch7\\test\\test.lua	/^function torchtest.gather()$/;"	f
torchtest.gatherMax	torch7\\test\\test.lua	/^function torchtest.gatherMax()$/;"	f
torchtest.gels_overdetermined	torch7\\test\\test.lua	/^function torchtest.gels_overdetermined()$/;"	f
torchtest.gels_reuse	torch7\\test\\test.lua	/^function torchtest.gels_reuse()$/;"	f
torchtest.gels_underdetermined	torch7\\test\\test.lua	/^function torchtest.gels_underdetermined()$/;"	f
torchtest.gels_uniquely_determined	torch7\\test\\test.lua	/^function torchtest.gels_uniquely_determined()$/;"	f
torchtest.gesv	torch7\\test\\test.lua	/^function torchtest.gesv()$/;"	f
torchtest.gesv_reuse	torch7\\test\\test.lua	/^function torchtest.gesv_reuse()$/;"	f
torchtest.histc	torch7\\test\\test.lua	/^function torchtest.histc()$/;"	f
torchtest.index	torch7\\test\\test.lua	/^function torchtest.index()$/;"	f
torchtest.indexAdd	torch7\\test\\test.lua	/^function torchtest.indexAdd()$/;"	f
torchtest.indexCopy	torch7\\test\\test.lua	/^function torchtest.indexCopy()$/;"	f
torchtest.inverse	torch7\\test\\test.lua	/^function torchtest.inverse()$/;"	f
torchtest.isSameSizeAs	torch7\\test\\test.lua	/^function torchtest.isSameSizeAs()$/;"	f
torchtest.isSetTo	torch7\\test\\test.lua	/^function torchtest.isSetTo()$/;"	f
torchtest.isSize	torch7\\test\\test.lua	/^function torchtest.isSize()$/;"	f
torchtest.isStorage	torch7\\test\\test.lua	/^function torchtest.isStorage()$/;"	f
torchtest.isTensor	torch7\\test\\test.lua	/^function torchtest.isTensor()$/;"	f
torchtest.isTypeOfInheritance	torch7\\test\\test.lua	/^function torchtest.isTypeOfInheritance()$/;"	f
torchtest.isTypeOfPartial	torch7\\test\\test.lua	/^function torchtest.isTypeOfPartial()$/;"	f
torchtest.isTypeOfPattern	torch7\\test\\test.lua	/^function torchtest.isTypeOfPattern()$/;"	f
torchtest.kthvalue	torch7\\test\\test.lua	/^function torchtest.kthvalue()$/;"	f
torchtest.lerp	torch7\\test\\test.lua	/^function torchtest.lerp()$/;"	f
torchtest.linspace	torch7\\test\\test.lua	/^function torchtest.linspace()$/;"	f
torchtest.log	torch7\\test\\test.lua	/^function torchtest.log()$/;"	f
torchtest.logNormal	torch7\\test\\test.lua	/^function torchtest.logNormal()$/;"	f
torchtest.logical	torch7\\test\\test.lua	/^function torchtest.logical()$/;"	f
torchtest.logspace	torch7\\test\\test.lua	/^function torchtest.logspace()$/;"	f
torchtest.lshift	torch7\\test\\test.lua	/^function torchtest.lshift()$/;"	f
torchtest.maskedCopy	torch7\\test\\test.lua	/^function torchtest.maskedCopy()$/;"	f
torchtest.maskedFill	torch7\\test\\test.lua	/^function torchtest.maskedFill()$/;"	f
torchtest.maskedSelect	torch7\\test\\test.lua	/^function torchtest.maskedSelect()$/;"	f
torchtest.max	torch7\\test\\test.lua	/^function torchtest.max()  -- torch.max([resval, resind,] x [,dim])$/;"	f
torchtest.median	torch7\\test\\test.lua	/^function torchtest.median()$/;"	f
torchtest.min	torch7\\test\\test.lua	/^function torchtest.min()  -- torch.min([resval, resind,] x [,dim])$/;"	f
torchtest.mm	torch7\\test\\test.lua	/^function torchtest.mm()$/;"	f
torchtest.mode	torch7\\test\\test.lua	/^function torchtest.mode()$/;"	f
torchtest.mul	torch7\\test\\test.lua	/^function torchtest.mul()$/;"	f
torchtest.multinomialvector	torch7\\test\\test.lua	/^function torchtest.multinomialvector()$/;"	f
torchtest.multinomialwithoutreplacement	torch7\\test\\test.lua	/^function torchtest.multinomialwithoutreplacement()$/;"	f
torchtest.multinomialwithreplacement	torch7\\test\\test.lua	/^function torchtest.multinomialwithreplacement()$/;"	f
torchtest.mv	torch7\\test\\test.lua	/^function torchtest.mv()$/;"	f
torchtest.narrowSub	torch7\\test\\test_half.lua	/^function torchtest.narrowSub()$/;"	f
torchtest.neg	torch7\\test\\test.lua	/^function torchtest.neg()$/;"	f
torchtest.newIndex	torch7\\test\\test.lua	/^function torchtest.newIndex()$/;"	f
torchtest.nonzero	torch7\\test\\test.lua	/^function torchtest.nonzero()$/;"	f
torchtest.ones	torch7\\test\\test.lua	/^function torchtest.ones()$/;"	f
torchtest.permute	torch7\\test\\test.lua	/^function torchtest.permute()$/;"	f
torchtest.potri	torch7\\test\\test.lua	/^function torchtest.potri()$/;"	f
torchtest.potrs	torch7\\test\\test.lua	/^function torchtest.potrs()$/;"	f
torchtest.pow	torch7\\test\\test.lua	/^function torchtest.pow() -- [res] torch.pow([res,] x)$/;"	f
torchtest.prod	torch7\\test\\test.lua	/^function torchtest.prod()$/;"	f
torchtest.pstrf	torch7\\test\\test.lua	/^function torchtest.pstrf()$/;"	f
torchtest.rand	torch7\\test\\test.lua	/^function torchtest.rand()$/;"	f
torchtest.randn	torch7\\test\\test.lua	/^function torchtest.randn()$/;"	f
torchtest.randperm	torch7\\test\\test.lua	/^function torchtest.randperm()$/;"	f
torchtest.range	torch7\\test\\test.lua	/^function torchtest.range()$/;"	f
torchtest.rangedouble	torch7\\test\\test.lua	/^function torchtest.rangedouble()$/;"	f
torchtest.rangeequalbounds	torch7\\test\\test.lua	/^function torchtest.rangeequalbounds()$/;"	f
torchtest.rangefloat	torch7\\test\\test.lua	/^function torchtest.rangefloat()$/;"	f
torchtest.rangenegative	torch7\\test\\test.lua	/^function torchtest.rangenegative()$/;"	f
torchtest.remainder	torch7\\test\\test.lua	/^function torchtest.remainder()$/;"	f
torchtest.renorm	torch7\\test\\test.lua	/^function torchtest.renorm()$/;"	f
torchtest.repeatTensor	torch7\\test\\test.lua	/^function torchtest.repeatTensor()$/;"	f
torchtest.reshape	torch7\\test\\test.lua	/^function torchtest.reshape()$/;"	f
torchtest.round	torch7\\test\\test.lua	/^function torchtest.round()$/;"	f
torchtest.rshift	torch7\\test\\test.lua	/^function torchtest.rshift()$/;"	f
torchtest.rsqrt	torch7\\test\\test.lua	/^function torchtest.rsqrt()$/;"	f
torchtest.scatter	torch7\\test\\test.lua	/^function torchtest.scatter()$/;"	f
torchtest.scatterFill	torch7\\test\\test.lua	/^function torchtest.scatterFill()$/;"	f
torchtest.selectClone	torch7\\test\\test_half.lua	/^function torchtest.selectClone()$/;"	f
torchtest.serialize	torch7\\test\\test.lua	/^function torchtest.serialize()$/;"	f
torchtest.serializeGenerator	torch7\\test\\test.lua	/^function torchtest.serializeGenerator()$/;"	f
torchtest.sigmoid	torch7\\test\\test.lua	/^function torchtest.sigmoid()$/;"	f
torchtest.sin	torch7\\test\\test.lua	/^function torchtest.sin()$/;"	f
torchtest.sin_2	torch7\\test\\test.lua	/^function torchtest.sin_2()$/;"	f
torchtest.sinh	torch7\\test\\test.lua	/^function torchtest.sinh()$/;"	f
torchtest.sortAscending	torch7\\test\\test.lua	/^function torchtest.sortAscending()$/;"	f
torchtest.sortDescending	torch7\\test\\test.lua	/^function torchtest.sortDescending()$/;"	f
torchtest.split	torch7\\test\\test.lua	/^function torchtest.split()$/;"	f
torchtest.sqrt	torch7\\test\\test.lua	/^function torchtest.sqrt()$/;"	f
torchtest.storageview	torch7\\test\\test.lua	/^function torchtest.storageview()$/;"	f
torchtest.sum	torch7\\test\\test.lua	/^function torchtest.sum()$/;"	f
torchtest.svd	torch7\\test\\test.lua	/^function torchtest.svd()$/;"	f
torchtest.svd_noncontig	torch7\\test\\test.lua	/^function torchtest.svd_noncontig()$/;"	f
torchtest.svd_reuse	torch7\\test\\test.lua	/^function torchtest.svd_reuse()$/;"	f
torchtest.symeig_noncontig	torch7\\test\\test.lua	/^function  torchtest.symeig_noncontig()$/;"	f
torchtest.table	torch7\\test\\test.lua	/^function torchtest.table()$/;"	f
torchtest.tan	torch7\\test\\test.lua	/^function torchtest.tan()$/;"	f
torchtest.tanh	torch7\\test\\test.lua	/^function torchtest.tanh()$/;"	f
torchtest.testBoxMullerState	torch7\\test\\test.lua	/^function torchtest.testBoxMullerState()$/;"	f
torchtest.testCholesky	torch7\\test\\test.lua	/^function torchtest.testCholesky()$/;"	f
torchtest.testNumel	torch7\\test\\test.lua	/^function torchtest.testNumel()$/;"	f
torchtest.test_symeig	torch7\\test\\test.lua	/^function torchtest.test_symeig()$/;"	f
torchtest.testheaptracking	torch7\\test\\test.lua	/^function torchtest.testheaptracking()$/;"	f
torchtest.topK	torch7\\test\\test.lua	/^function torchtest.topK()$/;"	f
torchtest.tril	torch7\\test\\test.lua	/^function torchtest.tril()$/;"	f
torchtest.triu	torch7\\test\\test.lua	/^function torchtest.triu()$/;"	f
torchtest.trtrs	torch7\\test\\test.lua	/^function torchtest.trtrs()$/;"	f
torchtest.trtrs_reuse	torch7\\test\\test.lua	/^function torchtest.trtrs_reuse()$/;"	f
torchtest.trunc	torch7\\test\\test.lua	/^function torchtest.trunc()$/;"	f
torchtest.type	torch7\\test\\test.lua	/^function torchtest.type()$/;"	f
torchtest.view	torch7\\test\\test.lua	/^function torchtest.view()$/;"	f
torchtest.xcorr3_xcorr2_eq	torch7\\test\\test.lua	/^function torchtest.xcorr3_xcorr2_eq()$/;"	f
torchtest.zeros	torch7\\test\\test.lua	/^function torchtest.zeros()$/;"	f
torchtest_chunk	torch7\\test\\test.lua	/^function torchtest_chunk(func)$/;"	f
torchtest_expand	torch7\\test\\test.lua	/^function torchtest_expand(func)$/;"	f
torchtest_isSameSizeAs	torch7\\test\\test.lua	/^function torchtest_isSameSizeAs(func)$/;"	f
torchtest_isSetTo	torch7\\test\\test.lua	/^function torchtest_isSetTo(func)$/;"	f
torchtest_isSize	torch7\\test\\test.lua	/^function torchtest_isSize(func)$/;"	f
torchtest_isStorage	torch7\\test\\test.lua	/^function torchtest_isStorage(func)$/;"	f
torchtest_isTensor	torch7\\test\\test.lua	/^function torchtest_isTensor(func)$/;"	f
torchtest_permute	torch7\\test\\test.lua	/^function torchtest_permute(func)$/;"	f
torchtest_repeatTensor	torch7\\test\\test.lua	/^function torchtest_repeatTensor(func, mean)$/;"	f
torchtest_split	torch7\\test\\test.lua	/^function torchtest_split(func)$/;"	f
torchtest_totable	torch7\\test\\test.lua	/^function torchtest_totable(func, storageType)$/;"	f
torchtest_view	torch7\\test\\test.lua	/^function torchtest_view(func)$/;"	f
tostore	lua\\lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
tostring	lua\\lvm.c	/^#define tostring(/;"	d	file:
tostring()	cwrap\\doc\\highlevelinterface.md	/^### tostring() ###$/;"	S
tostringbuff	lua\\lobject.c	/^static int tostringbuff (TValue *obj, char *buff) {$/;"	f	typeref:typename:int	file:
total	lua\\ltests.h	/^  unsigned long total;$/;"	m	struct:Memcontrol	typeref:typename:unsigned long
totalbytes	lua\\lstate.h	/^  l_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State	typeref:typename:l_mem
totalrealtime	torch7\\Timer.c	/^    TimeType totalrealtime;$/;"	m	struct:_Timer	typeref:typename:TimeType	file:
totalsystime	torch7\\Timer.c	/^    TimeType totalsystime;$/;"	m	struct:_Timer	typeref:typename:TimeType	file:
totalusertime	torch7\\Timer.c	/^    TimeType totalusertime;$/;"	m	struct:_Timer	typeref:typename:TimeType	file:
touserdata	lua\\lapi.c	/^static void *touserdata (const TValue *o) {$/;"	f	typeref:typename:void *	file:
tpack	lua\\ltablib.c	/^static int tpack (lua_State *L) {$/;"	f	typeref:typename:int	file:
tpanic	lua\\ltests.c	/^static int tpanic (lua_State *L) {$/;"	f	typeref:typename:int	file:
train_step	example\\cifar_resnet.py	/^train_step = tf.train.AdamOptimizer(0.0005).minimize(cross_entropy)$/;"	v
train_step	example\\mnist_lenet.py	/^train_step = tf.train.AdamOptimizer(0.005).minimize(cross_entropy)$/;"	v
train_step	example\\mnist_mlp_auto_shape_inference.py	/^train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)$/;"	v
train_step	example\\mnist_softmax.py	/^train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)$/;"	v
train_step	example\\mnist_softmax_minimum.py	/^train_step = tf.assign(W, W - learning_rate * W_grad)$/;"	v
transferinfo	lua\\lstate.h	/^    } transferinfo;$/;"	m	union:CallInfo::__anonad48b566040a	typeref:struct:CallInfo::__anonad48b566040a::__anonad48b5660508
trap	lua\\lstate.h	/^      l_signalT trap;$/;"	m	struct:CallInfo::__anonad48b566010a::__anonad48b5660208	typeref:typename:l_signalT
traverseCclosure	lua\\lgc.c	/^static int traverseCclosure (global_State *g, CClosure *cl) {$/;"	f	typeref:typename:int	file:
traverseLclosure	lua\\lgc.c	/^static int traverseLclosure (global_State *g, LClosure *cl) {$/;"	f	typeref:typename:int	file:
traverseephemeron	lua\\lgc.c	/^static int traverseephemeron (global_State *g, Table *h) {$/;"	f	typeref:typename:int	file:
traverseproto	lua\\lgc.c	/^static int traverseproto (global_State *g, Proto *f) {$/;"	f	typeref:typename:int	file:
traversestrongtable	lua\\lgc.c	/^static void traversestrongtable (global_State *g, Table *h) {$/;"	f	typeref:typename:void	file:
traversetable	lua\\lgc.c	/^static lu_mem traversetable (global_State *g, Table *h) {$/;"	f	typeref:typename:lu_mem	file:
traversethread	lua\\lgc.c	/^static int traversethread (global_State *g, lua_State *th) {$/;"	f	typeref:typename:int	file:
traverseudata	lua\\lgc.c	/^static int traverseudata (global_State *g, Udata *u) {$/;"	f	typeref:typename:int	file:
traverseweakvalue	lua\\lgc.c	/^static void traverseweakvalue (global_State *g, Table *h) {$/;"	f	typeref:typename:void	file:
treatstackoption	lua\\ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	typeref:typename:void	file:
tree	dmlc-core\\test\\registry_test.cc	/^namespace tree {$/;"	n	file:
tref	lua\\ltests.c	/^static int tref (lua_State *L) {$/;"	f	typeref:typename:int	file:
tremove	lua\\ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	typeref:typename:int	file:
trim32	lua\\lmathlib.c	/^#define trim32(/;"	d	file:
trim64	lua\\lmathlib.c	/^#define trim64(/;"	d	file:
try	lua\\testes\\attrib.lua	/^local try = function (p, n, r, ext)$/;"	f
tryagain	lua\\lmem.c	/^static void *tryagain (lua_State *L, void *block,$/;"	f	typeref:typename:void *	file:
trylocale	lua\\testes\\strings.lua	/^  local function trylocale (w)$/;"	f
trymt	lua\\lstrlib.c	/^static void trymt (lua_State *L, const char *mtname) {$/;"	f	typeref:typename:void	file:
trymt	lua\\testes\\bwcoercion.lua	/^local function trymt (x, y, mtname)$/;"	f
trynewtbcupval	lua\\lfunc.c	/^static void trynewtbcupval (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
ts	lua\\llex.h	/^  TString *ts;$/;"	m	union:__anon59ab1eae010a	typeref:typename:TString *
ts	lua\\lstate.h	/^  struct TString ts;$/;"	m	union:GCUnion	typeref:struct:TString
tsslen	lua\\lobject.h	/^#define tsslen(/;"	d
tsvalue	lua\\lobject.h	/^#define tsvalue(/;"	d
tsvalueraw	lua\\lobject.h	/^#define tsvalueraw(/;"	d
tt	lua\\testes\\sort.lua	/^tt = {__lt = function (a,b) return a.val < b.val end}$/;"	f
tt.__gc	lua\\testes\\gc.lua	/^  tt.__gc = function (o)$/;"	f
ttisCclosure	lua\\lobject.h	/^#define ttisCclosure(/;"	d
ttisLclosure	lua\\lobject.h	/^#define ttisLclosure(/;"	d
ttisboolean	lua\\lobject.h	/^#define ttisboolean(/;"	d
ttisclosure	lua\\lobject.h	/^#define ttisclosure(/;"	d
ttisfloat	lua\\lobject.h	/^#define ttisfloat(/;"	d
ttisfulluserdata	lua\\lobject.h	/^#define ttisfulluserdata(/;"	d
ttisfunction	lua\\lobject.h	/^#define ttisfunction(/;"	d
ttisinteger	lua\\lobject.h	/^#define ttisinteger(/;"	d
ttislcf	lua\\lobject.h	/^#define ttislcf(/;"	d
ttislightuserdata	lua\\lobject.h	/^#define ttislightuserdata(/;"	d
ttislngstring	lua\\lobject.h	/^#define ttislngstring(/;"	d
ttisnil	lua\\lobject.h	/^#define ttisnil(/;"	d
ttisnumber	lua\\lobject.h	/^#define ttisnumber(/;"	d
ttisshrstring	lua\\lobject.h	/^#define ttisshrstring(/;"	d
ttisstrictnil	lua\\lobject.h	/^#define ttisstrictnil(/;"	d
ttisstring	lua\\lobject.h	/^#define ttisstring(/;"	d
ttistable	lua\\lobject.h	/^#define ttistable(/;"	d
ttisthread	lua\\lobject.h	/^#define ttisthread(/;"	d
ttype	lua\\lobject.h	/^#define ttype(/;"	d
ttypename	lua\\ltm.h	/^#define ttypename(/;"	d
ttypetag	lua\\lobject.h	/^#define ttypetag(/;"	d
tunpack	lua\\ltablib.c	/^static int tunpack (lua_State *L) {$/;"	f	typeref:typename:int	file:
twoto	lua\\lobject.h	/^#define twoto(/;"	d
twups	lua\\lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:global_State	typeref:struct:lua_State *
twups	lua\\lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:lua_State	typeref:struct:lua_State *
txtToken	lua\\llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	typeref:typename:const char *	file:
type	dmlc-core\\include\\dmlc\\any.h	/^inline const std::type_info& any::type() const {$/;"	f	class:dmlc::any	typeref:typename:const std::type_info &
type	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string type;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
type	dmlc-core\\src\\io\\filesys.h	/^  FileType type;$/;"	m	struct:dmlc::io::FileInfo	typeref:typename:FileType
type	lua\\ltests.c	/^    int type;$/;"	m	struct:Header::__anond88b85530108	typeref:typename:int	file:
type	nnvm\\include\\dmlc\\any.h	/^inline const std::type_info& any::type() const {$/;"	f	class:dmlc::any	typeref:typename:const std::type_info &
type	nnvm\\include\\dmlc\\parameter.h	/^  std::string type;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
type_	dmlc-core\\include\\dmlc\\any.h	/^  Type type_;$/;"	m	class:dmlc::any::TypeInfo	typeref:typename:Type
type_	dmlc-core\\include\\dmlc\\any.h	/^  const Type* type_{nullptr};$/;"	m	class:dmlc::any	typeref:typename:const Type *
type_	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string type_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:std::string
type_	nnvm\\include\\dmlc\\any.h	/^  Type type_;$/;"	m	class:dmlc::any::TypeInfo	typeref:typename:Type
type_	nnvm\\include\\dmlc\\any.h	/^  const Type* type_{nullptr};$/;"	m	class:dmlc::any	typeref:typename:const Type *
type_	nnvm\\include\\dmlc\\parameter.h	/^  std::string type_;$/;"	m	class:dmlc::parameter::FieldAccessEntry	typeref:typename:std::string
type_info_str	dmlc-core\\include\\dmlc\\parameter.h	/^  std::string type_info_str;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
type_info_str	nnvm\\include\\dmlc\\parameter.h	/^  std::string type_info_str;$/;"	m	struct:dmlc::ParamFieldInfo	typeref:typename:std::string
type_map_	dmlc-core\\include\\dmlc\\json.h	/^  std::unordered_map<std::string, Entry> type_map_;$/;"	m	class:dmlc::json::AnyJSONManager	typeref:typename:std::unordered_map<std::string,Entry>
type_map_	nnvm\\include\\dmlc\\json.h	/^  std::unordered_map<std::string, Entry> type_map_;$/;"	m	class:dmlc::json::AnyJSONManager	typeref:typename:std::unordered_map<std::string,Entry>
type_name	dmlc-core\\include\\dmlc\\type_traits.h	/^inline const char* type_name() {$/;"	f	namespace:dmlc	typeref:typename:const char *
type_name	nnvm\\include\\dmlc\\type_traits.h	/^inline const char* type_name() {$/;"	f	namespace:dmlc	typeref:typename:const char *
type_name_	dmlc-core\\include\\dmlc\\json.h	/^  std::unordered_map<std::type_index, std::string> type_name_;$/;"	m	class:dmlc::json::AnyJSONManager	typeref:typename:std::unordered_map<std::type_index,std::string>
type_name_	nnvm\\include\\dmlc\\json.h	/^  std::unordered_map<std::type_index, std::string> type_name_;$/;"	m	class:dmlc::json::AnyJSONManager	typeref:typename:std::unordered_map<std::type_index,std::string>
u	lua\\lobject.h	/^  } u;$/;"	m	struct:TString	typeref:union:TString::__anon4faed11c010a
u	lua\\lobject.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon4faed11c030a
u	lua\\lobject.h	/^  } u;$/;"	m	union:Node	typeref:struct:Node::NodeKey
u	lua\\lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon029e1592020a
u	lua\\lstate.h	/^  struct Udata u;$/;"	m	union:GCUnion	typeref:struct:Udata
u	lua\\lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anonad48b566010a
u	lua\\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	struct:cD	typeref:union:cD::__anon7d795870030a	file:
u	lua\\testes\\gc.lua	/^  repeat local i; u = function () return i end until finish$/;"	f
u	lua\\testes\\gc.lua	/^  repeat local i; u = {function () return i end} until finish$/;"	f
u	lua\\testes\\gc.lua	/^  u = setmetatable({}, {__gc = function () error "@expected error" end})$/;"	f
u	lua\\testes\\gc.lua	/^  u = setmetatable({}, {__gc = function () finish = true end})$/;"	f
u	lua\\testes\\gc.lua	/^  u = {setmetatable({}, {__gc = function () finish = true end})}$/;"	f
u2	lua\\lstate.h	/^  } u2;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anonad48b566040a
u_posrelat	lua\\lutf8lib.c	/^static lua_Integer u_posrelat (lua_Integer pos, size_t len) {$/;"	f	typeref:typename:lua_Integer	file:
uchar	lua\\lstrlib.c	/^#define uchar(/;"	d	file:
ud	lua\\lstate.h	/^  void *ud;         \/* auxiliary data to 'frealloc' *\/$/;"	m	struct:global_State	typeref:typename:void *
ud_warn	lua\\lstate.h	/^  void *ud_warn;         \/* auxiliary data to 'warnf' *\/$/;"	m	struct:global_State	typeref:typename:void *
udata2finalize	lua\\lgc.c	/^static GCObject *udata2finalize (global_State *g) {$/;"	f	typeref:typename:GCObject *	file:
udatamemoffset	lua\\lobject.h	/^#define udatamemoffset(/;"	d
udatatypename	lua\\ltm.c	/^static const char udatatypename[] = "userdata";$/;"	v	typeref:typename:const char[]	file:
udataval	lua\\ltests.c	/^static int udataval (lua_State *L) {$/;"	f	typeref:typename:int	file:
uint16_t	dmlc-core\\include\\dmlc\\base.h	/^typedef unsigned __int16 uint16_t;$/;"	t	typeref:typename:unsigned __int16
uint16_t	nnvm\\include\\dmlc\\base.h	/^typedef unsigned __int16 uint16_t;$/;"	t	typeref:typename:unsigned __int16
uint32_t	dmlc-core\\include\\dmlc\\base.h	/^typedef unsigned __int32 uint32_t;$/;"	t	typeref:typename:unsigned __int32
uint32_t	nnvm\\include\\dmlc\\base.h	/^typedef unsigned __int32 uint32_t;$/;"	t	typeref:typename:unsigned __int32
uint64_t	dmlc-core\\include\\dmlc\\base.h	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint64_t	dmlc-core\\include\\dmlc\\io.h	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint64_t	nnvm\\include\\dmlc\\base.h	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint8_t	dmlc-core\\include\\dmlc\\base.h	/^typedef unsigned char uint8_t;$/;"	t	typeref:typename:unsigned char
uint8_t	nnvm\\include\\dmlc\\base.h	/^typedef unsigned char uint8_t;$/;"	t	typeref:typename:unsigned char
undefgoto	lua\\lparser.c	/^static l_noret undefgoto (LexState *ls, Labeldesc *gt) {$/;"	f	typeref:typename:l_noret	file:
underflow	dmlc-core\\include\\dmlc\\io.h	/^inline int istream::InBuf::underflow() {$/;"	f	class:dmlc::istream::InBuf	typeref:typename:int
unique	dmlc-core\\include\\dmlc\\memory.h	/^  inline bool unique() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:bool
unique	nnvm\\include\\dmlc\\memory.h	/^  inline bool unique() const {$/;"	f	struct:dmlc::ThreadlocalSharedPtr	typeref:typename:bool
unknown_filename	torch7\\lib\\TH\\THAllocator.c	/^char * unknown_filename = "filename not specified";$/;"	v	typeref:typename:char *
unlikely	lua\\llimits.h	/^#define unlikely(/;"	d
unlock	dmlc-core\\include\\dmlc\\concurrency.h	/^inline void Spinlock::unlock() noexcept(true) {$/;"	f	class:dmlc::Spinlock	typeref:typename:void
unlpack	lua\\testes\\calls.lua	/^function unlpack (t, i)$/;"	f
unmakemask	lua\\ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	typeref:typename:char *	file:
unpackint	lua\\lstrlib.c	/^static lua_Integer unpackint (lua_State *L, const char *str,$/;"	f	typeref:typename:lua_Integer	file:
unref	lua\\ltests.c	/^static int unref (lua_State *L) {$/;"	f	typeref:typename:int	file:
unroll	lua\\ldo.c	/^static void unroll (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
unzip_archives	dmlc-core\\tracker\\dmlc_tracker\\launcher.py	/^def unzip_archives(ar_list, env):$/;"	f
updatebase	lua\\lvm.c	/^#define updatebase(/;"	d	file:
updatestack	lua\\lvm.c	/^#define updatestack(/;"	d	file:
updatetrap	lua\\lvm.c	/^#define updatetrap(/;"	d	file:
upisopen	lua\\lfunc.h	/^#define upisopen(/;"	d
uplevel	lua\\lfunc.h	/^#define uplevel(/;"	d
upload_id_	dmlc-core\\src\\io\\s3_filesys.cc	/^  std::string upload_id_;$/;"	m	class:dmlc::io::s3::WriteStream	typeref:typename:std::string	file:
upv	lua\\lstate.h	/^  struct UpVal upv;$/;"	m	union:GCUnion	typeref:struct:UpVal
upval	lua\\lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
upvalname	lua\\ldebug.c	/^static const char *upvalname (const Proto *p, int uv) {$/;"	f	typeref:typename:const char *	file:
upvals	lua\\lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure	typeref:typename:UpVal * [1]
upvalue	lua\\lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure	typeref:typename:TValue[1]
upvalue	lua\\ltests.c	/^static int upvalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
upvalues	lua\\lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:Proto	typeref:typename:Upvaldesc *
uri	dmlc-core\\src\\io\\uri_spec.h	/^  std::string uri;$/;"	m	class:dmlc::io::URISpec	typeref:typename:std::string
use_count	src\\session.cc	/^    size_t use_count{0};$/;"	m	struct:tinyflow::TorchSession::ExecEntry	typeref:typename:size_t	file:
use_count_	dmlc-core\\include\\dmlc\\memory.h	/^    unsigned use_count_;$/;"	m	struct:dmlc::ThreadlocalSharedPtr::RefBlock	typeref:typename:unsigned
use_count_	nnvm\\include\\dmlc\\memory.h	/^    unsigned use_count_;$/;"	m	struct:dmlc::ThreadlocalSharedPtr::RefBlock	typeref:typename:unsigned
use_stdin_	dmlc-core\\src\\io\\single_file_split.h	/^  bool use_stdin_;$/;"	m	class:dmlc::io::SingleFileSplit	typeref:typename:bool
use_stdio_	dmlc-core\\src\\io\\local_filesys.cc	/^  bool use_stdio_;$/;"	m	class:dmlc::io::FileStream	typeref:typename:bool	file:
userName	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private String userName = "";$/;"	f	class:ApplicationMaster	file:
userName	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^    private String userName = "";$/;"	f	class:Client	file:
utf8_decode	lua\\lutf8lib.c	/^static const char *utf8_decode (const char *s, utfint *val, int strict) {$/;"	f	typeref:typename:const char *	file:
utf8esc	lua\\llex.c	/^static void utf8esc (LexState *ls) {$/;"	f	typeref:typename:void	file:
utfchar	lua\\lutf8lib.c	/^static int utfchar (lua_State *L) {$/;"	f	typeref:typename:int	file:
utfint	lua\\lutf8lib.c	/^typedef	unsigned int utfint;$/;"	t	typeref:typename:unsigned int	file:
utfint	lua\\lutf8lib.c	/^typedef unsigned long utfint;$/;"	t	typeref:typename:unsigned long	file:
utflen	lua\\lutf8lib.c	/^static int utflen (lua_State *L) {$/;"	f	typeref:typename:int	file:
uuid	torch7\\test\\test_writeObject.lua	/^   local function uuid()$/;"	f
uv	lua\\lobject.h	/^  TValue uv;$/;"	m	union:UValue	typeref:typename:TValue
uv	lua\\lobject.h	/^  UValue uv[1];  \/* user values *\/$/;"	m	struct:Udata	typeref:typename:UValue[1]
uvalue	lua\\lobject.h	/^#define uvalue(/;"	d
v	lua\\lobject.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal	typeref:typename:TValue *
v	lua\\lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	typeref:typename:expdesc	file:
v	lua\\lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	typeref:typename:expdesc	file:
vRB	lua\\lvm.c	/^#define vRB(/;"	d	file:
vRC	lua\\lvm.c	/^#define vRC(/;"	d	file:
val	dmlc-core\\include\\dmlc\\config.h	/^    std::vector<std::string> val;$/;"	m	struct:dmlc::Config::ConfigValue	typeref:typename:std::vector<std::string>
val	lua\\lobject.h	/^  TValue val;$/;"	m	union:StackValue	typeref:typename:TValue
val	lua\\testes\\coroutine.lua	/^local function val(x)$/;"	f
val_	lua\\lobject.h	/^#define val_(/;"	d
val_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ASTPtr val_;$/;"	m	class:nnvm::fusion::AssignAST	typeref:typename:ASTPtr
val_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  float val_;$/;"	m	class:nnvm::fusion::FloatAST	typeref:typename:float
val_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  int val_;$/;"	m	class:nnvm::fusion::IntAST	typeref:typename:int
validop	lua\\lcode.c	/^static int validop (int op, TValue *v1, TValue *v2) {$/;"	f	typeref:typename:int	file:
valiswhite	lua\\lgc.c	/^#define valiswhite(/;"	d	file:
valraw	lua\\lobject.h	/^#define valraw(/;"	d
value	dmlc-core\\include\\dmlc\\any.h	/^    static const bool value = alignof(T) <= kAlign && sizeof(T) <= kStack;$/;"	m	struct:dmlc::any::data_on_stack	typeref:typename:const bool
value	dmlc-core\\include\\dmlc\\data.h	/^  const real_t *value;$/;"	m	class:dmlc::Row	typeref:typename:const real_t *
value	dmlc-core\\include\\dmlc\\data.h	/^  const real_t *value;$/;"	m	struct:dmlc::RowBlock	typeref:typename:const real_t *
value	dmlc-core\\include\\dmlc\\type_traits.h	/^  static const bool value = false;$/;"	m	struct:dmlc::has_saveload	typeref:typename:const bool
value	dmlc-core\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_arithmetic<T>::value;$/;"	m	struct:dmlc::is_arithmetic	typeref:typename:const bool
value	dmlc-core\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_floating_point<T>::value;$/;"	m	struct:dmlc::is_floating_point	typeref:typename:const bool
value	dmlc-core\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_integral<T>::value;$/;"	m	struct:dmlc::is_integral	typeref:typename:const bool
value	dmlc-core\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_pod<T>::value;$/;"	m	struct:dmlc::is_pod	typeref:typename:const bool
value	dmlc-core\\src\\data\\row_block.h	/^  std::vector<real_t> value;$/;"	m	struct:dmlc::data::RowBlockContainer	typeref:typename:std::vector<real_t>
value	lua\\lobject.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon4faed11c030a	typeref:typename:TValue
value	nnvm\\include\\dmlc\\any.h	/^    static const bool value = alignof(T) <= kAlign && sizeof(T) <= kStack;$/;"	m	struct:dmlc::any::data_on_stack	typeref:typename:const bool
value	nnvm\\include\\dmlc\\type_traits.h	/^  static const bool value = false;$/;"	m	struct:dmlc::has_saveload	typeref:typename:const bool
value	nnvm\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_arithmetic<T>::value;$/;"	m	struct:dmlc::is_arithmetic	typeref:typename:const bool
value	nnvm\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_floating_point<T>::value;$/;"	m	struct:dmlc::is_floating_point	typeref:typename:const bool
value	nnvm\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_integral<T>::value;$/;"	m	struct:dmlc::is_integral	typeref:typename:const bool
value	nnvm\\include\\dmlc\\type_traits.h	/^  static const bool value = std::is_pod<T>::value;$/;"	m	struct:dmlc::is_pod	typeref:typename:const bool
value_	dmlc-core\\test\\unittest\\unittest_json.cc	/^  int value_;$/;"	m	class:json::MyClass	typeref:typename:int	file:
value_type	dmlc-core\\include\\dmlc\\memory.h	/^  typedef T value_type;$/;"	t	class:dmlc::ThreadlocalAllocator	typeref:typename:T
value_type	nnvm\\include\\dmlc\\memory.h	/^  typedef T value_type;$/;"	t	class:dmlc::ThreadlocalAllocator	typeref:typename:T
var	lua\\lparser.h	/^    } var;$/;"	m	union:expdesc::__anon029e1592020a	typeref:struct:expdesc::__anon029e1592020a::__anon029e15920408
var_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ASTPtr var_;$/;"	m	class:nnvm::fusion::AssignAST	typeref:typename:ASTPtr
var_	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  ASTPtr var_;$/;"	m	class:nnvm::fusion::DeclFloatAST	typeref:typename:ASTPtr
var_states_	src\\session.cc	/^  VarStateMap* var_states_;$/;"	m	class:tinyflow::TorchExecutor	typeref:typename:VarStateMap *	file:
varinfo	lua\\ldebug.c	/^static const char *varinfo (lua_State *L, const TValue *o) {$/;"	f	typeref:typename:const char *	file:
varname	lua\\lobject.h	/^  TString *varname;$/;"	m	struct:LocVar	typeref:typename:TString *
version	dmlc-core\\doc\\conf.py	/^version = "0.5.0"$/;"	v
version	nnvm\\include\\nnvm\\graph.h	/^    uint32_t version;$/;"	m	struct:nnvm::IndexedGraph::NodeEntry	typeref:typename:uint32_t
version	nnvm\\include\\nnvm\\node.h	/^  uint32_t version;$/;"	m	struct:nnvm::NodeEntry	typeref:typename:uint32_t
version	nnvm\\src\\core\\symbolic.cc	/^  uint32_t version{0};$/;"	m	struct:nnvm::VariableParam	typeref:typename:uint32_t	file:
version	nnvm\\src\\pass\\saveload_json.cc	/^    uint32_t version;$/;"	m	struct:nnvm::pass::__anonc309bbd30110::JSONNode::Entry	typeref:typename:uint32_t	file:
view	torch7\\lib\\TH\\generic\\THStorage.h	/^    struct THStorage *view;$/;"	m	struct:THStorage	typeref:struct:THStorage *
vkisindexed	lua\\lparser.h	/^#define vkisindexed(/;"	d
vkisvar	lua\\lparser.h	/^#define vkisvar(/;"	d
vmbreak	lua\\ljumptab.h	/^#define vmbreak	/;"	d
vmbreak	lua\\lvm.c	/^#define vmbreak	/;"	d	file:
vmcase	lua\\ljumptab.h	/^#define vmcase(/;"	d
vmcase	lua\\lvm.c	/^#define vmcase(/;"	d	file:
vmdispatch	lua\\ljumptab.h	/^#define vmdispatch(/;"	d
vmdispatch	lua\\lvm.c	/^#define vmdispatch(/;"	d	file:
vmfetch	lua\\lvm.c	/^#define vmfetch(/;"	d	file:
void *luaT_getfieldchecklightudata(lua_State *L, int ud, const char *field)	torch7\\lib\\luaT\\README.md	/^## void *luaT_getfieldchecklightudata(lua_State *L, int ud, const char *field) ##$/;"	s
void *luaT_getfieldcheckudata(lua_State *L, int ud, const char *field, const char *tname)	torch7\\lib\\luaT\\README.md	/^## void *luaT_getfieldcheckudata(lua_State *L, int ud, const char *field, const char *tname) ##$/;"	s
void *luaT_toudata(lua_State *L, int ud, const char *tname)	torch7\\lib\\luaT\\README.md	/^### void *luaT_toudata(lua_State *L, int ud, const char *tname) ###$/;"	S
void luaT_free(lua_State *L, void *ptr)	torch7\\lib\\luaT\\README.md	/^### void luaT_free(lua_State *L, void *ptr) ###$/;"	S
void luaT_getfieldchecktable(lua_State *L, int ud, const char *field)	torch7\\lib\\luaT\\README.md	/^## void luaT_getfieldchecktable(lua_State *L, int ud, const char *field) ##$/;"	s
void luaT_pushudata(lua_State *L, void *udata, const char *tname)	torch7\\lib\\luaT\\README.md	/^### void luaT_pushudata(lua_State *L, void *udata, const char *tname) ###$/;"	S
void luaT_registeratname(lua_State *L, const struct luaL_Reg *methods, const char *name)	torch7\\lib\\luaT\\README.md	/^### void luaT_registeratname(lua_State *L, const struct luaL_Reg *methods, const char *name) ###$/;"	S
void luaT_stackdump(lua_State *L)	torch7\\lib\\luaT\\README.md	/^### void luaT_stackdump(lua_State *L) ###$/;"	S
void* luaT_alloc(lua_State *L, long size)	torch7\\lib\\luaT\\README.md	/^### void* luaT_alloc(lua_State *L, long size) ###$/;"	S
void* luaT_realloc(lua_State *L, void *ptr, long size)	torch7\\lib\\luaT\\README.md	/^### void* luaT_realloc(lua_State *L, void *ptr, long size) ###$/;"	S
volatile	bin\\CMakeFiles\\3.7.1\\CompilerIdC\\CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vslen	lua\\lobject.h	/^#define vslen(/;"	d
vsnprintf	dmlc-core\\include\\dmlc\\base.h	/^#define vsnprintf /;"	d
vsnprintf	nnvm\\include\\dmlc\\base.h	/^#define vsnprintf /;"	d
vtable	torch7\\lib\\TH\\THFilePrivate.h	/^    struct THFileVTable *vtable;$/;"	m	struct:THFile__	typeref:struct:THFileVTable *
wait	torch7\\test\\test_timer.lua	/^  local function wait(seconds)$/;"	f
warnf	lua\\lauxlib.c	/^static void warnf (void *ud, const char *message, int tocont) {$/;"	f	typeref:typename:void	file:
warnf	lua\\lstate.h	/^  lua_WarnFunction warnf;  \/* warning function *\/$/;"	m	struct:global_State	typeref:typename:lua_WarnFunction
warnf	lua\\ltests.c	/^static void warnf (void *ud, const char *msg, int tocont) {$/;"	f	typeref:typename:void	file:
weak	lua\\lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
weight	dmlc-core\\include\\dmlc\\data.h	/^  const real_t *weight;$/;"	m	struct:dmlc::RowBlock	typeref:typename:const real_t *
weight	dmlc-core\\include\\dmlc\\data.h	/^  real_t weight;$/;"	m	class:dmlc::Row	typeref:typename:real_t
weight	dmlc-core\\src\\data\\row_block.h	/^  std::vector<real_t> weight;$/;"	m	struct:dmlc::data::RowBlockContainer	typeref:typename:std::vector<real_t>
what	dmlc-core\\src\\config.cc	/^  virtual const char* what() const throw() {$/;"	f	class:dmlc::TokenizeError	typeref:typename:const char *	file:
what	lua\\lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
whilestat	lua\\lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
white2gray	lua\\lgc.c	/^#define white2gray(/;"	d	file:
whitelist	lua\\lgc.c	/^static void whitelist (global_State *g, GCObject *p) {$/;"	f	typeref:typename:void	file:
withvariant	lua\\lobject.h	/^#define withvariant(/;"	d
workerCores	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int workerCores = 1;$/;"	f	class:ApplicationMaster	file:
workerMemoryMB	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private int workerMemoryMB = 10;$/;"	f	class:ApplicationMaster	file:
workerResources	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\ApplicationMaster.java	/^    private Map<String, LocalResource> workerResources = new java.util.HashMap<String, LocalReso/;"	f	class:ApplicationMaster	file:
wrap	torch7\\TensorMath.lua	/^local function wrap(...)$/;"	f
wrap(luaname, cfunction, arguments, ...)	cwrap\\doc\\highlevelinterface.md	/^### wrap(luaname, cfunction, arguments, ...) ###$/;"	S
wrapper_getRNGState	bin\\torch7\\random.c	/^static int wrapper_getRNGState(lua_State *L)$/;"	f	typeref:typename:int	file:
wrapper_initialSeed	bin\\torch7\\random.c	/^static int wrapper_initialSeed(lua_State *L)$/;"	f	typeref:typename:int	file:
wrapper_manualSeed	bin\\torch7\\random.c	/^static int wrapper_manualSeed(lua_State *L)$/;"	f	typeref:typename:int	file:
wrapper_seed	bin\\torch7\\random.c	/^static int wrapper_seed(lua_State *L)$/;"	f	typeref:typename:int	file:
wrapper_setRNGState	bin\\torch7\\random.c	/^static int wrapper_setRNGState(lua_State *L)$/;"	f	typeref:typename:int	file:
write	dmlc-core\\include\\dmlc\\json.h	/^    void (*write)(JSONWriter* reader, const any& data);$/;"	m	struct:dmlc::json::AnyJSONManager::Entry	typeref:typename:void (*)(JSONWriter * reader,const any & data)
write	nnvm\\include\\dmlc\\json.h	/^    void (*write)(JSONWriter* reader, const any& data);$/;"	m	struct:dmlc::json::AnyJSONManager::Entry	typeref:typename:void (*)(JSONWriter * reader,const any & data)
writeByte	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeByte)(THFile *self, unsigned char *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,unsigned char * data,size_t n)
writeChar	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeChar)(THFile *self, char *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,char * data,size_t n)
writeDouble	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeDouble)(THFile *self, double *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,double * data,size_t n)
writeFloat	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeFloat)(THFile *self, float *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,float * data,size_t n)
writeHalf	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeHalf)(THFile *self, THHalf *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,THHalf * data,size_t n)
writeInt	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeInt)(THFile *self, int *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,int * data,size_t n)
writeLong	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeLong)(THFile *self, long *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,long * data,size_t n)
writeObject(object)	torch7\\doc\\file.md	/^### writeObject(object) ###$/;"	S
writeShort	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeShort)(THFile *self, short *data, size_t n);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,short * data,size_t n)
writeString	torch7\\lib\\TH\\THFilePrivate.h	/^    size_t (*writeString)(THFile *self, const char *str, size_t size);$/;"	m	struct:THFileVTable	typeref:typename:size_t (*)(THFile * self,const char * str,size_t size)
writer	lua\\ldump.c	/^  lua_Writer writer;$/;"	m	struct:__anon7d8240f60108	typeref:typename:lua_Writer	file:
writer	lua\\lstrlib.c	/^static int writer (lua_State *L, const void *b, size_t size, void *B) {$/;"	f	typeref:typename:int	file:
x	bin\\l.py	/^x = tf.placeholder(tf.float32, [None, 784])$/;"	v
x	example\\cifar_resnet.py	/^x = tf.placeholder(tf.float32)$/;"	v
x	example\\mnist_lenet.py	/^x = tf.placeholder(tf.float32)$/;"	v
x	example\\mnist_mlp_auto_shape_inference.py	/^x = tf.placeholder(tf.float32)$/;"	v
x	example\\mnist_softmax.py	/^x = tf.placeholder(tf.float32, [None, 784])$/;"	v
x	example\\mnist_softmax_minimum.py	/^x = tf.placeholder(tf.float32, [None, 784])$/;"	v
x	lua\\ltests.c	/^static struct X { int x; } x;$/;"	m	struct:runC::X	typeref:typename:int	file:
x	lua\\testes\\api.lua	/^    local x = setmetatable({10}, {__close = function(y)$/;"	f
x	lua\\testes\\calls.lua	/^x = load(string.dump(function (x)$/;"	f
x	lua\\testes\\coroutine.lua	/^      local x = function () a = a+1 end$/;"	f
x	lua\\testes\\coroutine.lua	/^    local <toclose> x = func2close(function (self, err)$/;"	f
x	lua\\testes\\coroutine.lua	/^  local x = coroutine.create(function ()$/;"	f
x	lua\\testes\\coroutine.lua	/^local x = coroutine.create (function ()$/;"	f
x	lua\\testes\\coroutine.lua	/^local x = coroutine.wrap (function ()$/;"	f
x	lua\\testes\\errors.lua	/^  local x = D.upvalueid(function () return debug end, 1)$/;"	f
x	lua\\testes\\gc.lua	/^  local x = function (w) a=a+w; end$/;"	f
x	lua\\testes\\locals.lua	/^    local <toclose> x = setmetatable({"x"}, {__close = function (self)$/;"	f
x	lua\\testes\\locals.lua	/^    local <toclose> x = setmetatable({}, {__close = function ()$/;"	f
x	lua\\testes\\locals.lua	/^  local <toclose> x = function () os.exit(false) end    -- should not run$/;"	f
x	lua\\testes\\main.lua	/^  local <toclose> x = function (err)$/;"	f
x	torch7\\lib\\TH\\THHalf.h	/^  unsigned int x;$/;"	m	struct:__thalign__	typeref:typename:unsigned int
x	torch7\\lib\\TH\\THHalf.h	/^  unsigned short x;$/;"	m	struct:__thalign__	typeref:typename:unsigned short
x:cinv()	torch7\\doc\\maths.md	/^### x:cinv() ###$/;"	S
x:neg()	torch7\\doc\\maths.md	/^### x:neg() ###$/;"	S
xgetbv	torch7\\lib\\TH\\generic\\simd\\convolve.c	/^static void xgetbv(unsigned int op, unsigned int* eax, unsigned int* edx) {$/;"	f	typeref:typename:void	file:
xml	dmlc-core\\doc\\Makefile	/^xml:$/;"	t
xuxu	lua\\testes\\attrib.lua	/^    function xuxu (x) return x+20 end$/;"	f
xv	lua\\testes\\locals.lua	/^    local <toclose> xv = func2close(function () x = true end)$/;"	f
xv	lua\\testes\\locals.lua	/^    local <toclose> xv = func2close(function () x = x + 1; error("XXX") end)$/;"	f
xx	lua\\testes\\locals.lua	/^    local <toclose> xx = func2close(function () x = x + 1; error("YYY") end)$/;"	f
xx	lua\\testes\\locals.lua	/^    local <toclose> xx = func2close(function (self, msg)$/;"	f
xxx	lua\\testes\\locals.lua	/^    local <toclose> xxx = func2close(function (self, msg)$/;"	f
xxxx	lua\\testes\\verybig.lua	/^function xxxx (x) return b[x] end$/;"	f
y	bin\\l.py	/^y = tf.nn.softmax(tf.matmul(x, W))$/;"	v
y	example\\mnist_softmax.py	/^y = tf.nn.softmax(tf.matmul(x, W))$/;"	v
y	example\\mnist_softmax_minimum.py	/^y = tf.nn.softmax(tf.matmul(x, W))$/;"	v
y	lua\\testes\\coroutine.lua	/^    local <toclose> y = func2close(function (self,err)$/;"	f
y	lua\\testes\\coroutine.lua	/^  local y = coroutine.create(function ()$/;"	f
y	lua\\testes\\locals.lua	/^    local <toclose> y = func2close(function () T.alloccount() end)$/;"	f
y	lua\\testes\\locals.lua	/^    local <toclose> y = func2close(function () error(32) end)$/;"	f
y	lua\\testes\\locals.lua	/^    local <toclose> y = func2close(function (self, err)$/;"	f
y_	example\\mnist_softmax.py	/^y_ = tf.placeholder(tf.float32, [None, 10])$/;"	v
y_	example\\mnist_softmax_minimum.py	/^y_ = tf.placeholder(tf.float32, [None, 10])$/;"	v
yarnClient	dmlc-core\\tracker\\yarn\\src\\main\\java\\org\\apache\\hadoop\\yarn\\dmlc\\Client.java	/^        private YarnClient yarnClient;$/;"	f	class:Client.CtrlCHandler	file:
yarn_submit	dmlc-core\\tracker\\dmlc_tracker\\yarn.py	/^def yarn_submit(args, nworker, nserver, pass_env):$/;"	f
yarn_submit_pass	dmlc-core\\tracker\\dmlc_tracker\\yarn.py	/^    def yarn_submit_pass(nworker, nserver, pass_env):$/;"	f	function:submit	file:
yieldable	lua\\lstate.h	/^#define yieldable(/;"	d
yindex	lua\\lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
youngcollection	lua\\lgc.c	/^static void youngcollection (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
yv	lua\\testes\\locals.lua	/^      local <toclose> yv = func2close(function () y = true end)$/;"	f
z	lua\\ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	typeref:typename:ZIO *	file:
z	lua\\llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState	typeref:typename:ZIO *
zeros	python\\tinyflow\\_ops.py	/^def zeros(shape):$/;"	f
zgetc	lua\\lzio.h	/^#define zgetc(/;"	d
{__close	lua\\testes\\api.lua	/^              setmetatable({}, {__close = function () flag = true end})$/;"	f
{__close	lua\\testes\\api.lua	/^    pushstring "return {__close = function () Y = 'ho'; end}"$/;"	f
{__close	lua\\testes\\locals.lua	/^                        {__close = function () numopen = numopen - 1 end})$/;"	f
{__concat	lua\\testes\\events.lua	/^setmetatable(c, {__concat = function (a,b)$/;"	f
{__eq	lua\\testes\\events.lua	/^  debug.setmetatable(u1, {__eq = function (a, b)$/;"	f
{__eq	lua\\testes\\events.lua	/^  debug.setmetatable(u2, {__eq = function (a, b)$/;"	f
{__gc	lua\\testes\\api.lua	/^      {__gc = function (x) error("@expected error in gc") end})$/;"	f
{__gc	lua\\testes\\api.lua	/^    debug.setmetatable(a[i], {__gc = function (x) load("A=A+1")() end})$/;"	f
{__gc	lua\\testes\\db.lua	/^  setmetatable({}, {__gc = function ()$/;"	f
{__gc	lua\\testes\\gc.lua	/^        setmetatable(param, {__gc = function () collected = true end})$/;"	f
{__gc	lua\\testes\\gc.lua	/^  setmetatable(u, {__gc = function (o)$/;"	f
{__gc	lua\\testes\\gc.lua	/^setmetatable(a, {__gc = function (u)$/;"	f
{__index	lua\\testes\\events.lua	/^                     {__index = function (_,n) return a[n-3]+4, "lixo" end})})})$/;"	f
{__newindex	lua\\testes\\events.lua	/^  setmetatable(a, {__newindex = function (t,k,v) foi=true; rawset(t,k,v) end})$/;"	f
{__newindex	lua\\testes\\nextvar.lua	/^  debug.setmetatable(u2, {__newindex = function (_, k, v) tab2[k] = v end})$/;"	f
{__pairs	lua\\testes\\nextvar.lua	/^setmetatable(a, {__pairs = function (x) return foo, x, 0 end})$/;"	f
{__tostring	lua\\testes\\main.lua	/^setmetatable(m, {__tostring = function(x)$/;"	f
{{name	torch7\\TensorMath.lua	/^        {{name=Tensor, default=true, returned=true, postcall=function(arg)$/;"	f
~	lua\\testes\\api.lua	/^assert(to("func2num", hfunc) ~= 0)  -- "heavy" C function (with upvalue)$/;"	f
~	lua\\testes\\api.lua	/^assert(to("func2num", io.read) ~= 0)     -- light C function$/;"	f
~	lua\\testes\\api.lua	/^assert(to("topointer", hfunc) ~= null)        -- "heavy" C function$/;"	f
~	lua\\testes\\api.lua	/^assert(to("topointer", io.read) ~= null)           -- light C function$/;"	f
~	lua\\testes\\nextvar.lua	/^    if not package.loaded[n] and type(v) ~= "function" and$/;"	f
~	torch7\\TestSuite.lua	/^      if type(value) ~= "function" then$/;"	f
~AST	nnvm\\plugin\\nnvm-fusion\\include\\nnvm-fusion\\ast.h	/^  virtual ~AST() {}$/;"	f	class:nnvm::fusion::AST
~AzureFileSystem	dmlc-core\\src\\io\\azure_filesys.h	/^  virtual ~AzureFileSystem() {}$/;"	f	class:dmlc::io::AzureFileSystem
~BasicRowIter	dmlc-core\\src\\data\\basic_row_iter.h	/^  virtual ~BasicRowIter() {}$/;"	f	class:dmlc::data::BasicRowIter
~CURLGlobal	dmlc-core\\src\\io\\s3_filesys.cc	/^  ~CURLGlobal() {$/;"	f	struct:dmlc::io::s3::CURLGlobal	file:
~CURLReadStreamBase	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual ~CURLReadStreamBase() {$/;"	f	class:dmlc::io::s3::CURLReadStreamBase	file:
~CachedInputSplit	dmlc-core\\src\\io\\cached_input_split.h	/^  virtual ~CachedInputSplit(void) {$/;"	f	class:dmlc::io::CachedInputSplit
~CustomLogMessage	dmlc-core\\include\\dmlc\\logging.h	/^  ~CustomLogMessage() {$/;"	f	class:dmlc::CustomLogMessage
~CustomLogMessage	nnvm\\include\\dmlc\\logging.h	/^  ~CustomLogMessage() {$/;"	f	class:dmlc::CustomLogMessage
~DataIter	dmlc-core\\include\\dmlc\\data.h	/^  virtual ~DataIter(void) {}$/;"	f	class:dmlc::DataIter
~DiskRowIter	dmlc-core\\src\\data\\disk_row_iter.h	/^  virtual ~DiskRowIter(void) {$/;"	f	class:dmlc::data::DiskRowIter
~FieldAccessEntry	dmlc-core\\include\\dmlc\\parameter.h	/^  virtual ~FieldAccessEntry() {}$/;"	f	class:dmlc::parameter::FieldAccessEntry
~FieldAccessEntry	nnvm\\include\\dmlc\\parameter.h	/^  virtual ~FieldAccessEntry() {}$/;"	f	class:dmlc::parameter::FieldAccessEntry
~FileStream	dmlc-core\\src\\io\\local_filesys.cc	/^  virtual ~FileStream(void) {$/;"	f	class:dmlc::io::FileStream	file:
~FileSystem	dmlc-core\\src\\io\\filesys.h	/^  virtual ~FileSystem() {}$/;"	f	class:dmlc::io::FileSystem
~HDFSFileSystem	dmlc-core\\src\\io\\hdfs_filesys.cc	/^HDFSFileSystem::~HDFSFileSystem(void) {$/;"	f	class:dmlc::io::HDFSFileSystem
~HDFSStream	dmlc-core\\src\\io\\hdfs_filesys.cc	/^  virtual ~HDFSStream(void) {$/;"	f	class:dmlc::io::HDFSStream	file:
~InputSplit	dmlc-core\\include\\dmlc\\io.h	/^  virtual ~InputSplit(void) {}$/;"	f	class:dmlc::InputSplit
~InputSplitBase	dmlc-core\\src\\io\\input_split_base.cc	/^InputSplitBase::~InputSplitBase(void) {$/;"	f	class:dmlc::io::InputSplitBase
~LocalFileSystem	dmlc-core\\src\\io\\local_filesys.h	/^  virtual ~LocalFileSystem() {}$/;"	f	class:dmlc::io::LocalFileSystem
~LogMessage	dmlc-core\\include\\dmlc\\logging.h	/^  ~LogMessage() { log_stream_ << '\\n'; }$/;"	f	class:dmlc::LogMessage
~LogMessage	nnvm\\include\\dmlc\\logging.h	/^  ~LogMessage() { log_stream_ << '\\n'; }$/;"	f	class:dmlc::LogMessage
~LogMessageFatal	dmlc-core\\include\\dmlc\\logging.h	/^  ~LogMessageFatal() DMLC_THROW_EXCEPTION {$/;"	f	class:dmlc::LogMessageFatal
~LogMessageFatal	dmlc-core\\include\\dmlc\\logging.h	/^  ~LogMessageFatal() {$/;"	f	class:dmlc::LogMessageFatal
~LogMessageFatal	nnvm\\include\\dmlc\\logging.h	/^  ~LogMessageFatal() DMLC_THROW_EXCEPTION {$/;"	f	class:dmlc::LogMessageFatal
~LogMessageFatal	nnvm\\include\\dmlc\\logging.h	/^  ~LogMessageFatal() {$/;"	f	class:dmlc::LogMessageFatal
~LuaRef	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaRef::~LuaRef() {$/;"	f	class:dmlc::LuaRef
~LuaState	dmlc-core\\include\\dmlc\\lua.h	/^inline LuaState::~LuaState() {$/;"	f	class:dmlc::LuaState
~Node	nnvm\\src\\core\\node.cc	/^Node::~Node() {$/;"	f	class:nnvm::Node
~ParamManager	dmlc-core\\include\\dmlc\\parameter.h	/^  ~ParamManager() {$/;"	f	class:dmlc::parameter::ParamManager
~ParamManager	nnvm\\include\\dmlc\\parameter.h	/^  ~ParamManager() {$/;"	f	class:dmlc::parameter::ParamManager
~ParserImpl	dmlc-core\\src\\data\\parser.h	/^  virtual ~ParserImpl() {}$/;"	f	class:dmlc::data::ParserImpl
~Producer	dmlc-core\\include\\dmlc\\threadediter.h	/^    virtual ~Producer() {}$/;"	f	class:dmlc::ThreadedIter::Producer
~ReadStream	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual ~ReadStream(void) {}$/;"	f	class:dmlc::io::s3::ReadStream	file:
~Registry	dmlc-core\\include\\dmlc\\registry.h	/^  ~Registry() {$/;"	f	class:dmlc::Registry
~Registry	nnvm\\include\\dmlc\\registry.h	/^  ~Registry() {$/;"	f	class:dmlc::Registry
~S3FileSystem	dmlc-core\\src\\io\\s3_filesys.h	/^  virtual ~S3FileSystem() {}$/;"	f	class:dmlc::io::S3FileSystem
~SeekStream	dmlc-core\\include\\dmlc\\io.h	/^  virtual ~SeekStream(void) {}$/;"	f	class:dmlc::SeekStream
~Serializable	dmlc-core\\include\\dmlc\\io.h	/^  virtual ~Serializable() {}$/;"	f	class:dmlc::Serializable
~Session	include\\tinyflow\\base.h	/^  virtual ~Session() {}$/;"	f	class:tinyflow::Session
~SingleFileSplit	dmlc-core\\src\\io\\single_file_split.h	/^  virtual ~SingleFileSplit(void) {$/;"	f	class:dmlc::io::SingleFileSplit
~StackReset	dmlc-core\\include\\dmlc\\lua.h	/^  ~StackReset() {$/;"	f	struct:dmlc::LuaState::StackReset
~Stream	dmlc-core\\include\\dmlc\\io.h	/^  virtual ~Stream(void) {}$/;"	f	class:dmlc::Stream
~TextParserBase	dmlc-core\\src\\data\\text_parser.h	/^  virtual ~TextParserBase() {$/;"	f	class:dmlc::data::TextParserBase
~ThreadLocalStore	dmlc-core\\include\\dmlc\\thread_local.h	/^  ~ThreadLocalStore() {$/;"	f	class:dmlc::ThreadLocalStore
~ThreadLocalStore	nnvm\\include\\dmlc\\thread_local.h	/^  ~ThreadLocalStore() {$/;"	f	class:dmlc::ThreadLocalStore
~ThreadedInputSplit	dmlc-core\\src\\io\\threaded_input_split.h	/^  virtual ~ThreadedInputSplit(void) {$/;"	f	class:dmlc::io::ThreadedInputSplit
~ThreadedIter	dmlc-core\\include\\dmlc\\threadediter.h	/^  virtual ~ThreadedIter(void) {$/;"	f	class:dmlc::ThreadedIter
~ThreadedParser	dmlc-core\\src\\data\\parser.h	/^  virtual ~ThreadedParser(void) {$/;"	f	class:dmlc::data::ThreadedParser
~ThreadlocalSharedPtr	dmlc-core\\include\\dmlc\\memory.h	/^  ~ThreadlocalSharedPtr() {$/;"	f	struct:dmlc::ThreadlocalSharedPtr
~ThreadlocalSharedPtr	nnvm\\include\\dmlc\\memory.h	/^  ~ThreadlocalSharedPtr() {$/;"	f	struct:dmlc::ThreadlocalSharedPtr
~TokenizeError	dmlc-core\\src\\config.cc	/^  ~TokenizeError() throw() {}$/;"	f	class:dmlc::TokenizeError	file:
~Tree	dmlc-core\\test\\registry_test.cc	/^  virtual ~Tree() {}$/;"	f	struct:tree::Tree	file:
~Tuple	nnvm\\include\\nnvm\\tuple.h	/^  inline ~Tuple() {$/;"	f	class:nnvm::Tuple
~WriteStream	dmlc-core\\src\\io\\s3_filesys.cc	/^  virtual ~WriteStream() {$/;"	f	class:dmlc::io::s3::WriteStream	file:
~any	dmlc-core\\include\\dmlc\\any.h	/^inline any::~any() {$/;"	f	class:dmlc::any
~any	nnvm\\include\\dmlc\\any.h	/^inline any::~any() {$/;"	f	class:dmlc::any
~istream	dmlc-core\\include\\dmlc\\io.h	/^  virtual ~istream() DMLC_NO_EXCEPTION {}$/;"	f	class:dmlc::istream
~ostream	dmlc-core\\include\\dmlc\\io.h	/^  virtual ~ostream() DMLC_NO_EXCEPTION {$/;"	f	class:dmlc::ostream
